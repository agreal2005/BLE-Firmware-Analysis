[
  {
    "name": "adns2080_movement_read",
    "return_type": "void",
    "params": [
      {
        "name": "deltaX",
        "type": "int16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "deltaY",
        "type": "int16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_motion_bits_read",
    "return_type": "adns2080_motion_bits_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_is_motion_detected",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_product_id_read",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdio_read_byte",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "REG_PROD_ID",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_revision_id_read",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_init",
    "return_type": "adns2080_status_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_reset",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_powerdown",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_wakeup",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_motion_interrupt_set",
    "return_type": "adns2080_status_t",
    "params": [
      {
        "name": "polarity",
        "type": "motion_output_polarity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "sensitivity",
        "type": "motion_output_sensitivity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_resolution_set",
    "return_type": "adns2080_status_t",
    "params": [
      {
        "name": "resolution",
        "type": "adns2080_resolution_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_motion_bits_set",
    "return_type": "adns2080_status_t",
    "params": [
      {
        "name": "motion_bits",
        "type": "adns2080_motion_bits_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_rest_periods_set",
    "return_type": "void",
    "params": [
      {
        "name": "rest1_period",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "rest2_period",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "rest3_period",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_downshift_times_set",
    "return_type": "void",
    "params": [
      {
        "name": "run_to_rest1_mode_time",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "rest1_to_rest2_mode_time",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "rest2_to_rest3_mode_time",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_force_mode_read",
    "return_type": "adns2080_mode_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adns2080_force_mode_set",
    "return_type": "void",
    "params": [
      {
        "name": "mode",
        "type": "adns2080_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_attr_is_requested",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "attr_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_attr_nb_to_get",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "queued_write_tx_message",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "handle_value",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gq_req",
        "type": "nrf_ble_gq_req_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_attr_encode_cmd_id",
    "return_type": "static encode_app_attr_t",
    "params": [
      {
        "name": "index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gq_req",
        "type": "nrf_ble_gq_req_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_attr_encode_app_id",
    "return_type": "static encode_app_attr_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_gq_req",
        "type": "nrf_ble_gq_req_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_app_id",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "app_id_len",
        "type": "const uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_app_id_bytes_encoded_count",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_attr_encode_attr_id",
    "return_type": "static encode_app_attr_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_gq_req",
        "type": "nrf_ble_gq_req_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_attr_count",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "attr_get_total_nb",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_attr_execute_write",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "handle_value",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_gq_req",
        "type": "nrf_ble_gq_req_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "CWE-119"
    ]
  },
  {
    "name": "app_attr_get",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_app_id",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "app_id_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ancs_c_app_attr_request",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_app_id",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "all_req_attrs_parsed",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "attr_is_requested",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "attr",
        "type": "ble_ancs_c_attr_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "command_id_parse",
    "return_type": "static ble_ancs_c_parse_state_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "notif_uid_parse",
    "return_type": "static ble_ancs_c_parse_state_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_id_parse",
    "return_type": "static ble_ancs_c_parse_state_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "attr_id_parse",
    "return_type": "static ble_ancs_c_parse_state_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "attr_len1_parse",
    "return_type": "static ble_ancs_c_parse_state_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "attr_len2_parse",
    "return_type": "static ble_ancs_c_parse_state_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "attr_data_parse",
    "return_type": "static ble_ancs_c_parse_state_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "attr_skip",
    "return_type": "static ble_ancs_c_parse_state_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ancs_parse_get_attrs_response",
    "return_type": "void",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "hvx_data_len",
        "type": "const uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "wait_burst_request_to_complete",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timeout_disable",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "beacon_transmit",
    "return_type": "static void",
    "params": [
      {
        "name": "message_type",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "authenticate_response_transmit",
    "return_type": "static void",
    "params": [
      {
        "name": "response_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "password_length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_password",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_pairing_resp_transmit",
    "return_type": "bool",
    "params": [
      {
        "name": "accept",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "event_queue_write",
    "return_type": "static void",
    "params": [
      {
        "name": "event_code",
        "type": "antfs_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "download_request_response_transmit",
    "return_type": "static void",
    "params": [
      {
        "name": "response",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_download_req_resp_prepare",
    "return_type": "void",
    "params": [
      {
        "name": "response",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_request_info",
        "type": "const antfs_request_info_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_input_data_download",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "num_bytes",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_message",
        "type": "const uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_upload_req_resp_transmit",
    "return_type": "bool",
    "params": [
      {
        "name": "response",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_request_info",
        "type": "const antfs_request_info_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_upload_data_resp_transmit",
    "return_type": "bool",
    "params": [
      {
        "name": "data_upload_success",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_erase_req_resp_transmit",
    "return_type": "void",
    "params": [
      {
        "name": "response",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_event_extract",
    "return_type": "bool",
    "params": [
      {
        "name": "p_event",
        "type": "antfs_event_return_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_period_set",
    "return_type": "static void",
    "params": [
      {
        "name": "link_period",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timeout_start",
    "return_type": "static void",
    "params": [
      {
        "name": "timeout_in_secs",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "authenticate_layer_transit",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_layer_cmd_decode",
    "return_type": "static void",
    "params": [
      {
        "name": "p_command_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_layer_transit",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "authenticate_layer_cmd_decode",
    "return_type": "static void",
    "params": [
      {
        "name": "control_byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_command_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "transport_layer_cmd_decode",
    "return_type": "static void",
    "params": [
      {
        "name": "control_byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_command_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "upload_data_process",
    "return_type": "static void",
    "params": [
      {
        "name": "control_byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "transport_layer_transit",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_message_process",
    "return_type": "void",
    "params": [
      {
        "name": "p_message",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_channel_setup",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "state_machine_reset",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timeout_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antfs_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_params",
        "type": "const antfs_params_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "burst_wait_handler",
        "type": "antfs_burst_wait_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_acknowledge_message_tx_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_mesg",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_acknowledge_message_tx_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_ble_cmd_rsp_dec",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_buf",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "packet_len",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "SVC_ANT_TX_ACKNOWLEDGED_MESSAGE",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_result_code",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_active_search_sharing_cycles_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ant_active_search_sharing_cycles_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cycles",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ant_active_search_sharing_cycles_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "cycles",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ant_active_search_sharing_cycles_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ant_adv_burst_config_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_config",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ant_adv_burst_config_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ant_bpwr_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_init",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_channel_config",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_disp_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_disp_config",
        "type": "ant_bpwr_disp_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_sens_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_sens_config",
        "type": "ant_bpwr_sens_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "next_page_number_get",
    "return_type": "static ant_bpwr_page_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sens_message_encode",
    "return_type": "static void",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_message_payload",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sens_message_decode",
    "return_type": "static void",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_message_payload",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "disp_message_decode",
    "return_type": "static void",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_message_payload",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_calib_request",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_page_1",
        "type": "ant_bpwr_page1_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_calib_response",
    "return_type": "void",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "service_calib",
    "return_type": "static void",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ant_message_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_disp_open",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_sens_open",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bpwr_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_sens_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_event",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_disp_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_event",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cadence_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_common_data",
        "type": "ant_bpwr_common_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_cadence_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_common_data",
        "type": "ant_bpwr_common_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_cadence_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_common_data",
        "type": "ant_bpwr_common_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page1_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page1_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_1_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page1_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_1_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page1_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page16_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page16_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_16_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page16_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_16_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page16_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page17_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page17_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_17_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page17_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_17_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page17_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page18_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page18_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_18_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page18_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_18_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page18_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_torque_log",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page_torque_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_torque_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page_torque_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_page_torque_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bpwr_page_torque_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_simulator_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_bpwr_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "ant_bpwr_simulator_cfg_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "auto_change",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_simulator_one_iteration",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_bpwr_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "ant_bpwr_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_simulator_increment",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_bpwr_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bpwr_simulator_decrement",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_bpwr_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_broadcast_message_tx_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_mesg",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_broadcast_message_tx_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bsc_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_disp_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bsc_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_disp_config",
        "type": "ant_bsc_disp_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_sens_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bsc_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_sens_config",
        "type": "ant_bsc_sens_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "next_bkgd_page_number_set",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bsc_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_sens_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_disp_open",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bsc_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_sens_open",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_bsc_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_disp_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "comb_page0_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bsc_combined_page0_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_combined_page_0_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_combined_page0_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_combined_page_0_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_combined_page0_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page0_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bsc_page0_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_0_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page0_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_0_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page0_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_1_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page1_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_1_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page1_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page2_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bsc_page2_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_2_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page2_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_2_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page2_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page3_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bsc_page3_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_3_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page3_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_3_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page3_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page4_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bsc_page4_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_4_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page4_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_4_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page4_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page5_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_bsc_page5_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_5_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page5_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_page_5_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_bsc_page5_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_simulator_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_bsc_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "ant_bsc_simulator_cfg_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "auto_change",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_simulator_one_iteration",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_bsc_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_simulator_increment",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_bsc_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_bsc_simulator_decrement",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_bsc_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_capabilities_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_capabilities_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_capabilities",
        "type": "void * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_assign_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "channel_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "network",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ext_assign",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_assign_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_close_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_close_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_id_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_id_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_device_number",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_device_type",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_transmit_type",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_id_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "device_number",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "device_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "transmit_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_id_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_low_priority_rx_search_timeout_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "timeout",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_low_priority_rx_search_timeout_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_low_priority_rx_search_timeout_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_channel",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_timeout",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_low_priority_rx_search_timeout_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_open_with_offset_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "usOffset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_open_with_offset_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_period_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_period_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_period",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_period_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "period",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_period_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_radio_freq_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_radio_freq_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_r_freq",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_radio_freq_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "freq",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_radio_freq_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_radio_tx_power_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_power",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "custom_tx_power",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_radio_tx_power_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_rx_search_timeout_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "timeout",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_rx_search_timeout_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_status_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_status_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_status",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_unassign_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_unassign_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_coex_config_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_coex_config_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_coex_config",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_coex_config",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_coex_config_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_coex_config",
        "type": "ANT_BUFFER_PTR const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_coex_config",
        "type": "ANT_BUFFER_PTR const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_coex_config_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page70_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "volatile ant_common_page70_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_common_page_70_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "volatile ant_common_page70_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_common_page_70_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "volatile ant_common_page70_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page80_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "volatile ant_common_page80_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_common_page_80_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "volatile ant_common_page80_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_common_page_80_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "volatile ant_common_page80_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page81_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "volatile ant_common_page81_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_common_page_81_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "volatile ant_common_page81_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_common_page_81_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "volatile ant_common_page81_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_crypto_channel_enable_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "key_num",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "decimation_rate",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_crypto_channel_enable_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_crypto_info_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_crypto_info_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_info",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_crypto_info_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_crypto_info_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_crypto_key_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "key_num",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_key",
        "type": "uint8_t const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_crypto_key_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_cw_test_mode_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "radio_freq",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_power",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "custom_tx_power",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_cw_test_mode_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_cw_test_mode_init_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_cw_test_mode_init_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_enable_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_channel_enable",
        "type": "ANT_ENABLE * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_enable_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_enc_advance_burs_config_apply",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_adv_burst_set",
        "type": "ant_encrypt_adv_burst_settings_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ant_stack_encryption_config",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_crypto_set",
        "type": "ant_encrypt_stack_settings_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_encrypt_config_perform",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "channel_number",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_crypto_config",
        "type": "ant_encrypt_channel_settings_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_encrypt_config",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "channel_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "channel_number",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_crypto_config",
        "type": "ant_encrypt_channel_settings_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_encrypt_user_handler_try_to_run",
    "return_type": "static void",
    "params": [
      {
        "name": "ant_channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "ant_encrypt_user_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_enc_event_handler_register",
    "return_type": "void",
    "params": [
      {
        "name": "user_handler_func",
        "type": "ant_encryp_user_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_encryp_tracking_state_set",
    "return_type": "void",
    "params": [
      {
        "name": "channel_number",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "state",
        "type": "ant_encrypt_tracking_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_encryp_negotiation_slave_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_channel_encryp_tracking_state_get",
    "return_type": "ant_encrypt_tracking_state_t",
    "params": [
      {
        "name": "channel_number",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_slave_channel_encrypt_config",
    "return_type": "void",
    "params": [
      {
        "name": "channel_number",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_crypto_config",
        "type": "ant_encrypt_channel_settings_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_slave_encrypt_try_enable",
    "return_type": "static void",
    "params": [
      {
        "name": "ant_channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ant_message_id",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_slave_encrypt_negotiation",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_event_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ant_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_event_rx_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ant_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_hrm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_disp_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_hrm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "ant_hrm_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_sens_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_hrm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_sens_config",
        "type": "ant_hrm_sens_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_sens_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_disp_open",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_hrm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_sens_open",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_hrm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_disp_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_0_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page0_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_0_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page0_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_1_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page1_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_1_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page1_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_2_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page2_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_2_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page2_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_3_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page3_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_3_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page3_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_4_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page4_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_page_4_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_hrm_page4_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_simulator_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_hrm_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "ant_hrm_simulator_cfg_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "auto_change",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_simulator_one_iteration",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_hrm_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_simulator_increment",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_hrm_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_hrm_simulator_decrement",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_hrm_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_id_list_add_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dev_id",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "list_index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_id_list_add_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_id_list_config_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "id_list_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "inc_exc_flag",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_id_list_config_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_custom_key_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "network_number",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "network_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_network_address_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "network_number",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "network_key",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_plus_key_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "network_number",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_fs_key_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "network_number",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_lib_config_clear_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "ant_lib_config",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_lib_config_clear_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_lib_config_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_lib_config_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ant_lib_config",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_lib_config_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "ant_lib_config",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_lib_config_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_network_address_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "network",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_network_key",
        "type": "uint8_t const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_network_address_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_prox_search_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "prox_threshold",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "custom_prox_threshold",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_prox_search_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_request_controller_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_controller",
        "type": "ant_request_controller_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_request_controller_request",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_controller",
        "type": "ant_request_controller_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel_number",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_page_70",
        "type": "ant_common_page70_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_request_controller_pending_get",
    "return_type": "bool",
    "params": [
      {
        "name": "p_controller",
        "type": "ant_request_controller_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_page_number",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_request_controller_ack_needed",
    "return_type": "bool",
    "params": [
      {
        "name": "p_controller",
        "type": "ant_request_controller_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_request_controller_disp_evt_handler",
    "return_type": "ant_request_controller_evt_t",
    "params": [
      {
        "name": "p_controller",
        "type": "ant_request_controller_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_sended",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_controller",
        "type": "ant_request_controller_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_requested",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_controller",
        "type": "ant_request_controller_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_message_payload",
        "type": "ant_common_message_layout_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_request_controller_sens_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_controller",
        "type": "ant_request_controller_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_rx_scan_mode_start_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "sync_scan_channel_packets_only",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ant_rx_scan_mode_start_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ant_sdm_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_sdm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_disp_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_sdm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_disp_config",
        "type": "ant_sdm_disp_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_sens_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_sdm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_channel_config",
        "type": "ant_channel_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_sens_config",
        "type": "ant_sdm_sens_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_request",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_sdm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_page_70",
        "type": "ant_common_page70_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_sens_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_disp_open",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_sdm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_sens_open",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_profile",
        "type": "ant_sdm_profile_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_disp_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "speed_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_common_data",
        "type": "ant_sdm_common_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_speed_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_common_data",
        "type": "ant_sdm_common_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_speed_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_common_data",
        "type": "ant_sdm_common_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_1_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_sdm_page1_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_common_data",
        "type": "ant_sdm_common_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_1_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_sdm_page1_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_common_data",
        "type": "ant_sdm_common_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_1_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_sdm_page1_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_common_data",
        "type": "ant_sdm_common_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_16_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_common_data",
        "type": "ant_sdm_common_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_16_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_common_data",
        "type": "ant_sdm_common_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_16_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_common_data",
        "type": "ant_sdm_common_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_2_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_sdm_page2_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_2_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_sdm_page2_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_2_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_sdm_page2_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_22_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_sdm_page22_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_22_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_sdm_page22_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_22_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_sdm_page22_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_3_data_log",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page_data",
        "type": "ant_sdm_page3_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_3_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_sdm_page3_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_page_3_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_page_buffer",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_page_data",
        "type": "ant_sdm_page3_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_simulator_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_sdm_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "ant_sdm_simulator_cfg_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "auto_change",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_simulator_one_iteration",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_sdm_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_simulator_increment",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_sdm_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_sdm_simulator_decrement",
    "return_type": "void",
    "params": [
      {
        "name": "p_simulator",
        "type": "ant_sdm_simulator_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_search_channel_priority_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "search_priority",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_search_channel_priority_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_search_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_config",
        "type": "ant_search_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_search_waveform_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "waveform",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_search_waveform_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_stack_reset_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_stack_reset_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_state_indicator_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "channel_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_indication_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "BSP_INDICATE_IDLE",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ant_state_indicator_channel_opened",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "m_shutdown_handler",
    "return_type": "static bool",
    "params": [
      {
        "name": "event",
        "type": "nrf_pwr_mgmt_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ANT_ENABLE_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_enable_params",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ANT_ENABLE_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_enable_params",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_evt_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_ant_evt",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_evt_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_ant_evt",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_version_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_version_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_version",
        "type": "void * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_ble_gap_sec_keys_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_ble_gap_sec_context_create",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_ble_gap_sec_context_destroy",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_ble_gap_sec_context_find",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_ble_gap_adv_buf_register",
    "return_type": "int",
    "params": [
      {
        "name": "p_buf",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_ble_gap_adv_buf_addr_unregister",
    "return_type": "void",
    "params": [
      {
        "name": "p_buf",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_context",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_ble_gap_scan_data_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_scan_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_ble_gap_scan_data_unset",
    "return_type": "void",
    "params": [
      {
        "name": "free",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_ble_user_mem_context_create",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_ble_user_mem_context_destroy",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_ble_user_mem_context_find",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "state_get",
    "return_type": "static btn_state_t",
    "params": [
      {
        "name": "pin",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "state_set",
    "return_type": "static void",
    "params": [
      {
        "name": "pin",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "state",
        "type": "btn_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usr_event",
    "return_type": "static void",
    "params": [
      {
        "name": "pin",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "evt_handle",
    "return_type": "void",
    "params": [
      {
        "name": "pin",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_start",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "detection_delay_timeout_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gpiote_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "pin",
        "type": "nrf_drv_gpiote_pin_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "action",
        "type": "nrf_gpiote_polarity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_button_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buttons",
        "type": "app_button_cfg_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "button_count",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "detection_delay",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_button_enable",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_button_disable",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_stop",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "m_detection_delay_timer_id",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_button_is_pushed",
    "return_type": "bool",
    "params": [
      {
        "name": "button_id",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_error_handler_bare",
    "return_type": "void",
    "params": [
      {
        "name": "error_code",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_error_save_and_stop",
    "return_type": "void",
    "params": [
      {
        "name": "id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "info",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_error_fault_handler",
    "return_type": "__WEAK void",
    "params": [
      {
        "name": "id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "info",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fifo_length",
    "return_type": "static __INLINE uint32_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fifo_put",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fifo_peek",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_byte",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fifo_get",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_byte",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_fifo_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_fifo_put",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_fifo_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_byte",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_fifo_peek",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_byte",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_fifo_flush",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_fifo_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_byte_array",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_size",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_fifo_write",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "app_fifo_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_byte_array",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_size",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gpiote_handler",
    "return_type": "void",
    "params": [
      {
        "name": "pin",
        "type": "nrf_drv_gpiote_pin_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "action",
        "type": "nrf_gpiote_polarity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_gpiote_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "max_users",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buffer",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_gpiote_user_register",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_user_id",
        "type": "app_gpiote_user_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_pins_low_to_high_mask",
        "type": "uint32_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pins_high_to_low_mask",
        "type": "uint32_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_handler",
        "type": "app_gpiote_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_gpiote_user_register_ex",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_user_id",
        "type": "app_gpiote_user_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_pins_config",
        "type": "app_gpiote_user_pin_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pin_count",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "event_handler",
        "type": "app_gpiote_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "error_check",
    "return_type": "__STATIC_INLINE uint32_t",
    "params": [
      {
        "name": "user_id",
        "type": "app_gpiote_user_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pin_event_enable",
    "return_type": "static void",
    "params": [
      {
        "name": "pin",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "user_enable",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "user_id",
        "type": "app_gpiote_user_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_gpiote_user_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "user_id",
        "type": "app_gpiote_user_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_gpiote_user_disable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "user_id",
        "type": "app_gpiote_user_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_gpiote_pins_state_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "user_id",
        "type": "app_gpiote_user_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_pins",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_buf_alloc",
    "return_type": "static void",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "enable_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ant_enable",
        "type": "ANT_ENABLE * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_assign_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "channel_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "network",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ext_assign",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_open_with_offset_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_open_with_offset",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "usOffset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_id_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_id_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "device_number",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "device_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "transmit_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_period_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_period_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "period",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_radio_freq_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_radio_freq_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "freq",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "broadcast_message_tx_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_broadcast_message_tx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_mesg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "acknowledge_message_tx_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_unassign_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_unassign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_close_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_close",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "network_address_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_radio_tx_power_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_radio_tx_power_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_power",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "custom_tx_power",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_rx_search_timeout_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_rx_search_timeout_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "timeout",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_low_priority_rx_search_timeout_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_low_priority_rx_search_timeout_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "timeout",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "prox_search_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_prox_search_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "prox_threshold",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "custom_prox_threshold",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "search_waveform_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_search_waveform_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "waveform",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_id_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_id_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_device_number",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_device_type",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_transmit_type",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_radio_freq_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_radio_freq_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_r_freq",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_period_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_period_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_period",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "search_channel_priority_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_search_channel_priority_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "search_priority",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "active_search_sharing_cycles_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sd_ant_active_search_sharing_cycles_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "cycles",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "lib_config_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_lib_config_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "ant_lib_config",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "active_search_sharing_cycles_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sd_ant_active_search_sharing_cycles_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cycles",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "lib_config_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_lib_config_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ant_lib_config",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lib_config_clear_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_lib_config_clear",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "ant_lib_config",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "stack_reset_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_stack_reset",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_scan_mode_start_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sd_ant_rx_scan_mode_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "sync_channel_packets_only",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "id_list_add_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_id_list_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dev_id",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "list_index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "id_list_config_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_id_list_config",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "id_list_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "inc_exc_flag",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_status_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_channel_status_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_status",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cw_test_mode_init_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_cw_test_mode_init",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cw_test_mode_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_cw_test_mode",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "radio_freq",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_power",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "custom_tx_power",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "version_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_version_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_version",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "capabilities_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_capabilities_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_capabilities",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crypto_channel_enable_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adv_burst_config_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "crypto_key_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_crypto_key_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "key_num",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crypto_info_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_crypto_info_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crypto_info_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_crypto_info_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "coex_config_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_coex_config_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_coex_config",
        "type": "ANT_BUFFER_PTR *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_coex_config",
        "type": "ANT_BUFFER_PTR *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "coex_config_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_coex_config_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_coex_config",
        "type": "ANT_BUFFER_PTR *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_coex_config",
        "type": "ANT_BUFFER_PTR *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uuid_encode_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_uuid_encode",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_uuid",
        "type": "ble_uuid_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le_len",
        "type": "uint8_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "tx_packet_count_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_tx_packet_count_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_count",
        "type": "uint8_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uuid_vs_add_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_uuid_vs_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_vs_uuid",
        "type": "ble_uuid128_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_type",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "uuid_decode_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_uuid_decode",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "uuid_le_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_version_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_version",
        "type": "ble_version_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "opt_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_opt_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "opt_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt",
        "type": "ble_opt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "opt_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_opt_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "opt_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt",
        "type": "ble_opt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_params",
        "type": "ble_enable_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_app_ram_base",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "user_mem_reply_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_user_mem_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_block",
        "type": "ble_user_mem_block_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cfg_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_cfg_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "cfg_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cfg",
        "type": "ble_cfg_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "app_ram_base",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gap_adv_start_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_device_name_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_device_name_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_dev_name",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_len",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_appearance_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_appearance_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_appearance",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_device_name_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_device_name_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_write_perm",
        "type": "ble_gap_conn_sec_mode_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dev_name",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_appearance_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_appearance_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "appearance",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_ppcp_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_ppcp_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_conn_params",
        "type": "ble_gap_conn_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_adv_data_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_adv_data_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "dlen",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sr_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "srdlen",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_conn_param_update_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_conn_param_update",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_params",
        "type": "ble_gap_conn_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_disconnect_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_disconnect",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "hci_status_code",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_sec_info_reply_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_sec_info_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_enc_info",
        "type": "ble_gap_enc_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_id_info",
        "type": "ble_gap_irk_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sign_info",
        "type": "ble_gap_sign_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_sec_params_reply_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_sec_params_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sec_status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_sec_keyset",
        "type": "ble_gap_sec_keyset_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_ppcp_get_reply_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_ppcp_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_conn_params",
        "type": "ble_gap_conn_params_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_adv_stop_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_auth_key_reply_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_auth_key_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "key_type",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key",
        "type": "uint8_t const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_authenticate_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_authenticate",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_conn_sec_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_conn_sec_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_sec",
        "type": "ble_gap_conn_sec_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_rssi_start_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_rssi_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "threshold_dbm",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "skip_count",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_rssi_stop_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_rssi_stop",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_tx_power_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_scan_stop_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_scan_stop",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_connect_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_connect_cancel_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_connect_cancel",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_scan_start_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_encrypt_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_encrypt",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_master_id",
        "type": "ble_gap_master_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_enc_info",
        "type": "ble_gap_enc_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_rssi_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_keypress_notify_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_keypress_notify",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "kp_not",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_lesc_dhkey_reply_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_lesc_dhkey_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_dhkey",
        "type": "ble_gap_lesc_dhkey_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_lesc_oob_data_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_lesc_oob_data_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_oobd_own",
        "type": "ble_gap_lesc_oob_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_oobd_peer",
        "type": "ble_gap_lesc_oob_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_lesc_oob_data_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_lesc_oob_data_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_pk_own",
        "type": "ble_gap_lesc_p256_pk_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_oobd_own",
        "type": "ble_gap_lesc_oob_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_addr_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_addr_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_addr_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_addr_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_privacy_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_privacy_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_privacy_params",
        "type": "ble_gap_privacy_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_privacy_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_privacy_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_privacy_params",
        "type": "ble_gap_privacy_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_whitelist_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_whitelist_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_wl_addrs",
        "type": "ble_gap_addr_t const * const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_device_identities_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_device_identities_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_id_keys",
        "type": "ble_gap_id_key_t const * const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pp_local_irks",
        "type": "ble_gap_irk_t const * const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_data_length_update_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_data_length_update",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_dl_params",
        "type": "ble_gap_data_length_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dl_limitation",
        "type": "ble_gap_data_length_limitation_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_phy_update_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_phy_update",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_gap_phys",
        "type": "ble_gap_phys_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_adv_set_configure_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_adv_set_configure",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_adv_handle",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adv_data",
        "type": "ble_gap_adv_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_adv_params",
        "type": "ble_gap_adv_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_qos_channel_survey_start_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_qos_channel_survey_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "interval_us",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_qos_channel_survey_stop_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gap_qos_channel_survey_stop",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_primary_services_discover_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_primary_services_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "start_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_srvc_uuid",
        "type": "ble_uuid_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_relationships_discover_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_relationships_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_characteristics_discover_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_characteristics_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_descriptors_discover_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_descriptors_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_char_value_by_uuid_read_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_char_value_by_uuid_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_read_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_char_values_read_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_char_values_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handles",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle_count",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_write_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_write",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_write_params",
        "type": "ble_gattc_write_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_hv_confirm_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_hv_confirm",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_attr_info_discover_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_attr_info_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_exchange_mtu_request_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gattc_exchange_mtu_request",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "client_rx_mtu",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_sys_attr_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_sys_attr_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sys_attr_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "flags",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_hvx_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_hvx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hvx_params",
        "type": "ble_gatts_hvx_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_service_add_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_service_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_service_changed_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_service_changed",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "start_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "end_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_include_add_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_include_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "service_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "inc_serv_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_include_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_characteristic_add_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_characteristic_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "service_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_char_md",
        "type": "ble_gatts_char_md_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_attr_char_value",
        "type": "ble_gatts_attr_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_handles",
        "type": "ble_gatts_char_handles_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_descriptor_add_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_descriptor_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "char_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_attr",
        "type": "ble_gatts_attr_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_rw_authorize_reply_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_value_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_value_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_value",
        "type": "ble_gatts_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_value_set_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_value_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_value",
        "type": "ble_gatts_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_sys_attr_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_sys_attr_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sys_attr_data",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "flags",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_attr_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_attr_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_md",
        "type": "ble_gatts_attr_md_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_initial_user_handle_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_initial_user_handle_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_exchange_mtu_reply_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_sd_ble_gatts_exchange_mtu_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "server_rx_mtu",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "l2cap_cid_register_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_l2cap_cid_register",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2cap_cid_unregister_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_l2cap_cid_unregister",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2cap_tx_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_l2cap_tx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_header",
        "type": "ble_l2cap_header_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2cap_ch_setup_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_l2cap_ch_setup",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_local_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_params",
        "type": "ble_l2cap_ch_setup_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2cap_ch_release_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_l2cap_ch_release",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "local_cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2cap_ch_rx_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_l2cap_ch_rx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "local_cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sdu_buf",
        "type": "ble_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2cap_ch_tx_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_l2cap_ch_tx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "local_cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sdu_buf",
        "type": "ble_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2cap_ch_flow_control_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_sd_ble_l2cap_ch_flow_control",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "local_cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "credits",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_credits",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_power_system_off",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "mw_temp_get_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_temp_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_temp",
        "type": "int32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mw_ecb_block_encrypt_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ecb_block_encrypt",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ecb_data",
        "type": "nrf_ecb_hal_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pan73_workaround",
    "return_type": "static void",
    "params": [
      {
        "name": "p_timer",
        "type": "NRF_TIMER_Type *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_busy_check",
    "return_type": "bool",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_irq_enable",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_irq_disable",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_channel_ppi_disable",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_ppi_disable",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_ready_tick",
    "return_type": "void",
    "params": [
      {
        "name": "event_type",
        "type": "nrf_timer_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_dealloc",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_transition_n_to_0or100",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_transition_n_to_m",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_transition_0or100_to_n",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_transition_0or100_to_0or100",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_transition",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_channel_duty_ticks_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_channel_duty_ticks_get",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_cycle_ticks_get",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_channel_duty_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "duty",
        "type": "app_pwm_duty_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_channel_duty_get",
    "return_type": "app_pwm_duty_t",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_channel_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pin",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "polarity",
        "type": "app_pwm_polarity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_calculate_timer_frequency",
    "return_type": "__STATIC_INLINE nrf_timer_frequency_t",
    "params": [
      {
        "name": "period_us",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "app_pwm_config_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ready_callback",
        "type": "app_pwm_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_enable",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_disable",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_pwm_uninit",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "app_pwm_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "next_index",
    "return_type": "static __INLINE uint8_t",
    "params": [
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_queue_full",
    "return_type": "static __INLINE uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_queue_empty",
    "return_type": "static __INLINE uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "queue_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event_buffer",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_queue_space_get",
    "return_type": "uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queue_utilization_check",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_queue_utilization_get",
    "return_type": "uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_event_put",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_data_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handler",
        "type": "app_sched_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_pause",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_resume",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_app_sched_paused",
    "return_type": "static __INLINE bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_execute",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "check_queue_utilization",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sched_event_get",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "pp_event_data",
        "type": "void * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_event_data_size",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_event_handler",
        "type": "app_sched_event_handler_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdc_spi_transfer",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_txb",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_rxb",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "rx_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdc_spi_hispeed",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdc_calculate_size",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_csd",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdc_cmd",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "cmd",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "rsp_type",
        "type": "sdc_response_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "nrf_drv_spi_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sdc_block_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "block_address",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "block_count",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sdc_block_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "block_address",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "block_count",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sdc_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_config",
        "type": "app_sdc_config_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_handler",
        "type": "sdc_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sdc_uninit",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_sdc_busy_check",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_simple_timer_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event_type",
        "type": "nrf_timer_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_simple_timer_init",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_simple_timer_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "mode",
        "type": "app_simple_timer_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "timeout_handler",
        "type": "app_simple_timer_timeout_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "timeout_ticks",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_simple_timer_stop",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_simple_timer_uninit",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rtc1_init",
    "return_type": "static void",
    "params": [
      {
        "name": "prescaler",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rtc1_start",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rtc1_stop",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rtc1_counter_get",
    "return_type": "static __INLINE uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ticks_diff_get",
    "return_type": "static __INLINE uint32_t",
    "params": [
      {
        "name": "ticks_now",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks_old",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rtc1_compare0_set",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_list_insert",
    "return_type": "static void",
    "params": [
      {
        "name": "p_timer",
        "type": "timer_node_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_list_remove",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_timer",
        "type": "timer_node_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_timeouts_check_sched",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_list_handler_sched",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timeout_handler_scheduled_exec",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "timeout_handler_exec",
    "return_type": "static void",
    "params": [
      {
        "name": "p_timer",
        "type": "timer_node_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "timer_timeouts_check",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "elapsed_ticks_acquire",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ticks_elapsed",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "expired_timers_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "ticks_elapsed",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks_previous",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_restart_list_head",
        "type": "timer_node_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "list_insertions_handler",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_restart_list_head",
        "type": "timer_node_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "compare_reg_update",
    "return_type": "static void",
    "params": [
      {
        "name": "p_timer_id_head_old",
        "type": "timer_node_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_list_handler",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "user_op_enque",
    "return_type": "static void",
    "params": [
      {
        "name": "last_index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_start_op_schedule",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_node",
        "type": "timer_node_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "timeout_initial",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "timeout_periodic",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_stop_op_schedule",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_node",
        "type": "timer_node_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "op_type",
        "type": "timer_user_op_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTC1_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SWI_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_start",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "timer_id",
        "type": "app_timer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "timeout_ticks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_stop_all",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_cnt_get",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_cnt_diff_compute",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "ticks_to",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks_from",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_op_queue_utilization_get",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_pause",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_resume",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "compare_func",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_item0",
        "type": "nrf_sortlist_item_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_item1",
        "type": "nrf_sortlist_item_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_now",
    "return_type": "static uint64_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "scheduled_timeout_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_expire",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_timer",
        "type": "app_timer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rtc_schedule",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_timer",
        "type": "app_timer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rerun",
        "type": "bool *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sorted_list_stop_all",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_overflow_evt",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_compare_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_compare1_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rtc_update",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_req_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rtc_irq",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_request_proc_trigger",
    "return_type": "static inline void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_req_schedule",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "type",
        "type": "app_timer_req_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_timer",
        "type": "app_timer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "xTimer",
        "type": "TimerHandle_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "svcTimerStop",
    "return_type": "extern osStatus",
    "params": [
      {
        "name": "timer_id",
        "type": "osTimerId",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "svcTimerStart",
    "return_type": "extern osStatus",
    "params": [
      {
        "name": "timer_id",
        "type": "osTimerId",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "millisec",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "os_tick_val",
    "return_type": "extern uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uart_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "nrf_drv_uart_event_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_uart_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_comm_params",
        "type": "const app_uart_comm_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buffers",
        "type": "app_uart_buffers_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_handler",
        "type": "app_uart_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "irq_priority",
        "type": "app_irq_priority_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_uart_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_byte",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_uart_put",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_uart_flush",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_uart_close",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "class_event_handler",
    "return_type": "static inline ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t  const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "class_sof_interrupt_handler",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t  const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "user_event_handler",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_event",
        "type": "app_usbd_internal_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "queued",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "user_event_state_proc",
    "return_type": "static inline void",
    "params": [
      {
        "name": "event",
        "type": "app_usbd_event_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_descriptor_find",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desc_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "desc_index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_desc",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_desc_len",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_usbd_ep_instance_set",
    "return_type": "static void",
    "params": [
      {
        "name": "ep",
        "type": "nrf_drv_usbd_ep_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_core_handler_call",
    "return_type": "static inline ret_code_t",
    "params": [
      {
        "name": "p_event",
        "type": "app_usbd_internal_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_event_add",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_event_input",
        "type": "app_usbd_internal_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_power_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "nrf_drv_power_usb_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "nrf_drv_usbd_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hfclk_ready",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "nrf_drv_clock_evt_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_sustate_with_requested_hfclk",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "sustate",
        "type": "app_usbd_sustate_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_sustate_with_running_hfclk",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "sustate",
        "type": "app_usbd_sustate_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sustate_get",
    "return_type": "static inline app_usbd_sustate_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sustate_set",
    "return_type": "static inline void",
    "params": [
      {
        "name": "sustate",
        "type": "app_usbd_sustate_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "default_iface_select",
    "return_type": "static inline ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "alternate",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "default_iface_deselect",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_sof_timestamp_get",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_config",
        "type": "app_usbd_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_uninit",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_power_events_enable",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_enable",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_disable",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_start",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_stop",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_suspend_req",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_wakeup_req",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_active_check",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_event_execute",
    "return_type": "void",
    "params": [
      {
        "name": "p_event",
        "type": "app_usbd_internal_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "app_usbd_event_queue_process",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_append",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_remove",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_remove_all",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_ep_handler_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ep",
        "type": "nrf_drv_usbd_ep_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "handler",
        "type": "app_usbd_ep_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_sof_register",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_sof_unregister",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_sof_interrupt_register",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "handler",
        "type": "app_usbd_sof_interrupt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_sof_interrupt_unregister",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_rwu_register",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_rwu_unregister",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_rwu_enabled_check",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_interface_ep_reset",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cinst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_ep_enable",
    "return_type": "void",
    "params": [
      {
        "name": "ep",
        "type": "nrf_drv_usbd_ep_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_ep_disable",
    "return_type": "void",
    "params": [
      {
        "name": "ep",
        "type": "nrf_drv_usbd_ep_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_iface_call",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_class_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_ep_call",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "ep",
        "type": "nrf_drv_usbd_ep_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_all_call",
    "return_type": "void",
    "params": [
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_all_until_served_call",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_ep_transfer",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "ep",
        "type": "nrf_drv_usbd_ep_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_transfer",
        "type": "nrf_drv_usbd_transfer_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_usbd_ep_transfer",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "ep",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_transfer",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_ep_handled_transfer",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "ep",
        "type": "nrf_drv_usbd_ep_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_handler",
        "type": "nrf_drv_usbd_handler_desc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_usbd_ep_handled_transfer",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "ep",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_handler",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_iface_select",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "alternate",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_iface_deselect",
    "return_type": "void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_iface_selection_get",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_all_iface_select_0",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_all_iface_deselect",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "iface_select",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "alternate",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "iface_deselect",
    "return_type": "static void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "iface_selection_get",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_req_std_in",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_req_class_in",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "audio_req_out_data_cb",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "status",
        "type": "nrf_drv_usbd_ep_status_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "audio_req_out",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_req_class_out",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "endpoint_in_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "endpoint_out_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ep_iso_addr_get",
    "return_type": "static inline nrf_drv_usbd_ep_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_ep_address_get",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "ep_cfg",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "audio_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "audio_get_format_descriptor_size",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "audio_get_format_descriptor_data",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cur_byte",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "audio_get_input_descriptor_size",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "audio_get_input_descriptor_data",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cur_byte",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "audio_get_output_descriptor_size",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "audio_get_output_descriptor_data",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cur_byte",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "audio_get_feature_descriptor_size",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "audio_get_feature_descriptor_data",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cur_byte",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "audio_get_control_interface_number",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_class_iface_number_get",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "ifce",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "audio_feed_descriptors",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ctx",
        "type": "app_usbd_class_descriptor_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_usbd_audio_class_rx_size_get",
    "return_type": "size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_audio_class_rx_start",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_audio_class_tx_start",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "const void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_audio_sof_interrupt_register",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "handler",
        "type": "app_usbd_sof_interrupt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "comm_ep_in_addr_get",
    "return_type": "static inline nrf_drv_usbd_ep_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "data_ep_in_addr_get",
    "return_type": "static inline nrf_drv_usbd_ep_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "data_ep_out_addr_get",
    "return_type": "static inline nrf_drv_usbd_ep_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_req_std_out",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_req_out_data_cb",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "status",
        "type": "nrf_drv_usbd_ep_status_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_req_out_datastage",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_reset_port",
    "return_type": "static void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_consumer",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_next",
        "type": "nrf_drv_usbd_ep_transfer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ep_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_single_shoot_consumer",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_next",
        "type": "nrf_drv_usbd_ep_transfer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ep_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_rx_block_finished",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_endpoint_ev",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_feed_descriptors",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ctx",
        "type": "app_usbd_class_descriptor_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "app_usbd_cdc_acm_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cdc_acm",
        "type": "app_usbd_cdc_acm_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "const void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_cdc_acm_rx_size",
    "return_type": "size_t",
    "params": [
      {
        "name": "p_cdc_acm",
        "type": "app_usbd_cdc_acm_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_cdc_acm_bytes_stored",
    "return_type": "size_t",
    "params": [
      {
        "name": "p_cdc_acm",
        "type": "app_usbd_cdc_acm_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_cdc_acm_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cdc_acm",
        "type": "app_usbd_cdc_acm_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_cdc_acm_read_any",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cdc_acm",
        "type": "app_usbd_cdc_acm_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_serial_state_notify",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_cdc_acm",
        "type": "app_usbd_cdc_acm_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_cdc_acm_serial_state_notify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cdc_acm",
        "type": "app_usbd_cdc_acm_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "serial_state",
        "type": "app_usbd_cdc_acm_serial_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_cdc_acm_line_state_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cdc_acm",
        "type": "app_usbd_cdc_acm_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "line_state",
        "type": "app_usbd_cdc_acm_line_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_core_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_core_state_set",
    "return_type": "static void",
    "params": [
      {
        "name": "state",
        "type": "app_usbd_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_core_state_get",
    "return_type": "static inline app_usbd_state_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_core_power_is_detected",
    "return_type": "static inline bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_core_ep0_handler_clear",
    "return_type": "static inline void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_core_ep0_handler_call_and_clear",
    "return_type": "static inline ret_code_t",
    "params": [
      {
        "name": "status",
        "type": "nrf_drv_usbd_ep_status_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usb_core_ep0_handler_check",
    "return_type": "static inline bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_data_handler_empty",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "status",
        "type": "nrf_drv_usbd_ep_status_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_contex",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_descriptor_conf_feeder",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_next",
        "type": "nrf_drv_usbd_ep_transfer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ep_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "setup_endpoint_req_std",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_interface_req_std_handle",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_class_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "iface_idx",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_device_req_get_status",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t  const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_device_req_get_descriptor",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "setup_device_req_get_configuration",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t  const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_device_req_set_configuration",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setup_device_req_std_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_core_setup_req_handler",
    "return_type": "static inline ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_core_ep0_enable",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_core_ep0_disable",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_core_state_get",
    "return_type": "app_usbd_state_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_core_feature_state_get",
    "return_type": "bool",
    "params": [
      {
        "name": "feature",
        "type": "app_usbd_setup_stdfeature_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dummy_class_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dummy_class_feed_descriptors",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ctx",
        "type": "app_usbd_class_descriptor_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_sof_required",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "p_hid_ctx",
        "type": "app_usbd_hid_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "framecnt",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_clear_idle_ctx",
    "return_type": "static void",
    "params": [
      {
        "name": "p_hid_ctx",
        "type": "app_usbd_hid_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_event_handler",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_hinst",
        "type": "app_usbd_hid_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_hid_ctx",
        "type": "app_usbd_hid_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_rep_buff_in_get",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_hinst",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_transfer_next",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "p_generic",
        "type": "app_usbd_hid_generic_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_transfer_set",
    "return_type": "static inline ret_code_t",
    "params": [
      {
        "name": "p_generic",
        "type": "app_usbd_hid_generic_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_clear_buffer",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_generic_in_report_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_generic",
        "type": "app_usbd_hid_generic_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "const void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_generic_idle_report_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_generic",
        "type": "app_usbd_hid_generic_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "const void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_on_get_report",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_on_set_report_data_cb",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "status",
        "type": "nrf_drv_usbd_ep_status_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_on_set_report_feature_data_cb",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "status",
        "type": "nrf_drv_usbd_ep_status_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_on_set_report",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_ep_transfer_in",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_ep_transfer_out",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_get_class_descriptors_count",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_generic_get_class_descriptors_type",
    "return_type": "static app_usbd_descriptor_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desc_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_generic_get_class_descriptors_length",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desc_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_generic_feed_descriptors",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ctx",
        "type": "app_usbd_class_descriptor_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_generic_on_set_protocol",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_generic",
        "type": "app_usbd_hid_generic_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ev",
        "type": "app_usbd_hid_user_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_idle_handler_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "handler",
        "type": "app_usbd_hid_idle_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_generic_on_idle",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "report_id",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_transfer_next",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "p_kbd",
        "type": "app_usbd_hid_kbd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_transfer_set",
    "return_type": "static inline ret_code_t",
    "params": [
      {
        "name": "p_kbd",
        "type": "app_usbd_hid_kbd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_kbd_modifier_state_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_kbd",
        "type": "app_usbd_hid_kbd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "modifier",
        "type": "app_usbd_hid_kbd_modifier_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "state",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_kbd_key_control",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_kbd",
        "type": "app_usbd_hid_kbd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "key",
        "type": "app_usbd_hid_kbd_codes_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "press",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_kbd_led_state_get",
    "return_type": "bool",
    "params": [
      {
        "name": "p_kbd",
        "type": "app_usbd_hid_kbd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "led",
        "type": "app_usbd_hid_kbd_led_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_on_get_report",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_on_set_report_data_cb",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "status",
        "type": "nrf_drv_usbd_ep_status_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_on_set_report",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_ep_transfer_in",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_clear_buffer",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_get_class_descriptors_count",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_kbd_get_class_descriptors_type",
    "return_type": "static app_usbd_descriptor_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desc_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_kbd_get_class_descriptors_length",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desc_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_kbd_feed_descriptors",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ctx",
        "type": "app_usbd_class_descriptor_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_kbd_on_set_protocol",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_kbd",
        "type": "app_usbd_hid_kbd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ev",
        "type": "app_usbd_hid_user_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_kbd_on_idle",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "report_id",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_axis_acc_get",
    "return_type": "static inline int8_t",
    "params": [
      {
        "name": "acc",
        "type": "int16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_transfer_next",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "p_mouse",
        "type": "app_usbd_hid_mouse_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_transfer_set",
    "return_type": "static inline ret_code_t",
    "params": [
      {
        "name": "p_mouse",
        "type": "app_usbd_hid_mouse_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_acc_overflow_check",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "acc",
        "type": "int16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_mouse_x_move",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_mouse",
        "type": "app_usbd_hid_mouse_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "int8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_mouse_y_move",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_mouse",
        "type": "app_usbd_hid_mouse_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "int8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_mouse_scroll_move",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_mouse",
        "type": "app_usbd_hid_mouse_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "int8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_hid_mouse_button_state",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_mouse",
        "type": "app_usbd_hid_mouse_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "button_id",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "state",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_on_get_report",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_on_set_report",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_setup_ev",
        "type": "app_usbd_setup_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_ep_transfer_in",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_clear_buffer",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_get_class_descriptors_count",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_mouse_get_class_descriptors_type",
    "return_type": "static app_usbd_descriptor_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desc_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_mouse_get_class_descriptors_length",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desc_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_mouse_feed_descriptors",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ctx",
        "type": "app_usbd_class_descriptor_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_mouse_on_set_protocol",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_mouse",
        "type": "app_usbd_hid_mouse_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ev",
        "type": "app_usbd_hid_user_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_mouse_on_idle",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "report_id",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_blockdev_ev_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "nrf_block_dev_event_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ep_in_addr_get",
    "return_type": "static inline nrf_drv_usbd_ep_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ep_out_addr_get",
    "return_type": "static inline nrf_drv_usbd_ep_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_buff_clear",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_buff_data_check",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_buff_space_check",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_buff_put",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_buff_free",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cbw_wait_start",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "csw_wait_start",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "transfer_in_start",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "state",
        "type": "app_usbd_msc_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bulk_ep_reset",
    "return_type": "static void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "transfer_out_start",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "state",
        "type": "app_usbd_msc_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "status_generic_error_stall",
    "return_type": "static void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "state",
        "type": "app_usbd_msc_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "status_unsupported_start",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "status_cbwinvalid_start",
    "return_type": "static void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "status_deverror_start",
    "return_type": "static void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "current_blkcnt_calc",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "current_size_calc",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "read_transfer_processor",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "read_blockmem_processor",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_transfer_processor",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_blockmem_processor",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_testunitready",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_requestsense",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_formatunit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_read_start",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_read6",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_write_start",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_write6",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_inquiry",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_modeselect6",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_modesense6",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_startstopunit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_senddiagnostic",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_preventremoval",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_readcapacity10",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_read10",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_write10",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_modeselect10",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_modesense10",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_last_out_size",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "state_cbw",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "state_data_in_out_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_msc_ctx",
        "type": "app_usbd_msc_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "state_data_in_handle",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "state_data_out_handle",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_feed_descriptors",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ctx",
        "type": "app_usbd_class_descriptor_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "msc_blockdev_done_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "nrf_block_dev_event_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_blockdev_read_done_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "nrf_block_dev_event_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msc_blockdev_write_done_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "nrf_block_dev_event_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_msc_sync",
    "return_type": "bool",
    "params": [
      {
        "name": "p_msc",
        "type": "app_usbd_msc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_trigger_event_handler",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "app_usbd_complex_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_trigger_feed_descriptors",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ctx",
        "type": "app_usbd_class_descriptor_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "string_create",
    "return_type": "static void",
    "params": [
      {
        "name": "p_serial_number_string",
        "type": "char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_serial_num_generate",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_usbd_prepare_string",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "APP_USBD_STRING_ID_LANGIDS_ARRAY_POS",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "0",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_util_disable_irq",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_util_enable_irq",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_util_critical_region_enter",
    "return_type": "void",
    "params": [
      {
        "name": "p_nested",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_util_critical_region_exit",
    "return_type": "void",
    "params": [
      {
        "name": "nested",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "privilege_level_get",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "current_int_priority_get",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "blacklisted_peers_state_update",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "ticks_passed",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "blacklisted_peers_state_transition_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ast_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ast_auth_error_notify",
    "return_type": "void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ast_peer_blacklisted",
    "return_type": "bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bh1745_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "bh1745_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "BH1745_SENSOR_WRITE",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_instance",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "msg2",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bh1745_sw_reset",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "bh1745_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bh1745_int_reset",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "bh1745_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bh1745_meas_cfg",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "bh1745_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "meas_time",
        "type": "bh1745_meas_time_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "gain",
        "type": "bh1745_gain_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bh1745_data_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "bh1745_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "user_callback",
        "type": "bh1745_data_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "bh1745_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bh1745_int_cfg",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "bh1745_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "latch",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "source",
        "type": "bh1745_int_source_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "persistance",
        "type": "bh1745_persistence_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bh1745_high_thr_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "bh1745_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "threshold",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bh1745_low_thr_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "bh1745_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "threshold",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_device_addr_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "name_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_advdata",
        "type": "const ble_advdata_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "appearance_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flags_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "flags",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_power_level_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "tx_power_level",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uuid_list_sized_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_uuid_list",
        "type": "const ble_advdata_uuid_list_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "adv_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "uuid_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "uuid_list_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_uuid_list",
        "type": "const ble_advdata_uuid_list_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "adv_type_16",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "adv_type_128",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_int_check",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_conn_int",
        "type": "const ble_advdata_conn_int_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_int_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_conn_int",
        "type": "const ble_advdata_conn_int_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "manuf_specific_data_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_manuf_sp_data",
        "type": "const ble_advdata_manuf_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "service_data_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_advdata",
        "type": "const ble_advdata_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advdata_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_advdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t             * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t            * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advdata_search",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ad_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advdata_name_find",
    "return_type": "bool",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_target_name",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advdata_short_name_find",
    "return_type": "bool",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_target_name",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "short_name_min_len",
        "type": "uint8_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advdata_uuid_find",
    "return_type": "bool",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_target_uuid",
        "type": "ble_uuid_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advdata_appearance_find",
    "return_type": "bool",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_target_appearance",
        "type": "uint16_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "whitelist_has_entries",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "addr_is_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_addr",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adv_mode_next_get",
    "return_type": "static ble_adv_mode_t",
    "params": [
      {
        "name": "adv_mode",
        "type": "ble_adv_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_connected",
    "return_type": "static void",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_disconnected",
    "return_type": "static void",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_terminated",
    "return_type": "static void",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adv_mode_next_avail_get",
    "return_type": "static ble_adv_mode_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "adv_mode",
        "type": "ble_adv_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "set_adv_mode_directed_high_duty",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_params",
        "type": "ble_gap_adv_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "set_adv_mode_directed",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_params",
        "type": "ble_gap_adv_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "use_whitelist",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "flags_set",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "flags",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_adv_mode_fast",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_params",
        "type": "ble_gap_adv_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "set_adv_mode_slow",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_params",
        "type": "ble_gap_adv_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "config_is_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_config",
        "type": "ble_adv_modes_config_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adv_set_data_size_max_get",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advertising_conn_cfg_tag_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ble_cfg_tag",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advertising_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t            * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_init",
        "type": "ble_advertising_init_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "phy_is_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_phy",
        "type": "uint32_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_advertising_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "advertising_mode",
        "type": "ble_adv_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advertising_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advertising_peer_addr_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_peer_address",
        "type": "ble_gap_addr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advertising_whitelist_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gap_addrs",
        "type": "ble_gap_addr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr_cnt",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_gap_irks",
        "type": "ble_gap_irk_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "irk_cnt",
        "type": "uint32_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advertising_restart_without_whitelist",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advertising_modes_config_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t            * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_modes_config",
        "type": "ble_adv_modes_config_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_advertising_advdata_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_advdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_srdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatt_error_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "nrf_error",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ctx",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "char_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_dest_char",
        "type": "ble_gattc_char_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_source_char",
        "type": "ble_gattc_char_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "char_cccd_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cccd",
        "type": "ble_gattc_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cccd_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "is_valid_ans_srv_discovered",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_srv",
        "type": "ble_ans_c_service_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ans_c_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_db_discovery_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "event_notify",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "event_read_rsp",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "event_disconnect",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ans_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ans_init",
        "type": "ble_ans_c_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cccd_configure",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "handle_cccd",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "notification_enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ans_c_enable_notif_new_alert",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_disable_notif_new_alert",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_enable_notif_unread_alert",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_disable_notif_unread_alert",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_control_point_write",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_control_point",
        "type": "ble_ans_control_point_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_new_alert_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_unread_alert_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_new_alert_notify",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "category_id",
        "type": "ble_ans_category_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_unread_alert_notify",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "category_id",
        "type": "ble_ans_category_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ans_c_handles_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ans",
        "type": "ble_ans_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "ble_ans_c_service_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_enable_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_enable_params",
        "type": "ble_enable_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_enable_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_opt_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "opt_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt",
        "type": "ble_opt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_opt_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt_id",
        "type": "uint32_t      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt",
        "type": "ble_opt_t     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_opt_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "opt_id",
        "type": "uint32_t const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt",
        "type": "ble_opt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_opt_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_tx_packet_count_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_count",
        "type": "uint8_t const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_tx_packet_count_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_count",
        "type": "uint8_t * * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_user_mem_reply_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_block",
        "type": "ble_user_mem_block_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_user_mem_reply_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_uuid_decode_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "uuid_le_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_decode_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid",
        "type": "ble_uuid_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_encode_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_uuid",
        "type": "ble_uuid_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le_len",
        "type": "uint8_t const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_encode_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le_len",
        "type": "uint8_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_vs_add_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_vs_uuid",
        "type": "ble_uuid128_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_type",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_vs_add_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid_type",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_version_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_version",
        "type": "ble_version_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_version_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_version",
        "type": "ble_version_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cfg_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "cfg_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cfg",
        "type": "ble_cfg_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cfg_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_bas",
        "type": "ble_bas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bas_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "battery_level_char_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_bas",
        "type": "ble_bas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_bas_init",
        "type": "const ble_bas_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_bas_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_bas",
        "type": "ble_bas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_bas_init",
        "type": "const ble_bas_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "battery_notification_send",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_hvx_params",
        "type": "ble_gatts_hvx_params_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_bas_battery_level_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_bas",
        "type": "ble_bas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "battery_level",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bas_battery_lvl_on_reconnection_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_bas",
        "type": "ble_bas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_read_rsp",
    "return_type": "static void",
    "params": [
      {
        "name": "p_bas_c",
        "type": "ble_bas_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_hvx",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ble_bas_c",
        "type": "ble_bas_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bas_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_bas_c",
        "type": "ble_bas_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "const ble_db_discovery_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bas_c_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_bas_c",
        "type": "ble_bas_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_bas_c_init",
        "type": "ble_bas_c_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bas_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bas_c_bl_notif_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_bas_c",
        "type": "ble_bas_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bas_c_bl_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_bas_c",
        "type": "ble_bas_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bas_c_handles_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_bas_c",
        "type": "ble_bas_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "ble_bas_c_db_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_connect",
    "return_type": "static void",
    "params": [
      {
        "name": "p_bps",
        "type": "ble_bps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_disconnect",
    "return_type": "static void",
    "params": [
      {
        "name": "p_bps",
        "type": "ble_bps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_cccd_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_bps",
        "type": "ble_bps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_hvc",
    "return_type": "static void",
    "params": [
      {
        "name": "p_bps",
        "type": "ble_bps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bps_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bps_measurement_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_bps",
        "type": "ble_bps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_bps_meas",
        "type": "ble_bps_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bps_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_bps",
        "type": "ble_bps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_bps_init",
        "type": "ble_bps_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bps_measurement_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_bps",
        "type": "ble_bps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_bps_meas",
        "type": "ble_bps_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_bps_is_indication_enabled",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_bps",
        "type": "ble_bps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_indication_enabled",
        "type": "bool *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_enable_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_ble_enable_params",
        "type": "ble_enable_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_enable_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_opt_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt_id",
        "type": "uint32_t *  const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_opt",
        "type": "ble_opt_t **const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_opt_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "opt_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt",
        "type": "ble_opt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_opt_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt_id",
        "type": "uint32_t *  const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_opt",
        "type": "ble_opt_t **const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_opt_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_tx_packet_count_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_count",
        "type": "uint8_t * * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_tx_packet_count_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_count",
        "type": "uint8_t const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_user_mem_reply_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_mem_block",
        "type": "ble_user_mem_block_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_user_mem_reply_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_uuid_decode_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le_len",
        "type": "uint8_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid_le",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid",
        "type": "ble_uuid_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_decode_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_encode_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid",
        "type": "ble_uuid_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid_le_len",
        "type": "uint8_t * * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid_le",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_encode_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "uuid_le_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid_le",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_vs_add_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid",
        "type": "ble_uuid128_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid_type",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_vs_add_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_uuid_type",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_version_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_version",
        "type": "ble_version_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_version_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_version",
        "type": "ble_version_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_opt_id_pre_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_opt_id",
        "type": "uint32_t *  const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cfg_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cfg_id",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_cfg",
        "type": "ble_cfg_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cfg_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "instance_claim",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_instance",
        "type": "ble_conn_params_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "instance_free",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_instance",
        "type": "ble_conn_params_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_conn_params_ok",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_preferred_conn_params",
        "type": "ble_gap_conn_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_actual_conn_params",
        "type": "ble_gap_conn_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_slave_latency_err",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_sup_timeout_err",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "send_error_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "err_code",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "send_update_request",
    "return_type": "static bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_new_conn_params",
        "type": "ble_gap_conn_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_timeout_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_params_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_init",
        "type": "const ble_conn_params_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_params_stop",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_params_negotiation",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_instance",
        "type": "ble_conn_params_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_conn_params_update",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_params_change_conn_params",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_new_params",
        "type": "ble_gap_conn_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bcs_internal_state_reset",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_handle_list_get",
    "return_type": "ble_conn_state_conn_handle_list_t",
    "params": [
      {
        "name": "flags",
        "type": "nrf_atflags_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "active_flag_count",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "flags",
        "type": "nrf_atflags_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_activate",
    "return_type": "static bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_invalidate",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_set_disconnected",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "record_purge_disconnected",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "user_flag_is_acquired",
    "return_type": "static bool",
    "params": [
      {
        "name": "flag_id",
        "type": "ble_conn_state_user_flag_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flag_toggle",
    "return_type": "static void",
    "params": [
      {
        "name": "p_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_valid",
    "return_type": "bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_role",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_status",
    "return_type": "ble_conn_state_status_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_encrypted",
    "return_type": "bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_mitm_protected",
    "return_type": "bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_lesc",
    "return_type": "bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_conn_count",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_central_conn_count",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_peripheral_conn_count",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_conn_handles",
    "return_type": "ble_conn_state_conn_handle_list_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_central_handles",
    "return_type": "ble_conn_state_conn_handle_list_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_periph_handles",
    "return_type": "ble_conn_state_conn_handle_list_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_conn_idx",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_user_flag_acquire",
    "return_type": "ble_conn_state_user_flag_id_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_user_flag_get",
    "return_type": "bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "flag_id",
        "type": "ble_conn_state_user_flag_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_user_flag_set",
    "return_type": "void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "flag_id",
        "type": "ble_conn_state_user_flag_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "for_each_set_flag",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "flags",
        "type": "nrf_atflags_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "user_function",
        "type": "ble_conn_state_user_function_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_state_for_each_connected",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "user_function",
        "type": "ble_conn_state_user_function_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_conn_state_for_each_set_user_flag",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "flag_id",
        "type": "ble_conn_state_user_flag_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "user_function",
        "type": "ble_conn_state_user_function_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_meas_cccd_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cscs",
        "type": "ble_cscs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_cscs_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "csc_measurement_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_cscs",
        "type": "ble_cscs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_csc_measurement",
        "type": "ble_cscs_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cscs_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_cscs",
        "type": "ble_cscs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cscs_init",
        "type": "ble_cscs_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cscs_measurement_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_cscs",
        "type": "ble_cscs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_measurement",
        "type": "ble_cscs_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cts_c_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_cts",
        "type": "ble_cts_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_db_discovery_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cts_c_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_cts",
        "type": "ble_cts_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cts_init",
        "type": "ble_cts_c_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "current_time_decode",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_time",
        "type": "current_time_char_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "current_time_validate",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_time",
        "type": "current_time_char_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "current_time_read",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cts",
        "type": "ble_cts_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cts_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cts_c_current_time_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_cts",
        "type": "ble_cts_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_cts_c_handles_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_cts",
        "type": "ble_cts_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "const uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "const ble_cts_c_handles_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "registered_handler_get",
    "return_type": "static ble_db_discovery_evt_handler_t",
    "params": [
      {
        "name": "p_srv_uuid",
        "type": "ble_uuid_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "registered_handler_set",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_srv_uuid",
        "type": "ble_uuid_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_evt_handler",
        "type": "ble_db_discovery_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pending_user_evts_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "discovery_available_evt_trigger",
    "return_type": "static void",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t             const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "discovery_error_evt_trigger",
    "return_type": "static void",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "err_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "discovery_error_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "nrf_error",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ctx",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "discovery_complete_evt_trigger",
    "return_type": "static void",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "is_srv_found",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_srv_disc_completion",
    "return_type": "static void",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_char_discovery_reqd",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_after_char",
        "type": "ble_gattc_char_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "is_desc_discovery_reqd",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_curr_char",
        "type": "ble_gatt_db_char_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_next_char",
        "type": "ble_gatt_db_char_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "characteristics_discover",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "descriptors_discover",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raise_discov_complete",
        "type": "bool *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_primary_srv_discovery_rsp",
    "return_type": "static void",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_gattc_evt",
        "type": "ble_gattc_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_characteristic_discovery_rsp",
    "return_type": "static void",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_gattc_evt",
        "type": "ble_gattc_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_descriptor_discovery_rsp",
    "return_type": "static void",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_gattc_evt",
        "type": "const ble_gattc_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_db_discovery_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_db_init",
        "type": "ble_db_discovery_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_db_discovery_close",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "discovery_start",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_db_discovery_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_db_discovery",
        "type": "ble_db_discovery_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_db_discovery_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "dummy_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "evt",
        "type": "ble_dfu_buttonless_evt_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_ctrlpt_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_rw_authorize_req",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_buttonless_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_buttonless_resp_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "op_code",
        "type": "ble_dfu_buttonless_op_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "rsp_code",
        "type": "ble_dfu_buttonless_rsp_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_buttonless_bootloader_start_finalize",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_buttonless_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_dfu_init",
        "type": "const ble_dfu_buttonless_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_svci_vector_table_set",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_svci_vector_table_unset",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt",
        "type": "pm_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "retrieve_peer_data",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "enter_bootloader",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_buttonless_backend_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_dfu",
        "type": "ble_dfu_buttonless_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_register",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pm_evt_handler",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_buttonless_async_svci_init",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_buttonless_char_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_dfu",
        "type": "ble_dfu_buttonless_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_dfu_buttonless_on_ctrl_pt_write",
    "return_type": "void",
    "params": [
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_buttonless_bootloader_start_prepare",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_adv_name",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_adv_name",
        "type": "nrf_dfu_adv_name_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sys_id_encode",
    "return_type": "static void",
    "params": [
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_sys_id",
        "type": "ble_dis_sys_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pnp_id_encode",
    "return_type": "static void",
    "params": [
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_pnp_id",
        "type": "ble_dis_pnp_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "uuid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_char_value",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "char_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rd_sec",
        "type": "security_req_t const",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_handles",
        "type": "ble_gatts_char_handles_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_dis_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_dis_init",
        "type": "ble_dis_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "system_id_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sys_id",
        "type": "ble_dis_sys_id_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "pnp_id_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_pnp_id",
        "type": "ble_dis_pnp_id_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "char_type_get",
    "return_type": "static ble_dis_c_char_type_t",
    "params": [
      {
        "name": "p_ble_dis_c",
        "type": "ble_dis_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "response_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_dis_c_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ble_dis_c",
        "type": "ble_dis_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_dis_c_init",
        "type": "ble_dis_c_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dis_c_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_dis_c",
        "type": "ble_dis_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_db_discovery_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dis_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dis_c_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ble_dis_c",
        "type": "ble_dis_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "char_type",
        "type": "ble_dis_c_char_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dis_c_handles_assign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ble_dis_c",
        "type": "ble_dis_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "ble_dis_c_handle_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "radio_gpio_pattern_clear",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antenna_radio_pin_config",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "switch_pattern_set",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "radio_cte_prepare",
    "return_type": "static void",
    "params": [
      {
        "name": "rx",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "check_pdu",
    "return_type": "static bool",
    "params": [
      {
        "name": "pdu",
        "type": "const pdu_type_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "radio_reset",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "radio_init",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_strict_mode",
    "return_type": "void",
    "params": [
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "anomaly_172_radio_operation",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "anomaly_172_rssi_check",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "radio_prepare",
    "return_type": "static void",
    "params": [
      {
        "name": "rx",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_test_done",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_init",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_vendor_specific_pkt",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "vendor_cmd",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "vendor_option",
        "type": "dtm_freq_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_packet_interval_calculate",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "test_payload_length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mode",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "phy_set",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "phy",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "modulation_set",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "modulation",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "feature_read",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "cmd",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "maximum_supported_value_read",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "parameter",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "transmit_power_set",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "parameter",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "constant_tone_setup",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "cte_info",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "constant_tone_slot_set",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "cte_slot",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "antenna_set",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "antenna",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_test_setup_cmd",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "control",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "parameter",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_test_end_cmd",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_test_transmit_cmd",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "freq",
        "type": "dtm_freq_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_test_receive_cmd",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_init",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_wait",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_cmd",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "cmd",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_event_get",
    "return_type": "bool",
    "params": [
      {
        "name": "p_dtm_event",
        "type": "dtm_event_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_set_txpower",
    "return_type": "bool",
    "params": [
      {
        "name": "new_tx_power",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_set_nrf21450_power_mode",
    "return_type": "bool",
    "params": [
      {
        "name": "power_mode",
        "type": "dtm_nrf21540_power_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "radio_end_event_process",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RADIO_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "DTM_TIMER_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ANOMALY_172_TIMER_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_init_rsp_dec",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dtm_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_uart_comm_params",
        "type": "app_uart_stream_comm_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_turn_off_test",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_constant_carrier",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_radio_validate",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "m_tx_power",
        "type": "int32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "m_radio_mode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dtm_init_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_uart_comm_params",
        "type": "app_uart_stream_comm_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dtm_init_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_event_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_event_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_user_mem_release_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_user_mem_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_tx_complete_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_data_length_changed_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_user_mem_release_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_tx_complete_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_user_mem_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_data_length_changed_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_gap_adv_data_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "dlen",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sr_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "srdlen",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_data_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_start_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_stop_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_appearance_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_appearance",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_appearance_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_appearance",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_appearance_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "appearance",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_appearance_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_auth_key_reply_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "key_type",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_key",
        "type": "uint8_t const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_auth_key_reply_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_authenticate_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_authenticate_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_param_update_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_params",
        "type": "ble_gap_conn_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_param_update_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_sec_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_sec",
        "type": "ble_gap_conn_sec_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_sec_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_conn_sec",
        "type": "ble_gap_conn_sec_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_connect_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_connect_cancel_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_connect_cancel_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_name_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_dev_name",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_len",
        "type": "uint16_t const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_name_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_dev_name",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dev_name_len",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_name_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_write_perm",
        "type": "ble_gap_conn_sec_mode_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dev_name",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_name_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_disconnect_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "hci_status_code",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_disconnect_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_encrypt_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_master_id",
        "type": "ble_gap_master_id_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_enc_info",
        "type": "ble_gap_enc_info_t const  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t                   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t                  * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_encrypt_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_keypress_notify_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "kp_not",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_keypress_notify_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_dhkey_reply_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_dhkey",
        "type": "ble_gap_lesc_dhkey_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_dhkey_reply_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_oob_data_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_pk_own",
        "type": "ble_gap_lesc_p256_pk_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_oobd_own",
        "type": "ble_gap_lesc_oob_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_oob_data_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_oobd_own",
        "type": "ble_gap_lesc_oob_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_oobd_peer",
        "type": "ble_gap_lesc_oob_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_oob_data_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_ppcp_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_conn_params",
        "type": "ble_gap_conn_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_ppcp_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_params",
        "type": "ble_gap_conn_params_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_ppcp_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_conn_params",
        "type": "ble_gap_conn_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_ppcp_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_rssi_start_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "threshold_dbm",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "skip_count",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_rssi_start_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_rssi_stop_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_rssi_stop_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_scan_start_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_scan_stop_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_scan_stop_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_info_reply_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_enc_info",
        "type": "ble_gap_enc_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_id_info",
        "type": "ble_gap_irk_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sign_info",
        "type": "ble_gap_sign_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_info_reply_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_params_reply_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sec_status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_sec_keyset",
        "type": "ble_gap_sec_keyset_t const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_params_reply_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_keyset",
        "type": "ble_gap_sec_keyset_t const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_tx_power_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_address",
        "type": "ble_gap_addr_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_address",
        "type": "ble_gap_addr_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_privacy_params",
        "type": "ble_gap_privacy_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_privacy_params",
        "type": "ble_gap_privacy_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_privacy_params",
        "type": "ble_gap_privacy_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_whitelist_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_wl_addrs",
        "type": "ble_gap_addr_t const * const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint8_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_whitelist_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_identities_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_id_keys",
        "type": "ble_gap_id_key_t const * const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pp_local_irks",
        "type": "ble_gap_irk_t const * const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "len",
        "type": "uint8_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_identities_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_data_length_update_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_dl_params",
        "type": "ble_gap_data_length_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dl_limitation",
        "type": "ble_gap_data_length_limitation_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_data_length_update_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_dl_limitation",
        "type": "ble_gap_data_length_limitation_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_phy_update_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_gap_phys",
        "type": "ble_gap_phys_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_phy_update_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_set_configure_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_adv_handle",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adv_data",
        "type": "ble_gap_adv_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_adv_params",
        "type": "ble_gap_adv_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_set_configure_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adv_handle",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_qos_channel_survey_start_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "interval_us",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_qos_channel_survey_start_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_qos_channel_survey_stop_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_qos_channel_survey_stop_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_data_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_data",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_dlen",
        "type": "uint8_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_sr_data",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_srdlen",
        "type": "uint8_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_data_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_start_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_stop_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adv_handle",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_stop_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_appearance_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_appearance",
        "type": "uint16_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_appearance_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_appearance",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_appearance_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_appearance",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_appearance_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_auth_key_reply_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_key_type",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pp_key",
        "type": "uint8_t * * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_auth_key_reply_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_authenticate_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_sec_params",
        "type": "ble_gap_sec_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_authenticate_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_param_update_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_conn_params",
        "type": "ble_gap_conn_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_param_update_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_sec_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_conn_sec",
        "type": "ble_gap_conn_sec_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_sec_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_conn_sec",
        "type": "ble_gap_conn_sec_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_name_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_name",
        "type": "uint8_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_name_len",
        "type": "uint16_t * *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_name_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dev_name",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dev_name_len",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cpy_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_name_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_write_perm",
        "type": "ble_gap_conn_sec_mode_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_dev_name",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dev_name_len",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_name_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_disconnect_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hci_status",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_disconnect_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_encrypt_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t        const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t                     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_master_id",
        "type": "ble_gap_master_id_t ** const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_enc_info",
        "type": "ble_gap_enc_info_t  ** const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_encrypt_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t  * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_keypress_notify_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_kp_not",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_keypress_notify_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_dhkey_reply_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_dhkey",
        "type": "ble_gap_lesc_dhkey_t * *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_dhkey_reply_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_oob_data_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_pk_own",
        "type": "ble_gap_lesc_p256_pk_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_oobd_own",
        "type": "ble_gap_lesc_oob_data_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_oob_data_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_oobd_own",
        "type": "ble_gap_lesc_oob_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_oob_data_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_oobd_own",
        "type": "ble_gap_lesc_oob_data_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_oobd_peer",
        "type": "ble_gap_lesc_oob_data_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_oob_data_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_ppcp_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_conn_params",
        "type": "ble_gap_conn_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_ppcp_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_conn_params",
        "type": "ble_gap_conn_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_ppcp_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_conn_params",
        "type": "ble_gap_conn_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_ppcp_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_rssi_start_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_threshold_dbm",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_skip_count",
        "type": "uint8_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_rssi_start_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_rssi_stop_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_rssi_stop_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_scan_stop_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_connect_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_connect_cancel_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_info_reply_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_enc_info",
        "type": "ble_gap_enc_info_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_id_info",
        "type": "ble_gap_irk_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_sign_info",
        "type": "ble_gap_sign_info_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_info_reply_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_params_reply_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_status",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_sec_params",
        "type": "ble_gap_sec_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_sec_keyset",
        "type": "ble_gap_sec_keyset_t * * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_params_reply_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_sec_keyset",
        "type": "ble_gap_sec_keyset_t * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_tx_power_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_address",
        "type": "ble_gap_addr_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_address",
        "type": "ble_gap_addr_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_addr",
        "type": "ble_gap_addr_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_privacy_params",
        "type": "ble_gap_privacy_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_privacy_params",
        "type": "ble_gap_privacy_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_privacy_params",
        "type": "ble_gap_privacy_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_whitelist_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ppp_wl_addrs",
        "type": "ble_gap_addr_t * * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_len",
        "type": "uint8_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_whitelist_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_identities_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ppp_id_keys",
        "type": "ble_gap_id_key_t * * * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "ppp_local_irks",
        "type": "ble_gap_irk_t * * * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_len",
        "type": "uint8_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_device_identities_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_data_length_update_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_dl_params",
        "type": "ble_gap_data_length_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_dl_limitation",
        "type": "ble_gap_data_length_limitation_t * * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_data_length_update_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_dl_limitation",
        "type": "ble_gap_data_length_limitation_t const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_phy_update_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_gap_phys",
        "type": "ble_gap_phys_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_phy_update_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_set_configure_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_adv_handle",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_adv_data",
        "type": "ble_gap_adv_data_t **const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "pp_adv_params",
        "type": "ble_gap_adv_params_t **const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_set_configure_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_ble_adv_data",
        "type": "ble_gap_adv_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_adv_handle",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_qos_channel_survey_start_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_interval_us",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_qos_channel_survey_start_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_qos_channel_survey_stop_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_qos_channel_survey_stop_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_adv_report_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_auth_key_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_auth_status_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_param_update_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_param_update_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_sec_update_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_connected_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_disconnected_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_key_pressed_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_lesc_dhkey_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_passkey_display_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_rssi_changed_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_scan_req_report_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_info_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_params_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_timeout_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_phy_update_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_phy_update_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_data_length_update_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_data_length_update_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_qos_channel_survey_report_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_adv_set_terminated_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_adv_report_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_auth_key_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_auth_status_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_param_update_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_param_update_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_sec_update_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_connected_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_disconnected_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_key_pressed_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_lesc_dhkey_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_passkey_display_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_rssi_changed_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_scan_req_report_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_info_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_params_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_timeout_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_phy_update_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_phy_update_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_data_length_update_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_data_length_update_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_adv_set_terminated_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_qos_channel_survey_report_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_adv_report_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_adv_report_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_irk_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_irk_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_addr_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_levels_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_levels_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_keys_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_keys_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_enc_info_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_enc_info_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sign_info_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sign_info_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_auth_status_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_auth_status_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_sec_mode_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_sec_mode_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_sec_update_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_sec_update_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_sec_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_sec_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_info_request_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_info_request_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_connected_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_connected_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_params_request_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_params_request_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_param_update_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_param_update_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_param_update_request_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_conn_param_update_request_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_disconnected_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_disconnected_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_master_id_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_master_id_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_scan_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_scan_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_enc_key_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_enc_key_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_id_key_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_id_key_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_keyset_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_keyset_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_request_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_sec_request_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_kdist_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_sec_kdist_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_ch_map_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_ch_map_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_local_conn_latency_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_local_conn_latency_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_passkey_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_passkey_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_scan_req_report_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_scan_req_report_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_compat_mode_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_compat_mode_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_ch_mask_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_ch_mask_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_enable_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_enable_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_p256_pk_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_p256_pk_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_dhkey_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_dhkey_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_oob_data_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_lesc_oob_data_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_ext_len_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_ext_len_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_auth_payload_timeout_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_auth_payload_timeout_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_privacy_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_compat_mode_1_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_compat_mode_1_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_slave_latency_disable_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_slave_latency_disable_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_cfg_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_conn_cfg_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_cfg_role_count_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_cfg_role_count_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_data_length_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_data_length_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_data_length_limitation_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_data_length_limitation_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_compat_mode_2_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_opt_compat_mode_2_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_phys_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_phys_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_properties_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_properties_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_report_type_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_report_type_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_aux_pointer_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_aux_pointer_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_data_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_adv_data_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_adv_set_terminated_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gap_evt_adv_set_terminated_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_attr_info_discover_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_attr_info_discover_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_value_by_uuid_read_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_value_by_uuid_read_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_values_read_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handles",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle_count",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_values_read_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_characteristics_discover_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_characteristics_discover_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_descriptors_discover_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_descriptors_discover_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_hv_confirm_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_hv_confirm_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_primary_services_discover_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "start_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_srvc_uuid",
        "type": "ble_uuid_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_primary_services_discover_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_read_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_read_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_relationships_discover_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_range",
        "type": "ble_gattc_handle_range_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_relationships_discover_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_write_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_write_params",
        "type": "ble_gattc_write_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_write_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_exchange_mtu_request_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "client_rx_mtu",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_exchange_mtu_request_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_attr_info_discover_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handle_range",
        "type": "ble_gattc_handle_range_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_attr_info_discover_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_value_by_uuid_read_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid",
        "type": "ble_uuid_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handle_range",
        "type": "ble_gattc_handle_range_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_value_by_uuid_read_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_values_read_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handles",
        "type": "uint16_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle_count",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_values_read_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_characteristics_discover_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handle_range",
        "type": "ble_gattc_handle_range_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_characteristics_discover_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_descriptors_discover_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handle_range",
        "type": "ble_gattc_handle_range_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_descriptors_discover_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_hv_confirm_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_hv_confirm_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_primary_services_discover_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_start_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_srvc_uuid",
        "type": "ble_uuid_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_primary_services_discover_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_read_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_offset",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_read_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_relationships_discover_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handle_range",
        "type": "ble_gattc_handle_range_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_relationships_discover_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_write_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_write_params",
        "type": "ble_gattc_write_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_write_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_exchange_mtu_request_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_client_rx_mtu",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_exchange_mtu_request_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_attr_info_disc_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_disc_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_val_by_uuid_read_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_vals_read_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_desc_disc_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_hvx_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_prim_srvc_disc_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_read_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_rel_disc_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_timeout_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_write_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_exchange_mtu_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_write_cmd_tx_complete_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_attr_info_disc_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_disc_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_val_by_uuid_read_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_vals_read_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_desc_disc_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_hvx_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_prim_srvc_disc_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_read_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_rel_disc_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_timeout_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_write_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_exchange_mtu_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_write_cmd_tx_complete_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_val_by_uuid_read_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_val_by_uuid_read_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_vals_read_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_vals_read_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_handle_range_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_handle_range_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_service_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_service_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_include_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_include_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_rel_disc_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_rel_disc_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_write_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_write_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_attr_info16_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_attr_info16_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_attr_info128_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_attr_info128_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_attr_info_disc_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_attr_info_disc_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_char_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_disc_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_char_disc_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_desc_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_desc_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_desc_disc_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_desc_disc_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_hvx_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_hvx_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_prim_srvc_disc_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_prim_srvc_disc_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_read_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_read_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_timeout_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_timeout_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_write_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_write_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_exchange_mtu_rsp_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_evt_exchange_mtu_rsp_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_conn_cfg_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gattc_conn_cfg_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_attr_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_md",
        "type": "ble_gatts_attr_md_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_attr_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid",
        "type": "ble_uuid_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_md",
        "type": "ble_gatts_attr_md_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_characteristic_add_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "service_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_char_md",
        "type": "ble_gatts_char_md_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_attr_char_value",
        "type": "ble_gatts_attr_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_handles",
        "type": "ble_gatts_char_handles_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_characteristic_add_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handles",
        "type": "uint16_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_descriptor_add_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "char_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_attr",
        "type": "ble_gatts_attr_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_descriptor_add_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_hvx_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hvx_params",
        "type": "ble_gatts_hvx_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_hvx_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_bytes_written",
        "type": "uint16_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_include_add_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "service_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "inc_srvc_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_include_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_include_add_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_include_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_initial_user_handle_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_initial_user_handle_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handle",
        "type": "uint16_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_rw_authorize_reply_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_service_add_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_service_add_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_service_changed_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "start_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "end_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_service_changed_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_sys_attr_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sys_attr_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_sys_attr_data_len",
        "type": "uint16_t const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "flags",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_sys_attr_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_sys_attr_data",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "pp_sys_attr_data_len",
        "type": "uint16_t * * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_sys_attr_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sys_attr_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "sys_attr_data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "flags",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_sys_attr_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_value",
        "type": "ble_gatts_value_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_value",
        "type": "ble_gatts_value_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_set_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_value",
        "type": "ble_gatts_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_set_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_value",
        "type": "ble_gatts_value_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_exchange_mtu_reply_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "server_rx_mtu",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_exchange_mtu_reply_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_attr_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t   const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_uuid",
        "type": "ble_uuid_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_md",
        "type": "ble_gatts_attr_md_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_attr_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_md",
        "type": "ble_gatts_attr_md_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_characteristic_add_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_service_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_char_md",
        "type": "ble_gatts_char_md_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_attr_char_value",
        "type": "ble_gatts_attr_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_handles",
        "type": "ble_gatts_char_handles_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_characteristic_add_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_handles",
        "type": "ble_gatts_char_handles_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_descriptor_add_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_char_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_attr",
        "type": "ble_gatts_attr_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_handle",
        "type": "uint16_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_descriptor_add_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_hvx_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_hvx_params",
        "type": "ble_gatts_hvx_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_hvx_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_bytes_written",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_include_add_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_service_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_inc_srvc_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_include_handle",
        "type": "uint16_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_include_add_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_include_handle",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_initial_user_handle_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t   const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handle",
        "type": "uint16_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_initial_user_handle_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_rw_authorize_reply_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_reply_params",
        "type": "ble_gatts_rw_authorize_reply_params_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_rw_authorize_reply_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_service_add_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_type",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_uuid",
        "type": "ble_uuid_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_handle",
        "type": "uint16_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_service_add_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_handle",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_service_changed_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_start_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_end_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_service_changed_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_sys_attr_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_sys_attr_data",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "pp_sys_attr_data_len",
        "type": "uint16_t * * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_flags",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_sys_attr_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_sys_attr_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_sys_attr_data_len",
        "type": "uint16_t const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_sys_attr_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_sys_attr_data",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_sys_attr_data_len",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_flags",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_sys_attr_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_value",
        "type": "ble_gatts_value_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_value",
        "type": "ble_gatts_value_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_set_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_value",
        "type": "ble_gatts_value_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_set_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_value",
        "type": "ble_gatts_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_exchange_mtu_reply_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_server_rx_mtu",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_exchange_mtu_reply_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_hvc_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_rw_authorize_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_sc_confirm_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_sys_attr_missing_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_timeout_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_write_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_exchange_mtu_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_hvn_tx_complete_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_rw_authorize_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_hvc_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_sc_confirm_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_sys_attr_missing_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_timeout_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_write_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_exchange_mtu_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_hvn_tx_complete_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_char_pf_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_char_pf_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_attr_md_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_attr_md_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_char_md_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_char_md_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_attr_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_attr_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_char_handles_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_char_handles_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_hvx_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_hvx_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_write_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_write_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_read_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_read_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_rw_authorize_request_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_rw_authorize_request_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_authorize_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_authorize_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_rw_authorize_reply_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_rw_authorize_reply_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_enable_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_enable_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_value_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_exchange_mtu_request_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_exchange_mtu_request_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_hvc_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_hvc_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_sys_attr_missing_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_sys_attr_missing_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_timeout_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_evt_timeout_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_conn_cfg_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_conn_cfg_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_cfg_service_changed_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_cfg_service_changed_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_cfg_attr_tab_size_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatts_cfg_attr_tab_size_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatt_char_props_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatt_char_props_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatt_char_ext_props_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatt_char_ext_props_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatt_enable_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatt_enable_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatt_conn_cfg_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_gatt_conn_cfg_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "next_sequence_number_set",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gls_meas_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_meas",
        "type": "const ble_gls_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_gls_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gls_init",
        "type": "const ble_gls_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "racp_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_racp_val",
        "type": "ble_racp_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "racp_response_code_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "opcode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "glucose_meas_send",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec",
        "type": "ble_gls_rec_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "racp_report_records_all",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "racp_report_records_first_last",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "racp_report_records_greater_or_equal",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "racp_report_records_completed",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "racp_report_records_procedure",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_request_to_be_executed",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_racp_request",
        "type": "ble_racp_value_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_response_code",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "report_records_request_execute",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_racp_request",
        "type": "ble_racp_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "report_num_records_request_execute",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_racp_request",
        "type": "ble_racp_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "ble_gls_are_cccd_configured",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_are_cccd_configured",
        "type": "bool *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_racp_value_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_glm_cccd_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_tx_complete",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_rw_authorize_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gatts_evt",
        "type": "ble_gatts_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_gls_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_gls_glucose_new_meas",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_gls",
        "type": "ble_gls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec",
        "type": "ble_gls_rec_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_gls_db_record_add",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_rec",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_gls_db_init",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_gls_db_num_records_get",
    "return_type": "uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_gls_db_record_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "rec_ndx",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec",
        "type": "ble_gls_rec_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_gls_db_record_delete",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "rec_ndx",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hids_client_context_size_calc",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "make_char_id",
    "return_type": "static ble_hids_char_id_t",
    "params": [
      {
        "name": "uuid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rep_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "rep_index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_control_point_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_protocol_mode_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_protocol_mode_read_auth",
    "return_type": "void",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_report_cccd_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_char_id",
        "type": "ble_hids_char_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_report_value_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_char_id",
        "type": "ble_hids_char_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rep_offset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rep_max_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_report_value_read_auth",
    "return_type": "static void",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_char_id",
        "type": "ble_hids_char_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "rep_offset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rep_max_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "inp_rep_cccd_identify",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_char_id",
        "type": "ble_hids_char_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "rep_value_identify",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_char_id",
        "type": "ble_hids_char_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_rep_max_len",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hids_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "protocol_mode_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "write_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "rep_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_properties",
        "type": "ble_gatt_char_props_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "max_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_rep_ref",
        "type": "ble_srv_report_ref_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_char_sec",
        "type": "ble_hids_char_sec_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rep_char",
        "type": "ble_hids_rep_char_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "rep_map_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hids_init",
        "type": "const ble_hids_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "boot_inp_rep_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "uuid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_char_sec",
        "type": "ble_hids_char_sec_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_char_handles",
        "type": "ble_gatts_char_handles_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "boot_kb_outp_rep_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hids_init",
        "type": "const ble_hids_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "encode_hid_information",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_hid_information",
        "type": "const ble_hids_hid_information_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hid_information_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hids_init",
        "type": "const ble_hids_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hid_control_point_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "write_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "inp_rep_characteristics_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hids_init",
        "type": "const ble_hids_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "outp_rep_characteristics_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hids_init",
        "type": "const ble_hids_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "feature_rep_characteristics_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hids_init",
        "type": "const ble_hids_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "includes_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hids_init",
        "type": "const ble_hids_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hids_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_hids_init",
        "type": "const ble_hids_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hids_inp_rep_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rep_index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hids_boot_kb_inp_rep_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hids_boot_mouse_inp_rep_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buttons",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "x_delta",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y_delta",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "optional_data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_optional_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hids_outp_rep_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hids",
        "type": "ble_hids_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rep_index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_outp_rep",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_hrm_cccd_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_hrs_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hrm_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "heart_rate",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_hrs_init",
        "type": "const ble_hrs_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_heart_rate_measurement_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "heart_rate",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_rr_interval_add",
    "return_type": "void",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "rr_interval",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_rr_interval_buffer_is_full",
    "return_type": "bool",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_sensor_contact_supported_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "is_sensor_contact_supported",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_sensor_contact_detected_update",
    "return_type": "void",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "is_sensor_contact_detected",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_body_sensor_location_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "body_sensor_location",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_on_gatt_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_hrs",
        "type": "ble_hrs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gatt_evt",
        "type": "nrf_ble_gatt_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_hrs_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_hrs_c",
        "type": "ble_hrs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "const ble_db_discovery_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_c_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_hrs_c",
        "type": "ble_hrs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_hrs_c_init",
        "type": "ble_hrs_c_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_c_hrm_notif_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_hrs_c",
        "type": "ble_hrs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hrs_c_handles_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_hrs_c",
        "type": "ble_hrs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_hrs_handles",
        "type": "const hrs_db_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hts_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts_measurement_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_hts",
        "type": "ble_hts_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_hts_meas",
        "type": "ble_hts_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hts_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hts",
        "type": "ble_hts_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_hts_init",
        "type": "ble_hts_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hts_measurement_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hts",
        "type": "ble_hts_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_hts_meas",
        "type": "ble_hts_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_hts_is_indication_enabled",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_hts",
        "type": "ble_hts_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_indication_enabled",
        "type": "bool *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ias_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ias_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ias",
        "type": "ble_ias_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ias_init",
        "type": "const ble_ias_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ias_alert_level_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ias",
        "type": "ble_ias_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_alert_level",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ias_c_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ias_c",
        "type": "ble_ias_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_db_discovery_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ias_c_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ias_c",
        "type": "ble_ias_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ias_c_init",
        "type": "ble_ias_c_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ias_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_characteristic_value",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ias_c",
        "type": "ble_ias_c_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_value",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ias_c_send_alert_level",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ias_c",
        "type": "ble_ias_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "alert_level",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ias_c_handles_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ias_c",
        "type": "ble_ias_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "const uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "alert_level_handle",
        "type": "const uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "connected_device_init",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "connected_device_allocate",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_peer_addr",
        "type": "ble_gap_addr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "connected_device_search",
    "return_type": "static __INLINE uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "channel_init",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "ch_id",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_free",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "ch_id",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "channel_search",
    "return_type": "static __INLINE uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "l2cap_cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ch_id",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_notify",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_handle",
        "type": "ble_ipsp_handle_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_ipsp_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_tx_buffer",
    "return_type": "static __INLINE bool",
    "params": [
      {
        "name": "ch_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_buffers_submit",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "ch_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_buffer_mark_unused",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "ch_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ipsp_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ipsp_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_init",
        "type": "const ble_ipsp_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ipsp_connect",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_handle",
        "type": "const ble_ipsp_handle_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ipsp_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_handle",
        "type": "ble_ipsp_handle_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ipsp_disconnect",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_handle",
        "type": "ble_ipsp_handle_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ipsp_incoming_channel_reject",
    "return_type": "void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ipsp_incoming_channel_accept",
    "return_type": "void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_l2cap_cid_register_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_cid_register_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_cid_unregister_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_cid_unregister_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_tx_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_l2cap_header",
        "type": "ble_l2cap_header_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_tx_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_setup_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_local_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_params",
        "type": "ble_l2cap_ch_setup_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_setup_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_local_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_release_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "local_cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_release_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_rx_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "local_cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sdu_buf",
        "type": "ble_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_rx_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_tx_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "local_cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sdu_buf",
        "type": "ble_data_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_tx_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_flow_control_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "local_cid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "credits",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_credits",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_flow_control_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_credits",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_cid_register_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_cid_register_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_ble_cmd_rsp_status_code_enc",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "SD_BLE_L2CAP_CID_REGISTER",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "return_code",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_buf",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_buf_len",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_cid_unregister_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_cid_unregister_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_tx_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_l2cap_header",
        "type": "ble_l2cap_header_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_data",
        "type": "uint8_t const * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_tx_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_setup_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_local_cid",
        "type": "uint16_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_params",
        "type": "ble_l2cap_ch_setup_params_t  * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_setup_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_local_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_release_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_local_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_release_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_rx_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_local_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_sdu_buf",
        "type": "ble_data_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_rx_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_tx_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_local_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_sdu_buf",
        "type": "ble_data_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_tx_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_flow_control_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_local_cid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_credits",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_credits",
        "type": "uint16_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_flow_control_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_credits",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_rx_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_setup_request_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_setup_refused_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_setup_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_released_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_sdu_buf_released_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_credit_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_rx_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_tx_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_event",
        "type": "ble_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_rx_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_setup_request_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_setup_refused_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_setup_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_released_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_sdu_buf_released_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_credit_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_rx_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_ch_tx_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_event",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_header_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_header_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_rx_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_evt_rx_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ext_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_conn_cfg_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_conn_cfg_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_rx_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_rx_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_setup_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_setup_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_tx_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_l2cap_ch_tx_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lbs_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lbs_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_lbs",
        "type": "ble_lbs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lbs_init",
        "type": "const ble_lbs_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lbs_on_button_change",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_lbs",
        "type": "ble_lbs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "button_state",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lbs_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_lbs_c",
        "type": "ble_lbs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_db_discovery_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lbs_c_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_lbs_c",
        "type": "ble_lbs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_lbs_c_init",
        "type": "ble_lbs_c_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lbs_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lbs_c_button_notif_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_lbs_c",
        "type": "ble_lbs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lbs_led_status_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_lbs_c",
        "type": "ble_lbs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lbs_c_handles_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_lbs_c",
        "type": "ble_lbs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "const lbs_db_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "blcm_link_ctx_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_link_ctx_storage",
        "type": "blcm_link_ctx_storage_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t                        const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_ctx_data",
        "type": "void                         ** const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_auth_status",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lls",
        "type": "ble_lls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lls_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lls_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_lls",
        "type": "ble_lls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lls_init",
        "type": "const ble_lls_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lls_alert_level_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_lls",
        "type": "ble_lls_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_alert_level",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "notification_buffer_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_ctrl_pt_cccd_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_loc_speed_cccd_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_nav_cccd_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pos_qual_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pos_qual",
        "type": "ble_lns_pos_quality_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "loc_speed_encode_packet1",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_loc_speed",
        "type": "ble_lns_loc_speed_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "loc_speed_encode_packet2",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_loc_speed",
        "type": "ble_lns_loc_speed_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "navigation_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_navigation",
        "type": "ble_lns_navigation_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "loc_and_nav_feature_char_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lns_init",
        "type": "ble_lns_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "loc_speed_char_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lns_init",
        "type": "ble_lns_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pos_quality_char_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lns_init",
        "type": "ble_lns_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "navigation_char_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lns_init",
        "type": "ble_lns_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "init_param_mismatch_present",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_lns_init",
        "type": "ble_lns_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lns_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lns_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lns_init",
        "type": "ble_lns_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lns_loc_speed_send",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lns_navigation_send",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lns_add_route",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_route",
        "type": "ble_lns_route_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ln_db_record_add",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_route",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lns_remove_route",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_lns",
        "type": "ble_lns_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "route_id",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ln_db_record_delete",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "route_id",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "notify_app",
    "return_type": "static ble_lncp_rsp_code_t",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_lncp_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "resp_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_hvc_confirm",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_lncp_cccd_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_set_cumulative_value",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_mask_loc_speed_content",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_nav_control",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_req_num_routes",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_req_name_of_route",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_select_route",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_set_fix_rate",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_set_elevation",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lncp_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lncp_total_distance_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lncp_elevation_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lncp_mask_get",
    "return_type": "ble_lncp_mask_t",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lncp_is_navigation_running",
    "return_type": "bool",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_lncp_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_lncp",
        "type": "ble_lncp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lncp_init",
        "type": "ble_lncp_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ln_db_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ln_db_num_records_get",
    "return_type": "uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ln_db_record_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "rec_ndx",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec",
        "type": "ble_lns_route_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ln_db_record_name_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "rec_ndx",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_hvx_tx_complete",
    "return_type": "static void",
    "params": [
      {
        "name": "p_nus",
        "type": "ble_nus_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_nus_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_nus_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_nus",
        "type": "ble_nus_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_nus_init",
        "type": "ble_nus_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_nus_data_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_nus",
        "type": "ble_nus_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_nus_c_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_nus_c",
        "type": "ble_nus_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_db_discovery_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_nus_c_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_nus_c",
        "type": "ble_nus_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_nus_c_init",
        "type": "ble_nus_c_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_nus_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_nus_c_tx_notif_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_nus_c",
        "type": "ble_nus_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_nus_c_string_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_nus_c",
        "type": "ble_nus_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_string",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_nus_c_handles_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_nus",
        "type": "ble_nus_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "ble_nus_c_handles_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "feature_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ots",
        "type": "ble_ots_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "read_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_feature_char_handles",
        "type": "ble_gatts_char_handles_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ots_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots",
        "type": "ble_ots_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ots_init",
        "type": "ble_ots_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_l2cap_is_channel_available",
    "return_type": "bool",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_l2cap_abort_transmission",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_l2cap_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ots_l2cap_init",
        "type": "ble_ots_l2cap_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "receive_resume",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "send_resume",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_l2cap_obj_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_l2cap_start_recv",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_l2cap_ch_setup_request",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_l2cap_ch_setup",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_l2cap_ch_released",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_l2cap_ch_tx",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_l2cap_ch_rx",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_l2cap_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_cccd_configured",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ots_l2cap_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_l2cap",
        "type": "ble_ots_l2cap_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_ots_l2cap_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oacp_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "service_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "write_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "cccd_write_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "oacp_write_proc",
    "return_type": "static inline ble_ots_oacp_res_code_t",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oacp_read_proc",
    "return_type": "static inline ble_ots_oacp_res_code_t",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oacp_abort_proc",
    "return_type": "static inline ble_ots_oacp_res_code_t",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_oacp_response_send",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "req_op_code",
        "type": "ble_ots_oacp_proc_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "result_code",
        "type": "ble_ots_oacp_res_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "decode_oacp_command",
    "return_type": "static inline ble_ots_oacp_res_code_t",
    "params": [
      {
        "name": "p_ble_write_evt",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_proc",
        "type": "ble_ots_oacp_proc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_oacp_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_oacp_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_oacp_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ots_oacp_init",
        "type": "ble_ots_oacp_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_oacp_do_proc",
    "return_type": "ble_ots_oacp_res_code_t",
    "params": [
      {
        "name": "p_ots_oacp",
        "type": "ble_ots_oacp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_oacp_proc",
        "type": "ble_ots_oacp_proc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_object_refresh_current",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "obj_name_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "service_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "write_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "obj_type_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "service_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "obj_size_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "service_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "obj_prop_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "service_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "write_access",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ots_object_representation_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ots_object_chars_init",
        "type": "ble_ots_object_chars_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_object_set_name",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_object",
        "type": "ble_ots_object_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "new_name",
        "type": "const char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_object_set_type",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_object",
        "type": "ble_ots_object_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_new_type",
        "type": "ble_ots_obj_type_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_object_set_current_size",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_object",
        "type": "ble_ots_object_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "new_current_size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_obj_properties_write",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_object_set_properties",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_object",
        "type": "ble_ots_object_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_new_properties",
        "type": "ble_ots_obj_properties_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_rw_auth_req",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_object_chars",
        "type": "ble_ots_object_chars_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ots_object_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ots_chars",
        "type": "ble_ots_object_chars_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_racp_decode",
    "return_type": "void",
    "params": [
      {
        "name": "data_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_racp_val",
        "type": "ble_racp_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_racp_encode",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "p_racp_val",
        "type": "const ble_racp_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SWI1_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_radio_notification_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "irq_priority",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "distance",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "ble_radio_notification_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sd_radio_notification_cfg_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "distance",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_rscs_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rsc_measurement_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_rscs",
        "type": "const ble_rscs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rsc_measurement",
        "type": "const ble_rscs_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_rscs_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rscs",
        "type": "ble_rscs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rscs_init",
        "type": "const ble_rscs_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_rscs_measurement_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rscs",
        "type": "ble_rscs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_measurement",
        "type": "ble_rscs_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_rscs_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_rscs_c",
        "type": "ble_rscs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "const ble_db_discovery_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_rscs_c_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_rscs_c",
        "type": "ble_rscs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_rscs_c_init",
        "type": "ble_rscs_c_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_rscs_c_handles_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_rscs_c",
        "type": "ble_rscs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "ble_rscs_c_db_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_rscs_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_rscs_c_rsc_notif_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ble_rscs_c",
        "type": "ble_rscs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sc_ctrlpt_decode",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_rcvd_val",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_write_val",
        "type": "ble_sc_ctrlpt_val_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ctrlpt_rsp_encode",
    "return_type": "static int",
    "params": [
      {
        "name": "p_sc_ctrlpt",
        "type": "ble_sc_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ctrlpt_rsp",
        "type": "ble_sc_ctrlpt_rsp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_location_supported",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_sc_ctrlpt",
        "type": "ble_sc_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "location",
        "type": "ble_sensor_location_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sc_ctrlpt_resp_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_sc_ctrlpt",
        "type": "ble_sc_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_sc_hvc_confirm",
    "return_type": "static void",
    "params": [
      {
        "name": "p_sc_ctrlpt",
        "type": "ble_sc_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_sc_ctrlpt_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_sc_ctrlpt",
        "type": "ble_sc_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_sc_ctrlpt_rsp_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_sc_ctrlpt",
        "type": "ble_sc_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "response_status",
        "type": "ble_scpt_response_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_ble_cmd_rsp_result_code_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_pos",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "op_code",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint32_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_field",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint32_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_field",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint16_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_field",
        "type": "const void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint16_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_field",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint16_dec",
    "return_type": "void",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint8_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_field",
        "type": "const void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint8_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_field",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint8_dec",
    "return_type": "void",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "int8_dec",
    "return_type": "void",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "int8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "len8data_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "dlen",
        "type": "uint8_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "len8data_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_data",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint8_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "len16data_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "dlen",
        "type": "uint16_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "len16data_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_data",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_dlen",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "count16_cond_data16_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint16_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "count",
        "type": "uint16_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "count16_cond_data16_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_data",
        "type": "uint16_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_count",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cond_len16_cond_data_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_data",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "pp_len",
        "type": "uint16_t * * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "op_status_cond_uint16_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "op_code",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buff_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "buf_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "dlen",
        "type": "uint16_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "buf_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_data",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "dlen",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint8_vector_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "dlen",
        "type": "uint16_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uint8_vector_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *  const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "dlen",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_srv_is_notification_enabled",
    "return_type": "bool",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_srv_is_indication_enabled",
    "return_type": "bool",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_srv_report_ref_encode",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_report_ref",
        "type": "const ble_srv_report_ref_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_srv_ascii_to_utf8",
    "return_type": "void",
    "params": [
      {
        "name": "p_utf8",
        "type": "ble_srv_utf8_str_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ascii",
        "type": "char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_security_req",
    "return_type": "static inline void",
    "params": [
      {
        "name": "level",
        "type": "security_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_perm",
        "type": "ble_gap_conn_sec_mode_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_uuid_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid128_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_uuid128_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_enable_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_enable_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_bw_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_bw_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_common_opt_conn_bw_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_common_opt_conn_bw_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_bw_count_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_bw_count_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_bw_counts_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_conn_bw_counts_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_common_enable_params_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_common_enable_params_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_common_opt_pa_lna_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_common_opt_pa_lna_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_pa_lna_cfg_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_pa_lna_cfg_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_user_mem_block_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_user_mem_block_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_version_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_version_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_data_length_changed_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_evt_data_length_changed_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_common_opt_conn_evt_ext_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_common_opt_conn_evt_ext_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_common_cfg_vs_uuid_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_common_cfg_vs_uuid_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_data_t_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_data_t_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_tps_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_tps_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_tps",
        "type": "ble_tps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_tps_init",
        "type": "const ble_tps_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_tps_tx_power_level_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_tps",
        "type": "ble_tps_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_power_level",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_led_state_get",
    "return_type": "bool",
    "params": [
      {
        "name": "led_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_led_on",
    "return_type": "void",
    "params": [
      {
        "name": "led_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_led_off",
    "return_type": "void",
    "params": [
      {
        "name": "led_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_leds_off",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_leds_on",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_led_invert",
    "return_type": "void",
    "params": [
      {
        "name": "led_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gpio_output_voltage_setup",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_leds_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_led_idx_to_pin",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "led_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_pin_to_led_idx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_button_state_get",
    "return_type": "bool",
    "params": [
      {
        "name": "button_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_buttons_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_pin_to_button_idx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_button_idx_to_pin",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "button_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_board_init",
    "return_type": "void",
    "params": [
      {
        "name": "init_flags",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_button_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "pin_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "button_action",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_button_is_pressed",
    "return_type": "bool",
    "params": [
      {
        "name": "button",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "button_timer_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "leds_off",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_led_indication",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "indicate",
        "type": "bsp_indication_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "leds_timer_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "alert_timer_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "type",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "callback",
        "type": "bsp_event_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_event_to_button_action_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "button",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "action",
        "type": "bsp_button_action_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "bsp_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_buttons_enable",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_buttons_disable",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "wakeup_button_cfg",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "button_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_wakeup_button_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "button_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_wakeup_button_disable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "button_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "connection_buttons_configure",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "searching_buttons_configure",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_btn_ant_sleep_mode_prepare",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_btn_ant_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "channel_type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "advertising_buttons_configure",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "startup_event_extract",
    "return_type": "static void",
    "params": [
      {
        "name": "p_startup_event",
        "type": "bsp_event_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_btn_ble_sleep_mode_prepare",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_btn_ble_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "error_handler",
        "type": "bsp_btn_ble_error_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_startup_bsp_evt",
        "type": "bsp_event_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_btn",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_cli_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "callback",
        "type": "bsp_event_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_nfc_btn_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "sleep_button",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_nfc_btn_deinit",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "sleep_button",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bsp_nfc_sleep_mode_prepare",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "result_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "error",
        "type": "SaSiError_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "nrf_crypto_operation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_key_set",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_iv_set",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_iv",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_iv_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_iv",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_update",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_mac_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_cbc_mac_padding_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_padding_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cc310_crypt",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "nrf_crypto_operation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_nonce",
        "type": "uint8_t *",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "LOW"
      },
      {
        "name": "nonce_size",
        "type": "uint8_t",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adata",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "adata_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_in_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_mac",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mac_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_ecc_error_convert",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "crys_error",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_ecc_public_key_convert",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_pub",
        "type": "nrf_crypto_backend_cc310_ecc_public_key_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_temp_data",
        "type": "CRYS_ECPKI_BUILD_TempData_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_private_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_private_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_public_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_public_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_curve25519_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_curve25519_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_curve25519_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_ed25519_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_ed25519_private_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_ed25519_private_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_ed25519_public_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_ed25519_public_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_ed25519_public_key_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_ecdh_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_shared_secret",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_curve25519_ecdh_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_shared_secret",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hash_mode_from_size",
    "return_type": "static CRYS_ECPKI_HASH_OpMode_t",
    "params": [
      {
        "name": "data_size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_sign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_ed25519_sign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "nrf_crypto_ecc_private_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_message",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "message_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_ed25519_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "nrf_crypto_ecc_public_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_message",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "message_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hash_result_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "error",
        "type": "CRYSError_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_backend_hash_sha256_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_backend_hash_sha256_update",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void        * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_backend_hash_sha256_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t    * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_backend_hash_sha512_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_backend_hash_sha512_update",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_backend_hash_sha512_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t     * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_backend_hmac_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key_size",
        "type": "size_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_backend_hmac_update",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void    * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_backend_hmac_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_size",
        "type": "size_t    * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "init_result_get",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "crys_error",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cc310_backend_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cc310_backend_uninit",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_backend_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_temp_buffer",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_backend_uninit",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_backend_vector_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_target",
        "type": "uint8_t   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "use_mutex",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_backend_reseed",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_temp_buffer",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_input_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_cc310_rng",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_state",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp224r1_public_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp224r1_public_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp256r1_public_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp256r1_public_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "crys_error_to_ret_code",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "crys_error",
        "type": "CRYSError_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp224r1_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp256r1_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_bl_backend_hash_sha256_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_bl_backend_hash_sha256_update",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_context",
        "type": "void      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_bl_backend_hash_sha256_finalize",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_context",
        "type": "void    * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t   * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "cc310_bl_backend_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cc310_bl_backend_uninit",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cc310_bl_backend_enable",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cc310_bl_backend_disable",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ccs811_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "ccs811_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ccs811_thr_cfg",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_instance",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "CCS811_DEFAULT_LOW_THR",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "CCS811_DEFAULT_HIGH_THR",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "CCS811_DEFAULT_HYSTERESIS",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ccs811_drive_mode_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "ccs811_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "ccs811_drive_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "drdy_en",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "thr_en",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ccs811_alg_data_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "ccs811_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "user_cb",
        "type": "ccs811_data_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_alg_data",
        "type": "ccs811_alg_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "last",
        "type": "ccs811_last_data_byte_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ccs811_alg_data_process",
    "return_type": "void",
    "params": [
      {
        "name": "p_alg_data",
        "type": "ccs811_alg_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ccs811_env_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "ccs811_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "temp_value",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "temp_fraction",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "hum_percent",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "hum_fraction",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ccs811_baseline_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "ccs811_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "user_cb",
        "type": "nrf_twi_sensor_reg_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_baseline",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ccs811_baseline_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "ccs811_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "baseline",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ccs811_sw_reset",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "ccs811_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_db_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_db_num_records_get",
    "return_type": "uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_db_record_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "record_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec",
        "type": "ble_cgms_rec_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_db_record_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_rec",
        "type": "ble_cgms_rec_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_db_record_delete",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "record_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_meas_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_meas",
        "type": "const nrf_ble_cgms_meas_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_meas_char_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "cgms_meas_send",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec",
        "type": "ble_cgms_rec_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_count",
        "type": "uint8_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_meas_on_write",
    "return_type": "void",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_racp_char_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "racp_report_records_less_equal",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "racp_report_records_greater_equal",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_index_offset_less_or_equal_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "record_num",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_index_offset_greater_or_equal_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "record_num",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_racp_on_rw_auth_req",
    "return_type": "void",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_auth_req",
        "type": "ble_gatts_evt_rw_authorize_request_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_racp_on_tx_complete",
    "return_type": "void",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_socp_decode",
    "return_type": "static void",
    "params": [
      {
        "name": "data_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_socp_val",
        "type": "ble_cgms_socp_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_socp_encode",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "p_socp_rsp",
        "type": "const ble_socp_rsp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_socp_char_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "socp_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "encode_get_response",
    "return_type": "void",
    "params": [
      {
        "name": "rsp_code",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rsp",
        "type": "ble_socp_rsp_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "in_val",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "decode_set_opcode",
    "return_type": "void",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "rcv_val",
        "type": "ble_cgms_socp_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "min",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_val",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_feature_present",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "feature",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_socp_value_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_socp_on_rw_auth_req",
    "return_type": "void",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_auth_req",
        "type": "ble_gatts_evt_rw_authorize_request_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sst_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_sst",
        "type": "ble_cgms_sst_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "const uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "convert_ble_time_c_time",
    "return_type": "void",
    "params": [
      {
        "name": "p_sst",
        "type": "ble_cgms_sst_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_c_time_date",
        "type": "struct tm *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "calc_sst",
    "return_type": "void",
    "params": [
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_c_time_date",
        "type": "struct tm *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "convert_c_time_ble_time",
    "return_type": "static void",
    "params": [
      {
        "name": "p_sst",
        "type": "ble_cgms_sst_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_c_time_date",
        "type": "struct tm *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sst_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_sst",
        "type": "ble_cgms_sst_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_sst",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgm_update_sst",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_sst_value_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cgms_sst_char_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "cgms_sst_on_rw_auth_req",
    "return_type": "void",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_auth_req",
        "type": "ble_gatts_evt_rw_authorize_request_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cherry8x16_have_keys_changed",
    "return_type": "static bool",
    "params": [
      {
        "name": "state_now",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "number_of_now_pressed_keys",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "state_before",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "number_of_before_pressed_keys",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cherry8x16_keymatrix_read",
    "return_type": "static bool",
    "params": [
      {
        "name": "pressed_keys",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "number_of_pressed_keys",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cherry8x16_keypacket_addkey",
    "return_type": "static void",
    "params": [
      {
        "name": "key",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cherry8x16_keypacket_create",
    "return_type": "static void",
    "params": [
      {
        "name": "key_packet",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key_packet_size",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cherry8x16_remap_fn_keys",
    "return_type": "static void",
    "params": [
      {
        "name": "keys",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "number_of_keys",
        "type": "uint8_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cherry8x16_row_read",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cherry8x16_init",
    "return_type": "cherry8x16_status_t",
    "params": [
      {
        "name": "row_port",
        "type": "const uint8_t volatile *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "column_port",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "key_lookup_matrix",
        "type": "const uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cherry8x16_new_packet",
    "return_type": "bool",
    "params": [
      {
        "name": "p_key_packet",
        "type": "const uint8_t **",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_key_packet_size",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cifra_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cifra_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cifra_crypt",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "nrf_crypto_operation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_nonce",
        "type": "uint8_t *",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "LOW"
      },
      {
        "name": "nonce_size",
        "type": "uint8_t",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adata",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "adata_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_in_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_mac",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mac_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_reset",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_error",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_app_size",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_log_msg_error",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_log_msg_warning",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cond_field_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_field",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "fp_field_encoder",
        "type": "field_encoder_handler_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cond_field_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_field",
        "type": "void * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "fp_field_decoder",
        "type": "field_decoder_handler_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ble_gap_sec_keys_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_ble_gap_sec_context_create",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_ble_gap_sec_context_destroy",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_ble_gap_sec_context_find",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_ble_gap_ble_data_buf_free",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_ble_gap_scan_data_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_scan_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_ble_gap_scan_data_unset",
    "return_type": "void",
    "params": [
      {
        "name": "free",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_ble_l2cap_sdu_pool_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ble_l2cap_sdu_pool_id_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ble_l2cap_sdu_pool_free",
    "return_type": "void",
    "params": [
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ble_user_mem_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ble_user_mem_context_create",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ble_user_mem_context_destroy",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ble_user_mem_context_find",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_handler_get",
    "return_type": "static conn_mw_handler_t",
    "params": [
      {
        "name": "opcode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_handler",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ant_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_open_with_offset",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_id_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_period_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_radio_freq_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_broadcast_message_tx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_acknowledge_message_tx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_unassign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_close",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_network_address_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_radio_tx_power_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_rx_search_timeout_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_low_priority_rx_search_timeout_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_prox_search_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_search_waveform_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_id_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_radio_freq_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_period_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_search_channel_priority_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_active_search_sharing_cycles_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "conn_ant_lib_config_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_active_search_sharing_cycles_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "conn_ant_lib_config_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_lib_config_clear",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_stack_reset",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_rx_scan_mode_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_ant_id_list_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_id_list_config",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_channel_status_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_cw_test_mode_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_cw_test_mode",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_version_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_capabilities_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_crypto_channel_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_adv_burst_config_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_ant_crypto_key_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_crypto_info_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_crypto_info_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_coex_config_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_ant_coex_config_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_tx_packet_count_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_uuid_vs_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_uuid_decode",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_uuid_encode",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_version_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_opt_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_opt_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_enable",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_user_mem_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_cfg_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_gap_connect",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_connect_cancel",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_scan_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_scan_stop",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_encrypt",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t      * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_adv_data_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_adv_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_adv_stop",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_conn_param_update",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_disconnect",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_tx_power_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_appearance_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_appearance_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_ppcp_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_ppcp_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_device_name_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_device_name_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_authenticate",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_sec_params_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_auth_key_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_sec_info_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_conn_sec_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_rssi_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_rssi_stop",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_rssi_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t      * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_keypress_notify",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t      * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_lesc_dhkey_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t      * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_lesc_oob_data_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t      * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_lesc_oob_data_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t      * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_addr_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_addr_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_privacy_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_privacy_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_whitelist_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_device_identities_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_phy_update",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_data_length_update",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_adv_set_configure",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_qos_channel_survey_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gap_qos_channel_survey_stop",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_primary_services_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_relationships_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_characteristics_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_descriptors_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_char_value_by_uuid_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_char_values_read",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_write",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_hv_confirm",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_attr_info_discover",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gattc_exchange_mtu_request",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_service_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_characteristic_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_include_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_descriptor_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_value_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_value_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_hvx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_service_changed",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_rw_authorize_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_sys_attr_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_sys_attr_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_attr_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_initial_user_handle_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_gatts_exchange_mtu_reply",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "conn_mw_ble_l2cap_cid_register",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_l2cap_cid_unregister",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ble_l2cap_tx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_l2cap_ch_setup",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_l2cap_ch_release",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_l2cap_ch_rx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_l2cap_ch_tx",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_l2cap_ch_flow_control",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_power_system_off",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "conn_mw_temp_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_mw_ecb_block_encrypt",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "rx_buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tx_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tx_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_systemreset",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "crc16_get",
    "return_type": "static __INLINE uint16_t",
    "params": [
      {
        "name": "current_crc",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crc_crc16_update",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "current_crc",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "const volatile void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crc16_compute",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_crc",
        "type": "uint16_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crc32_compute",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_crc",
        "type": "uint32_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "drv_rtc_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "handler",
        "type": "drv_rtc_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_uninit",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_start",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_stop",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_compare_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "abs_value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "irq_enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "evt_enable",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mask",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "irq_enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "evt_disable",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mask",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "evt_pending",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "nrf_rtc_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ticks_sub",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "a",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "b",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_windowed_compare_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "abs_value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "safe_window",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_overflow_enable",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "irq_enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_overflow_disable",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_overflow_pending",
    "return_type": "bool",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_tick_enable",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "irq_enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_tick_disable",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_tick_pending",
    "return_type": "bool",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_compare_enable",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "irq_enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_compare_disable",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_compare_pending",
    "return_type": "bool",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_compare_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_irq_trigger",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "drv_rtc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_rtc_0_irq_handler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_rtc_1_irq_handler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "drv_rtc_rtc_2_irq_handler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ds1624_config_read",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ds1624_init",
    "return_type": "bool",
    "params": [
      {
        "name": "device_address",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ds1624_start_temp_conversion",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ds1624_is_temp_conversion_done",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ds1624_temp_read",
    "return_type": "bool",
    "params": [
      {
        "name": "temperature_in_celcius",
        "type": "int8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "temperature_fraction",
        "type": "int8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uart_init",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_comm_params",
        "type": "app_uart_stream_comm_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dtm_start",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "uart_comm_params",
        "type": "app_uart_stream_comm_params_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ecc_rng",
    "return_type": "static int",
    "params": [
      {
        "name": "dest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "unsigned",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ecc_init",
    "return_type": "void",
    "params": [
      {
        "name": "rng",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ecc_p256_keypair_gen",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_le_sk",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_le_pk",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ecc_p256_public_key_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_le_sk",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_le_pk",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ecc_p256_shared_secret_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_le_sk",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_le_pk",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_le_ss",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ecc_p256_sign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_le_sk",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_le_hash",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "hlen",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_le_sig",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ecc_p256_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_le_pk",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_le_hash",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "hlen",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_le_sig",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "invoke_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "evt",
        "type": "es_adv_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adv_start",
    "return_type": "static void",
    "params": [
      {
        "name": "p_adv_params",
        "type": "ble_gap_adv_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "get_adv_params",
    "return_type": "static void",
    "params": [
      {
        "name": "p_adv_params",
        "type": "ble_gap_adv_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "non_connectable",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "remain_connectable",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "connectable_adv_start",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_stop",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_restart",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_timing_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt",
        "type": "const es_adv_timing_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_start_connectable_adv",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_start_non_connctable_adv",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_remain_connectable_set",
    "return_type": "void",
    "params": [
      {
        "name": "remain_connectable",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_remain_connectable_get",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_interval_set",
    "return_type": "void",
    "params": [
      {
        "name": "interval",
        "type": "nrf_ble_escs_adv_interval_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_interval_get",
    "return_type": "nrf_ble_escs_adv_interval_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_init",
    "return_type": "void",
    "params": [
      {
        "name": "ecs_uuid_type",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "adv_event_handler",
        "type": "es_adv_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "adv_interval",
        "type": "nrf_ble_escs_adv_interval_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "remain_connectable",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adv_handle",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_timers_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "fill_adv_data",
    "return_type": "static void",
    "params": [
      {
        "name": "p_scrsp_data",
        "type": "ble_advdata_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_es_data_array",
        "type": "uint8_array_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_adv_data",
        "type": "ble_gap_adv_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_frame_fill_connectable_adv_data",
    "return_type": "void",
    "params": [
      {
        "name": "p_scrsp_data",
        "type": "ble_advdata_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_adv_data",
        "type": "ble_gap_adv_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_frame_fill_non_connectable_adv_data",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "etlm",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_data",
        "type": "ble_gap_adv_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "frame_to_adv_is_tlm",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_evt",
        "type": "const es_adv_timing_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "tlm_should_be_advertised",
    "return_type": "static bool",
    "params": [
      {
        "name": "adv_event_cnt",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_slot_timeout",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_interval_timeout",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_timing_timers_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_timing_set",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_timing_start",
    "return_type": "void",
    "params": [
      {
        "name": "adv_interval",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_timing_stop",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_adv_timing_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_handler",
        "type": "es_adv_timing_callback_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "get_adv_delay",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "adv_interval",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "num_slots_configured",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "eTLM_required",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "is_eid",
    "return_type": "static bool",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_eid_slots_configured",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "num_eid_slots_configured",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_adv_timing_resolve",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_input",
        "type": "es_adv_timing_resolver_input_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "saadc_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt",
        "type": "nrf_drv_saadc_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_battery_voltage_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_battery_voltage_get",
    "return_type": "void",
    "params": [
      {
        "name": "p_vbatt",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_gc_event",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_cb",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt",
        "type": "fds_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "access_flash_data",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_params",
        "type": "const flash_access_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_flash_access_lock_key",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_lock_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "access_type",
        "type": "es_flash_access_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_flash_access_beacon_config",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_config",
        "type": "es_flash_beacon_config_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "access_type",
        "type": "es_flash_access_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_flash_access_slot_configs",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_slot",
        "type": "es_slot_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "access_type",
        "type": "es_flash_access_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_flash_access_flags",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_flags",
        "type": "es_flash_flags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "access_type",
        "type": "es_flash_access_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_flash_factory_reset",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_flash_num_pending_ops",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_flash_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_flash_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_beacon_unlocked",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_escs",
        "type": "const nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_gatts_send_reply",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_reply",
        "type": "ble_gatts_rw_authorize_reply_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_gatts_send_op_not_permitted",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "read",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_gatts_handle_write",
    "return_type": "void",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "uuid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "val_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_gatts_handle_read",
    "return_type": "void",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "uuid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "val_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_gatts_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ble_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "send_read_reply",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_reply",
        "type": "ble_gatts_rw_authorize_reply_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "read_value",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_value",
        "type": "const void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "read_from_gattdb",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "val_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "read_adv_slot",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "active_slot",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_reg",
        "type": "const es_slot_reg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_gatts_read_handle_locked_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "uuid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_gatts_read_handle_unlock",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_gatts_read_handle_unlocked_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "uuid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "val_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "active_slot",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "send_write_reply",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_reply",
        "type": "ble_gatts_rw_authorize_reply_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "length_is_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_gatts_write_handle_unlocked_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "uuid",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "val_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "active_slot",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_gatts_write_handle_unlock",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "val_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "temp_key_generate",
    "return_type": "static void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "eid_generate",
    "return_type": "static void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "check_rollovers_and_update_eid",
    "return_type": "static void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lock_code_init",
    "return_type": "static void",
    "params": [
      {
        "name": "p_lock_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_update_time",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_eid_slots_restore",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "k_scaler",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "time_counter",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ik",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_lock_code_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ecrypted_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_unlock_prepare",
    "return_type": "void",
    "params": [
      {
        "name": "p_challenge",
        "type": "uint8_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_unlock_verify",
    "return_type": "void",
    "params": [
      {
        "name": "p_unlock_token",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_random_challenge_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_rand_chlg_buff",
        "type": "uint8_t *",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-90A: Random number generation. Use approved DRBG or on-chip TRNG; never reuse nonces.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "nrf_crypto_rng_vector_generate",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_rand_chlg_buff",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "ESCS_AES_KEY_SIZE",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_shared_ik_receive",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encrypted_ik",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "scaler_k",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "es_security_client_pub_ecdh_receive",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pub_ecdh",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "scaler_k",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "es_security_pub_ecdh_get",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_edch_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "es_security_clock_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_eid_slot_destroy",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_scaler_get",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_eid_get",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_eid_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_encrypted_eid_id_key_get",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key_buffer",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_plain_eid_id_key_get",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key_buffer",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_tlm_to_etlm",
    "return_type": "void",
    "params": [
      {
        "name": "ik_slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_tlm",
        "type": "es_tlm_frame_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_etlm",
        "type": "es_etlm_frame_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_security_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "security_callback",
        "type": "es_security_msg_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "slot_boundary_check",
    "return_type": "static void",
    "params": [
      {
        "name": "p_slot",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "load_slot_from_flash",
    "return_type": "static void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_ranging_data_for_slot",
    "return_type": "static void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_power",
        "type": "nrf_ble_escs_radio_tx_pwr_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "configure_slot",
    "return_type": "static void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_frame_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "configure_eid_slot",
    "return_type": "static void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_frame_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_write_to_flash",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_radio_tx_pwr_set",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "radio_tx_pwr",
        "type": "nrf_ble_escs_radio_tx_pwr_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_set_adv_custom_tx_power",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_pwr",
        "type": "nrf_ble_escs_adv_tx_pwr_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_slot_on_write",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_frame_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_encrypted_eid_id_key_set",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_eid_id_key",
        "type": "nrf_ble_escs_eid_id_key_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_eid_ready",
    "return_type": "void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "slot_is_eid",
    "return_type": "static bool",
    "params": [
      {
        "name": "eid_slot_no",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_tlm_update",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_etlm_update",
    "return_type": "void",
    "params": [
      {
        "name": "eid_slot_no",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slots_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_default_slot",
        "type": "const es_slot_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_tlm_configured_on_clearing",
    "return_type": "static void",
    "params": [
      {
        "name": "p_reg",
        "type": "es_slot_reg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "configured_slots_on_clear_update",
    "return_type": "static void",
    "params": [
      {
        "name": "p_configured",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_num_configured_slots",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_reg_etlm_required",
    "return_type": "bool",
    "params": [
      {
        "name": "p_reg",
        "type": "const es_slot_reg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_reg_clear_slot",
    "return_type": "bool",
    "params": [
      {
        "name": "p_reg",
        "type": "es_slot_reg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_reg_update_slot_list_info_on_add",
    "return_type": "void",
    "params": [
      {
        "name": "p_reg",
        "type": "es_slot_reg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "frame_type",
        "type": "es_frame_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "init",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_slot_reg_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_reg",
        "type": "es_slot_reg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_stopwatch_check",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "id",
        "type": "es_stopwatch_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_stopwatch_create",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_sw_id",
        "type": "es_stopwatch_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ticks_wrap",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_stopwatch_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_time",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_temp",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_vbatt",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_adv_cnt",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_tlm_tlm_get",
    "return_type": "void",
    "params": [
      {
        "name": "p_tlm_frame",
        "type": "es_tlm_frame_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "es_tlm_adv_cnt_inc",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "es_tlm_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fs_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "evt",
        "type": "nrf_fstorage_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "event_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt",
        "type": "fds_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "event_prepare",
    "return_type": "static void",
    "params": [
      {
        "name": "p_op",
        "type": "fds_op_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "fds_evt_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "header_has_next",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_hdr",
        "type": "fds_header_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_page_end",
        "type": "uint32_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "header_check",
    "return_type": "static fds_header_status_t",
    "params": [
      {
        "name": "p_hdr",
        "type": "fds_header_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_page_end",
        "type": "uint32_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "address_is_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_addr",
        "type": "uint32_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_identify",
    "return_type": "static fds_page_type_t",
    "params": [
      {
        "name": "p_page_addr",
        "type": "uint32_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_can_tag",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_page_addr",
        "type": "uint32_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_has_space",
    "return_type": "static bool",
    "params": [
      {
        "name": "page",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "length_words",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_from_record",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_page",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec",
        "type": "uint32_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_scan",
    "return_type": "static void",
    "params": [
      {
        "name": "p_addr",
        "type": "uint32_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "words_written",
        "type": "uint16_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "can_gc",
        "type": "bool           * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "page_offsets_update",
    "return_type": "static void",
    "params": [
      {
        "name": "p_page",
        "type": "fds_page_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_op",
        "type": "fds_op_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_tag_write_swap",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "page_tag_write_data",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_page_addr",
        "type": "uint32_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_space_reserve",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "length_words",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_page",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_space_free",
    "return_type": "static void",
    "params": [
      {
        "name": "length_words",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "page",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_id_new",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_find_next",
    "return_type": "static bool",
    "params": [
      {
        "name": "page",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_record",
        "type": "uint32_t const **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_find_by_desc",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_page",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "record_find",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_file_id",
        "type": "uint16_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_record_key",
        "type": "uint16_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_desc",
        "type": "fds_record_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_token",
        "type": "fds_find_token_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "records_stat",
    "return_type": "static void",
    "params": [
      {
        "name": "page",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_valid_records",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_dirty_records",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_freeable_words",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_corruption",
        "type": "bool *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queue_buf_store",
    "return_type": "static void",
    "params": [
      {
        "name": "p_iput_ctx",
        "type": "nrf_atfifo_item_put_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queue_free",
    "return_type": "static void",
    "params": [
      {
        "name": "p_iget_ctx",
        "type": "nrf_atfifo_item_get_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queue_has_next",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pages_init",
    "return_type": "static fds_init_opts_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_header_write_begin",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_op",
        "type": "fds_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_addr",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_header_write_id",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_op",
        "type": "fds_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_addr",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_header_write_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_op",
        "type": "fds_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_addr",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_header_flag_dirty",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_record",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "page_to_gc",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_find_and_delete",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_op",
        "type": "fds_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "file_find_and_delete",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_op",
        "type": "fds_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_write_data",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_op",
        "type": "fds_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_addr",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crc_verify_success",
    "return_type": "static bool",
    "params": [
      {
        "name": "crc",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "len_words",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint32_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_page_next",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_next_page",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_swap_erase",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_page_erase",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_record_copy",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_record_find_next",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_swap_promote",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_tag_new_swap",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_next_page",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_update_swap_offset",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_swap_pages",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gc_state_advance",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "init_execute",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "prev_ret",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_op",
        "type": "fds_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "write_execute",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "prev_ret",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_op",
        "type": "fds_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "delete_execute",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "prev_ret",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_op",
        "type": "fds_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "gc_execute",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "prev_ret",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "queue_process",
    "return_type": "static void",
    "params": [
      {
        "name": "result",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queue_start",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_enqueue",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t         * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_record",
        "type": "fds_record_t        const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_tok",
        "type": "fds_reserve_token_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "op_code",
        "type": "fds_op_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_register",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "cb",
        "type": "fds_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flash_end_addr",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flash_bounds_set",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flash_subsystem_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "queue_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_open",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_flash_rec",
        "type": "fds_flash_record_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_close",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_reserve",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_tok",
        "type": "fds_reserve_token_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length_words",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_reserve_cancel",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_tok",
        "type": "fds_reserve_token_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_record",
        "type": "fds_record_t      const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_write_reserved",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t         * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_record",
        "type": "fds_record_t        const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_tok",
        "type": "fds_reserve_token_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_record",
        "type": "fds_record_t      const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_delete",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_file_delete",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "file_id",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_gc",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_iterate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_token",
        "type": "fds_find_token_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_find",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "file_id",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "record_key",
        "type": "uint16_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_desc",
        "type": "fds_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_token",
        "type": "fds_find_token_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_find_by_key",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "record_key",
        "type": "uint16_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_desc",
        "type": "fds_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_token",
        "type": "fds_find_token_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_record_find_in_file",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "file_id",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_desc",
        "type": "fds_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_token",
        "type": "fds_find_token_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_descriptor_from_rec_id",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "record_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "fds_record_id_from_desc",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_desc",
        "type": "fds_record_desc_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_record_id",
        "type": "uint32_t                * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "fds_stat",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_stat",
        "type": "fds_stat_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_gscm_evt_handler",
    "return_type": "extern void",
    "params": [
      {
        "name": "p_gcm_evt",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "internal_state_reset",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "evt_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gscm_evt",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "service_changed_pending_set",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gscm_pdb_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gscm_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gscm_local_db_cache_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gscm_local_db_cache_apply",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gscm_local_database_has_changed",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gscm_service_changed_ind_needed",
    "return_type": "bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gscm_service_changed_ind_send",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gscm_db_change_notification_done",
    "return_type": "void",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_gcm_evt_handler",
    "return_type": "extern void",
    "params": [
      {
        "name": "p_gcm_evt",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cccd_written",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_write_evt",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "send_unexpected_error",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "err_code",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "local_db_apply_in_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "local_db_update",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "update",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "local_db_update_in_evt",
    "return_type": "static bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "service_changed_cccd",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cccd",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "service_changed_send_in_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "apply_pending_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "apply_pending_flags_check",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "db_update_pending_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sc_send_pending_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "service_changed_pending_flags_check",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "service_changed_needed",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "car_update_pending_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "car_update_needed",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_pending_flags_check",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gcm_im_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gcm_pdb_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gcm_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "store_car_value",
    "return_type": "void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "car_value",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gcm_ble_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gcm_local_db_cache_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gcm_local_database_has_changed",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HardFault_process",
    "return_type": "__WEAK void",
    "params": [
      {
        "name": "p_stack",
        "type": "HardFault_stack_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_mem_pool_open",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_mem_pool_close",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_mem_pool_tx_alloc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_buffer",
        "type": "void **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_mem_pool_tx_free",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_mem_pool_rx_produce",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_buffer",
        "type": "void **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_mem_pool_rx_consume",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_mem_pool_rx_data_size_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_mem_pool_rx_extract",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_buffer",
        "type": "uint8_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_rx_byte_default",
    "return_type": "static void",
    "params": [
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_rx_byte_wait_start",
    "return_type": "static void",
    "params": [
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_rx_byte_esc",
    "return_type": "static void",
    "params": [
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "send_tx_byte_default",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "send_tx_byte_esc",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "send_tx_byte_encoded",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "send_tx_byte_end",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "transmit_buffer",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_slip_end",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_buffer_overflowed",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "slip_uart_eventhandler",
    "return_type": "static void",
    "params": [
      {
        "name": "uart_event",
        "type": "app_uart_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "slip_uart_open",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_slip_evt_handler_register",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "event_handler",
        "type": "hci_slip_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_slip_open",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_slip_close",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_slip_write",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_slip_rx_buffer_register",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_sm_state_change",
    "return_type": "static void",
    "params": [
      {
        "name": "new_state",
        "type": "tx_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_rx_pkt_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_number_expected_get",
    "return_type": "static __INLINE uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "header_checksum_calculate",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_hdr",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ack_transmit",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_seq_nmbr_extract",
    "return_type": "static __INLINE uint8_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_number_expected_inc",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_type_decode",
    "return_type": "static __INLINE uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_vendor_specific_pkt_type_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_number_to_transmit_get",
    "return_type": "static __INLINE uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "expected_ack_number_get",
    "return_type": "static __INLINE uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_ack_pkt_type_handle",
    "return_type": "static __INLINE bool",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_number_tx_inc",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_sm_event_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "tx_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "slip_event_handle",
    "return_type": "void",
    "params": [
      {
        "name": "event",
        "type": "hci_slip_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_evt_handler_reg",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "event_handler",
        "type": "hci_transport_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_tx_done_register",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "event_handler",
        "type": "hci_transport_tx_done_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_timeout_handle",
    "return_type": "void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_open",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_close",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_tx_alloc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_memory",
        "type": "uint8_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_tx_free",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_packet_byte_zero_construct",
    "return_type": "static __INLINE uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pkt_write_handle",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_pkt_write",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_rx_pkt_extract",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_buffer",
        "type": "uint8_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_transport_rx_pkt_consume",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_init_cb",
    "return_type": "static void",
    "params": [
      {
        "name": "result",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_register_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_avg_cfg",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "temp_avg",
        "type": "hts221_temp_avg_samples_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "hum_avg",
        "type": "hts221_hum_avg_samples_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HTS221_WRITE",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_instance",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "send_msg",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_data_rate_cfg",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "odr",
        "type": "hts221_odr_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_pd_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_boot",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_heater_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_oneshot",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_drdy_pin_cfg",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "active_low",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "drdy_enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_temp_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "user_callback",
        "type": "hts221_data_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_temp",
        "type": "int16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_temp_process",
    "return_type": "int16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "raw_temp",
        "type": "int16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_hum_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "user_callback",
        "type": "hts221_data_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_hum",
        "type": "int16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hts221_hum_process",
    "return_type": "int16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "hts221_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "raw_hum",
        "type": "int16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_im_evt_handler",
    "return_type": "extern void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_valid_irk",
    "return_type": "bool",
    "params": [
      {
        "name": "p_irk",
        "type": "ble_gap_irk_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "addr_compare",
    "return_type": "bool",
    "params": [
      {
        "name": "p_addr1",
        "type": "ble_gap_addr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_addr2",
        "type": "ble_gap_addr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_ble_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_is_duplicate_bonding_data",
    "return_type": "bool",
    "params": [
      {
        "name": "p_bonding_data1",
        "type": "pm_peer_data_bonding_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_bonding_data2",
        "type": "pm_peer_data_bonding_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "im_find_duplicate_bonding_data",
    "return_type": "pm_peer_id_t",
    "params": [
      {
        "name": "p_bonding_data",
        "type": "pm_peer_data_bonding_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "peer_id_skip",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "im_peer_id_get_by_conn_handle",
    "return_type": "pm_peer_id_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_ble_addr_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ble_addr",
        "type": "ble_gap_addr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_master_ids_compare",
    "return_type": "bool",
    "params": [
      {
        "name": "p_master_id1",
        "type": "ble_gap_master_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_master_id2",
        "type": "ble_gap_master_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_peer_id_get_by_master_id",
    "return_type": "pm_peer_id_t",
    "params": [
      {
        "name": "p_master_id",
        "type": "ble_gap_master_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_conn_handle_get",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_master_id_is_valid",
    "return_type": "bool",
    "params": [
      {
        "name": "p_master_id",
        "type": "ble_gap_master_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_new_peer_id",
    "return_type": "void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_peer_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peers_id_keys_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_peers",
        "type": "pm_peer_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "peer_cnt",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gap_addrs",
        "type": "ble_gap_addr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_addr_cnt",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_gap_irks",
        "type": "ble_gap_irk_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_irk_cnt",
        "type": "uint32_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_device_identities_list_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_peers",
        "type": "pm_peer_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "peer_cnt",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ble_gap_device_identities_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "0",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "im_id_addr_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ble_gap_addr_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_addr",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "im_id_addr_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ble_gap_addr_get",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_addr",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "im_privacy_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_privacy_params",
        "type": "pm_privacy_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ble_gap_privacy_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_privacy_params",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "im_privacy_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_privacy_params",
        "type": "pm_privacy_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ble_gap_privacy_get",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_privacy_params",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "im_whitelist_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_addrs",
        "type": "ble_gap_addr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_addr_cnt",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_irks",
        "type": "ble_gap_irk_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_irk_cnt",
        "type": "uint32_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "im_whitelist_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_peers",
        "type": "pm_peer_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "peer_cnt",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sd_ble_gap_whitelist_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "0",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ah",
    "return_type": "void",
    "params": [
      {
        "name": "p_k",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_r",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_local_hash",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "im_address_resolve",
    "return_type": "bool",
    "params": [
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_irk",
        "type": "ble_gap_irk_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "spi_write",
    "return_type": "static inline void",
    "params": [
      {
        "name": "data",
        "type": "const void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_command",
    "return_type": "static inline void",
    "params": [
      {
        "name": "c",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_data",
    "return_type": "static inline void",
    "params": [
      {
        "name": "c",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_addr_window",
    "return_type": "static void",
    "params": [
      {
        "name": "x_0",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y_0",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "x_1",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y_1",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "command_list",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hardware_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ili9341_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ili9341_uninit",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ili9341_pixel_draw",
    "return_type": "static void",
    "params": [
      {
        "name": "x",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ili9341_rect_draw",
    "return_type": "static void",
    "params": [
      {
        "name": "x",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "width",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "height",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ili9341_dummy_display",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ili9341_rotation_set",
    "return_type": "static void",
    "params": [
      {
        "name": "rotation",
        "type": "nrf_lcd_rotation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ili9341_display_invert",
    "return_type": "static void",
    "params": [
      {
        "name": "invert",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "led_softblink_on_timeout",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "led_softblink_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_init_params",
        "type": "led_sb_init_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "led_softblink_start",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "leds_pin_bit_mask",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "led_softblink_stop",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "led_softblink_off_time_set",
    "return_type": "void",
    "params": [
      {
        "name": "off_time_ticks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "led_softblink_on_time_set",
    "return_type": "void",
    "params": [
      {
        "name": "on_time_ticks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "led_softblink_uninit",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lis2dh12_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "lis2dh12_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lis2dh12_cfg_commit",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_inst",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lis2dh12_data_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "lis2dh12_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "user_cb",
        "type": "lis2dh12_data_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "lis2dh12_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "samples",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lis2dh12_temp_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "lis2dh12_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "temp_en",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lis2dh12_temp_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_inst",
        "type": "lis2dh12_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "user_cb",
        "type": "lis2dh12_temp_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_temp",
        "type": "int16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pin_on",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_pwm_instance",
        "type": "low_power_pwm_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pin_off",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_pwm_instance",
        "type": "low_power_pwm_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwm_timeout_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "low_power_pwm_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_pwm_instance",
        "type": "low_power_pwm_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pwm_config",
        "type": "low_power_pwm_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "handler",
        "type": "app_timer_timeout_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "low_power_pwm_start",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_pwm_instance",
        "type": "low_power_pwm_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pin_bit_mask",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "low_power_pwm_stop",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_pwm_instance",
        "type": "low_power_pwm_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "low_power_pwm_duty_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_pwm_instance",
        "type": "low_power_pwm_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "duty_cycle",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_autorifp_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_autozero_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_data_rate_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "odr",
        "type": "lps22hb_odr_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_data_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "user_callback",
        "type": "lps22hb_data_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_out_data",
        "type": "lps22hb_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "samples",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_data_decode",
    "return_type": "void",
    "params": [
      {
        "name": "p_data",
        "type": "lps22hb_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "samples",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_threshold_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "thr",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_ref_pressure_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pressure",
        "type": "int32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_offset_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "int16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_cfg_commit",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_sw_reset",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_boot",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_oneshot",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lps22hb_low_power_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "lps22hb_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "max9850_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_max9850",
        "type": "max9850_config_t const *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_cmac_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_cmac_ctx",
        "type": "nrf_crypto_backend_aes_cmac_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "nrf_crypto_operation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_key_set",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_iv_set",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_iv",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_iv_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_iv",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_ecb_crypt",
    "return_type": "static int",
    "params": [
      {
        "name": "p_ctx",
        "type": "nrf_crypto_backend_aes_ecb_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_text_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_text_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "text_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_cbc_mac_update",
    "return_type": "static int",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_cbc_mac_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_cbc_mac_padding_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_update",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_cmac_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_padding_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_mbedtls_ccm_crypt",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "nrf_crypto_operation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_nonce",
        "type": "uint8_t *",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "LOW"
      },
      {
        "name": "nonce_size",
        "type": "uint8_t",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adata",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "adata_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_in_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_mac",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mac_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "backend_mbedtls_gcm_crypt",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "nrf_crypto_operation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_nonce",
        "type": "uint8_t *",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "LOW"
      },
      {
        "name": "nonce_size",
        "type": "uint8_t",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adata",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "adata_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_in_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_mac",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mac_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_ecc_group_load",
    "return_type": "bool",
    "params": [
      {
        "name": "p_group",
        "type": "mbedtls_ecp_group *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "struct nrf_crypto_ecc_curve_info_s const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_ecc_mbedtls_rng",
    "return_type": "int",
    "params": [
      {
        "name": "p_param",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "unsigned char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_public_key_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_private_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_private_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_public_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_public_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_private_key_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_public_key_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_ecdh_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_shared_secret",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_sign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_mbedtls_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mbedtls_backend_hash_sha256_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hash_sha256_update",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_context",
        "type": "void     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hash_sha256_finalize",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_context",
        "type": "void       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t     * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hash_sha512_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hash_sha512_update",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hash_sha512_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t   * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hmac_init_sha256",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key_size",
        "type": "size_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hmac_update_sha256",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hmac_finalize_sha256",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_size",
        "type": "size_t   * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hmac_init_sha512",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key_size",
        "type": "size_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hmac_update_sha512",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_hmac_finalize_sha512",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_size",
        "type": "size_t   * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mbedtls_backend_free",
    "return_type": "static void",
    "params": [
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mbedtls_backend_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mbedtls_backend_uninit",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "nrf_drv_twi_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_pins_config",
        "type": "mcp4725_pins_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mcp4725_setup",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_pins_config",
        "type": "mcp4725_pins_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mcp4725_set_voltage",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "val",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "write_eeprom",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mcp4725_is_busy",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_block_coordinates",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "block_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_x",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_y",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_block_cat",
    "return_type": "static __INLINE uint32_t",
    "params": [
      {
        "name": "size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "block_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_init",
    "return_type": "static void",
    "params": [
      {
        "name": "block_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_block_size",
    "return_type": "static __INLINE uint32_t",
    "params": [
      {
        "name": "block_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_block_free",
    "return_type": "static bool",
    "params": [
      {
        "name": "block_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_allocate",
    "return_type": "static void",
    "params": [
      {
        "name": "block_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mem_init",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MM_MUTEX_UNLOCK",
    "return_type": "NRF_MEM_MANAGER_DIAGNOSE",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mem_reserve",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_buffer",
        "type": "uint8_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_size",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_free",
    "return_type": "void",
    "params": [
      {
        "name": "p_mem",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "print_block_info",
    "return_type": "void",
    "params": [
      {
        "name": "block_cat",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_mem_in_use",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mem_diagnose",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mem_diagnose_reset",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_rng_callback",
    "return_type": "int",
    "params": [
      {
        "name": "dest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "unsigned",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_curve_get",
    "return_type": "uECC_Curve",
    "params": [
      {
        "name": "p_key",
        "type": "nrf_crypto_backend_micro_ecc_common_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_public_key_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_private_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_private_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_public_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_public_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_ecdh_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_shared_secret",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_sign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_micro_ecc_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mpu6050_init",
    "return_type": "bool",
    "params": [
      {
        "name": "device_address",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mpu6050_verify_product_id",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mpu6050_register_write",
    "return_type": "bool",
    "params": [
      {
        "name": "register_address",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mpu6050_register_read",
    "return_type": "bool",
    "params": [
      {
        "name": "register_address",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "destination",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "number_of_bytes",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ac_rec_payload_size_get",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_ac_rec_payload_desc",
        "type": "nfc_ac_rec_payload_desc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ac_rec_payload_constructor",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_nfc_rec_ac_payload_desc",
        "type": "nfc_ac_rec_payload_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ac_rec_auxiliary_data_ref_clear",
    "return_type": "void",
    "params": [
      {
        "name": "p_ac_rec",
        "type": "nfc_ndef_record_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ac_rec_auxiliary_data_ref_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ac_rec",
        "type": "nfc_ndef_record_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_aux_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "aux_length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ac_rec_reference_field_parse",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "pp_buff",
        "type": "uint8_t                    ** const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t                   *  const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ref_field",
        "type": "nfc_ac_rec_data_ref_t      *  const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ac_payload_parse",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t                   * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ac_rec_payload_data",
        "type": "nfc_ac_rec_payload_desc_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ac_rec_parse",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_rec_desc",
        "type": "nfc_ndef_record_desc_t    const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ac_rec_payload_data",
        "type": "nfc_ac_rec_payload_desc_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sec_mgr_oob_flags_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "oob_flags",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "tk_value_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_tk_value",
        "type": "ble_advdata_tk_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lesc_value_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_lesc_value",
        "type": "ble_gap_lesc_oob_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "le_role_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "le_role",
        "type": "ble_advdata_le_role_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "max_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ble_oob_name_size_calc",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_advdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t            * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_oob_adv_data_size_calc",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_advdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t            * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_oob_adv_data_check",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "advdata",
        "type": "ble_advdata_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_oob_adv_data_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_advdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_encoded_data",
        "type": "uint8_t             * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t            * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_tk_value_payload_encode",
    "return_type": "void",
    "params": [
      {
        "name": "p_tk_value",
        "type": "ble_advdata_tk_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_tk_payload_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flags_decode",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_flags_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_oob_data_printout",
    "return_type": "void",
    "params": [
      {
        "name": "p_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "name_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_name_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "short_name_decode",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_short_name_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "full_name_decode",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_full_name_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tk_value_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_tk_value_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lesc_confirm_value_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_lesc_confirm_value_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lesc_random_value_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_lesc_random_value_data",
        "type": "uint8_t const *",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-90A: Random number generation. Use approved DRBG or on-chip TRNG; never reuse nonces.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "sec_mgr_oob_flags_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_sec_mgr_oob_flags_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "appearance_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_appearance_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_device_addr_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_dev_addr_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "le_role_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_le_role_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "field_length_validate",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "field_length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "field_type_validate",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "ad_type_counter",
        "type": "ad_type_counter_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ble_oob_advdata_parse",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_advdata",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "random_vector_generate",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-90A: Random number generation. Use approved DRBG or on-chip TRNG; never reuse nonces.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "random_vector_log",
    "return_type": "static void",
    "params": [
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-90A: Random number generation. Use approved DRBG or on-chip TRNG; never reuse nonces.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "nfc_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "nfc_t2t_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_secure_mode_set",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "mode",
        "type": "nfc_pairing_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ble_pair_data_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "mode",
        "type": "nfc_pairing_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_pair_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_advertising",
        "type": "ble_advertising_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "nfc_pairing_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_pair_mode_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "mode",
        "type": "nfc_pairing_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_pair_mode_get",
    "return_type": "nfc_pairing_mode_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "generate_lesc_keys",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ble_pair_on_pm_params_req",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_evt",
        "type": "pm_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_tk_group_modifier_config",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "pp_tk_group",
        "type": "uint8_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "max_group_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "common_adv_data_create",
    "return_type": "static void",
    "params": [
      {
        "name": "p_tk_value",
        "type": "ble_advdata_tk_value_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lesc_data",
        "type": "ble_gap_lesc_oob_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_adv_data",
        "type": "ble_advdata_t           * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "le_oob_specific_adv_data_create",
    "return_type": "static void",
    "params": [
      {
        "name": "p_tk_value",
        "type": "ble_advdata_tk_value_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lesc_data",
        "type": "ble_gap_lesc_oob_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_le_adv_data",
        "type": "ble_advdata_t           * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ep_oob_specific_adv_data_create",
    "return_type": "static void",
    "params": [
      {
        "name": "p_tk_value",
        "type": "ble_advdata_tk_value_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lesc_data",
        "type": "ble_gap_lesc_oob_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_ep_adv_data",
        "type": "ble_advdata_t           * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_simplified_le_oob_msg_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_le_advdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_simplified_ep_oob_msg_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ep_advdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_full_handover_select_msg_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_le_advdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_ep_advdata",
        "type": "ble_advdata_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ble_pair_default_msg_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "nfc_ble_pair_type",
        "type": "nfc_ble_pair_type_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tk_value",
        "type": "ble_advdata_tk_value_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lesc_data",
        "type": "ble_gap_lesc_oob_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ble_pair_msg_updatable_tk_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "nfc_ble_pair_type",
        "type": "nfc_ble_pair_type_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tk_value",
        "type": "ble_advdata_tk_value_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lesc_data",
        "type": "ble_gap_lesc_oob_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_tk_group",
        "type": "uint8_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "max_group_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_tk_group_modifier_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_tk_value",
        "type": "ble_advdata_tk_value_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_tk_to_group_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_tk_location",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_lesc_pos_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_confirm",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_random",
        "type": "uint8_t *",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_lesc_data_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ble_lesc_oob_data",
        "type": "ble_gap_lesc_oob_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ep_oob_adv_data_check",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_ble_advdata",
        "type": "ble_advdata_t const *  const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ep_oob_bluetooth_device_address_encode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_ep_oob_payload_constructor",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ble_advdata",
        "type": "ble_advdata_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_hs_rec_payload_constructor",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_nfc_hs_rec_payload_desc",
        "type": "nfc_hs_rec_payload_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_hs_rec_local_record_clear",
    "return_type": "void",
    "params": [
      {
        "name": "p_hs_rec",
        "type": "nfc_ndef_record_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_hs_rec_local_record_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_hs_rec",
        "type": "nfc_ndef_record_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_local_rec",
        "type": "nfc_ndef_record_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_launchapp_msg_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_android_package_name",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "android_package_name_length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_win_app_id",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "win_app_id_length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_win_launchapp_payload_constructor",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_input",
        "type": "win_launchapp_payload_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_le_oob_adv_data_check",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_ble_advdata",
        "type": "ble_advdata_t const *  const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_le_oob_payload_constructor",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ble_advdata",
        "type": "ble_advdata_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_le_oob_payload_parse",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t                   * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_nfc_ble_oob_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nfc_le_oob_rec_parse",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_rec_desc",
        "type": "nfc_ndef_record_desc_t     const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_nfc_ble_oob_pairing_data",
        "type": "nfc_ble_oob_pairing_data_t       * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "record_location_get",
    "return_type": "__STATIC_INLINE nfc_ndef_record_location_t",
    "params": [
      {
        "name": "index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "record_count",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ndef_msg_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ndef_msg_desc",
        "type": "nfc_ndef_msg_desc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msg_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_msg_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ndef_msg_clear",
    "return_type": "void",
    "params": [
      {
        "name": "p_msg",
        "type": "nfc_ndef_msg_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ndef_msg_parser",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_result_buf",
        "type": "uint8_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_result_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_nfc_data",
        "type": "uint8_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_nfc_data_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ndef_msg_printout",
    "return_type": "void",
    "params": [
      {
        "name": "p_msg_desc",
        "type": "nfc_ndef_msg_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "internal_ndef_msg_parser",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_parser_memo_desc",
        "type": "nfc_ndef_parser_memo_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_nfc_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_nfc_data_len",
        "type": "uint32_t                    * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ndef_parser_memo_resolve",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_result_buf",
        "type": "uint8_t                     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_result_buf_len",
        "type": "uint32_t                    * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_parser_memo_desc",
        "type": "nfc_ndef_parser_memo_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "record_header_size_calc",
    "return_type": "__STATIC_INLINE uint32_t",
    "params": [
      {
        "name": "p_ndef_record_desc",
        "type": "nfc_ndef_record_desc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ndef_record_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ndef_record_desc",
        "type": "nfc_ndef_record_desc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "record_location",
        "type": "nfc_ndef_record_location_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_record_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_record_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_ndef_bin_payload_memcopy",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_payload_descriptor",
        "type": "nfc_ndef_bin_payload_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ndef_record_parser",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_bin_pay_desc",
        "type": "nfc_ndef_bin_payload_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec_desc",
        "type": "nfc_ndef_record_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_record_location",
        "type": "nfc_ndef_record_location_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_nfc_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_nfc_data_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ndef_record_printout",
    "return_type": "void",
    "params": [
      {
        "name": "num",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec_desc",
        "type": "nfc_ndef_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "clock_event_handler",
    "return_type": "static inline void",
    "params": [
      {
        "name": "event",
        "type": "nrf_drv_clock_evt_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_platform_setup",
    "return_type": "nrfx_err_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_platform_event_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_event",
        "type": "nrfx_nfct_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_tlv_block_insert",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_tlv_block",
        "type": "tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tlv_block_is_data_length_correct",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_block_to_check",
        "type": "tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_is_end_reached",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_is_version_supported",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_is_field_within_data_range",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "field_length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_type_extract",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_t_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tlv_buf",
        "type": "tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_length_extract",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_l_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tlv_buf",
        "type": "tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_value_ptr_extract",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_v_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tlv_buf",
        "type": "tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_tlv_block_extract",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_tlv_buf",
        "type": "tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_is_bcc_correct",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_sn",
        "type": "type_2_tag_serial_number_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_internal_parse",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_cc_parse",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_tlv_parse",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_tlv_offset",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_clear",
    "return_type": "void",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_parse",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "type_2_tag_printout",
    "return_type": "void",
    "params": [
      {
        "name": "p_type_2_tag",
        "type": "type_2_tag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_comm_apdu_size_calc",
    "return_type": "__STATIC_INLINE uint16_t",
    "params": [
      {
        "name": "p_cmd_apdu",
        "type": "nfc_t4t_comm_apdu_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_comm_apdu_args_validate",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_cmd_apdu",
        "type": "nfc_t4t_comm_apdu_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t                  * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_comm_apdu_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cmd_apdu",
        "type": "nfc_t4t_comm_apdu_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t                  * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_resp_apdu_args_validate",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_resp_apdu",
        "type": "nfc_t4t_resp_apdu_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t             const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_resp_apdu_decode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_resp_apdu",
        "type": "nfc_t4t_resp_apdu_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t       const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_resp_apdu_printout",
    "return_type": "void",
    "params": [
      {
        "name": "p_resp_apdu",
        "type": "nfc_t4t_resp_apdu_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_cc_args_validate",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_t4t_cc_file",
        "type": "nfc_t4t_capability_container_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_cc_file_validate",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_t4t_cc_file",
        "type": "nfc_t4t_capability_container_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_cc_file_clear",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_t4t_cc_file",
        "type": "nfc_t4t_capability_container_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_tlv_block_insert",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_t4t_cc_file",
        "type": "nfc_t4t_capability_container_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_tlv_block",
        "type": "nfc_t4t_tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_cc_file_parse",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_t4t_cc_file",
        "type": "nfc_t4t_capability_container_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_file_content_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_t4t_cc_file",
        "type": "nfc_t4t_capability_container_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "file",
        "type": "nfc_t4t_file_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "file_id",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_cc_file_printout",
    "return_type": "void",
    "params": [
      {
        "name": "p_t4t_cc_file",
        "type": "nfc_t4t_capability_container_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_apdu_exchange",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_capdu",
        "type": "nfc_t4t_comm_apdu_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rapdu",
        "type": "nfc_t4t_resp_apdu_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_apdu_buff",
        "type": "uint8_t             * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "resp_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_apdu_default_exchange",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_capdu",
        "type": "nfc_t4t_comm_apdu_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rapdu",
        "type": "nfc_t4t_resp_apdu_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_apdu_buff",
        "type": "uint8_t             * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_file_chunk_save",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_rapdu",
        "type": "nfc_t4t_resp_apdu_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_storage_buff",
        "type": "uint8_t                   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "storage_buff_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_file_offset",
        "type": "uint16_t                  * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_file_len_update",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_rapdu",
        "type": "nfc_t4t_resp_apdu_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_len",
        "type": "uint16_t                  * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_ndef_tag_app_select",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_file_select",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "file_id",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_cc_select",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_cc_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cc_file",
        "type": "nfc_t4t_capability_container_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_ndef_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cc_file",
        "type": "nfc_t4t_capability_container_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ndef_file_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "ndef_file_buff_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_ndef_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cc_file",
        "type": "nfc_t4t_capability_container_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ndef_file_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "ndef_file_buff_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_file_control_tl_validate",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [
      {
        "name": "p_file_control_tlv",
        "type": "nfc_t4t_tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_file_control_value_parse",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_file_control_tlv",
        "type": "nfc_t4t_tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_value_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_file_control_tlv_parse",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_file_control_tlv",
        "type": "nfc_t4t_tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_t4t_file_control_tlv_printout",
    "return_type": "void",
    "params": [
      {
        "name": "num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_t4t_tlv_block",
        "type": "nfc_t4t_tlv_block_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_text_rec_payload_size_get",
    "return_type": "__STATIC_INLINE uint32_t",
    "params": [
      {
        "name": "p_nfc_rec_text_payload_desc",
        "type": "nfc_text_rec_payload_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_text_rec_payload_constructor",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_nfc_rec_text_payload_desc",
        "type": "nfc_text_rec_payload_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_uri_msg_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "uri_id_code",
        "type": "nfc_uri_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uri_data",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "uri_data_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nfc_uri_payload_constructor",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_input",
        "type": "uri_payload_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_driver_busy",
    "return_type": "static inline bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_device_off",
    "return_type": "static inline bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_device_on",
    "return_type": "static inline bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_device_ready_for_transmission",
    "return_type": "static inline bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "device_state_set",
    "return_type": "static inline void",
    "params": [
      {
        "name": "new_state",
        "type": "nrf21540_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "device_state_get",
    "return_type": "static inline nrf21540_state_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_task_get",
    "return_type": "static inline nrf_radio_task_t",
    "params": [
      {
        "name": "dir",
        "type": "nrf21540_trx_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_cleanup",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "events_clear",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NRF21540_TIMER_IRQ_HANDLER",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NRF21540_RADIO_IRQ_HANDLER",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "driver_reset",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "trx_set",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "dir",
        "type": "nrf21540_trx_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "trigger_event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "nrf21540_execution_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_pdn_drive",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "state",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "nrf21540_execution_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_tx_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "user_trigger_event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "nrf21540_execution_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_rx_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "user_trigger_event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "nrf21540_execution_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_is_error",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_ant_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "antenna",
        "type": "nrf21540_antenna_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_gpio_ant_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "antenna",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_pwr_mode_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "mode",
        "type": "nrf21540_pwr_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_gpio_pwr_mode_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "mode",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_spi_pwr_mode_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "mode",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_power_down",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "user_trigger_event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "nrf21540_execution_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_gpio_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_gpio_trx_task_start_address_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "dir",
        "type": "nrf21540_trx_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "required_state",
        "type": "nrf21540_bool_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_gpio_trx_enable",
    "return_type": "void",
    "params": [
      {
        "name": "dir",
        "type": "nrf21540_trx_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "wait_for_transfer_end",
    "return_type": "static inline void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spim_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "nrfx_spim_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_reg_read",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "reg",
        "type": "nrf21540_reg_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "nrf21540_execution_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "start_now",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_reg_write",
    "return_type": "static void",
    "params": [
      {
        "name": "reg",
        "type": "nrf21540_reg_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "nrf21540_execution_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "start_now",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "m_confreg_statics_content_update",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_spi_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_en_drive",
    "return_type": "static void",
    "params": [
      {
        "name": "state",
        "type": "nrf21540_bool_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_en_drive",
    "return_type": "static void",
    "params": [
      {
        "name": "state",
        "type": "nrf21540_bool_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_spim_trx_task_start_address_get",
    "return_type": "inline uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf21540_spim_for_trx_configure",
    "return_type": "void",
    "params": [
      {
        "name": "dir",
        "type": "nrf21540_trx_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "required_state",
        "type": "nrf21540_bool_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_lcd_set_instruction",
    "return_type": "static bool",
    "params": [
      {
        "name": "instr",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_lcd_clear",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_lcd_set_contrast",
    "return_type": "bool",
    "params": [
      {
        "name": "contrast",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_lcd_on",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_lcd_off",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_lcd_init",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_lcd_write_string",
    "return_type": "bool",
    "params": [
      {
        "name": "p_text",
        "type": "const char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "line",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pos",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_js_get_value",
    "return_type": "bool",
    "params": [
      {
        "name": "val",
        "type": "int8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_js_get_status",
    "return_type": "bool",
    "params": [
      {
        "name": "js_state",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_lcd_write_without_recovery",
    "return_type": "static bool",
    "params": [
      {
        "name": "data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "issue_stop_condition",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf6350_lcd_wake_up",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "assert_nrf_callback",
    "return_type": "__WEAK void",
    "params": [
      {
        "name": "line_num",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "file_name",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atfifo_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "nrf_atfifo_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "item_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atfifo_clear",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "nrf_atfifo_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atfifo_alloc_put",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "nrf_atfifo_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_var",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_visible",
        "type": "bool * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atfifo_item_put",
    "return_type": "bool",
    "params": [
      {
        "name": "p_fifo",
        "type": "nrf_atfifo_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "nrf_atfifo_item_put_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atfifo_get_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_fifo",
        "type": "nrf_atfifo_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_var",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_released",
        "type": "bool *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atfifo_item_free",
    "return_type": "bool",
    "params": [
      {
        "name": "p_fifo",
        "type": "nrf_atfifo_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "nrf_atfifo_item_get_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atflags_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "flag_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atflags_fetch_set",
    "return_type": "bool",
    "params": [
      {
        "name": "p_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "flag_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atflags_clear",
    "return_type": "void",
    "params": [
      {
        "name": "p_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "flag_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atflags_fetch_clear",
    "return_type": "bool",
    "params": [
      {
        "name": "p_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "flag_index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atflags_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "flags_array_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "flag_count",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atflags_find_and_set_flag",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "flag_count",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atflags_find_and_clear_flag",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "flag_count",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_fetch_store",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_exchange_n",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_store",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_fetch_or",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_fetch_or",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_or",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_or_fetch",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_fetch_and",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_fetch_and",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_and",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_and_fetch",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_fetch_xor",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_fetch_xor",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_xor",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_xor_fetch",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_fetch_add",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_fetch_add",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_add_fetch",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_fetch_sub",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_fetch_sub",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__atomic_sub_fetch",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "value",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "__ATOMIC_SEQ_CST",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_cmp_exch",
    "return_type": "bool",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_expected",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desired",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_internal_cmp_exch",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_data",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_expected",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "desired",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_fetch_sub_hs",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_u32_sub_hs",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_u32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_flag_set_fetch",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_flag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_flag_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_flag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_flag_clear_fetch",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_flag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_atomic_flag_clear",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_atomic_flag_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_balloc_status",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_balloc_block2idx",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_pool",
        "type": "nrf_balloc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_block",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_balloc_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_pool",
        "type": "nrf_balloc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_balloc_free",
    "return_type": "void",
    "params": [
      {
        "name": "p_pool",
        "type": "nrf_balloc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_element",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ancs_c_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_db_discovery_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ancs_verify_notification_format",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "notif",
        "type": "ble_ancs_c_evt_notif_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "parse_notif",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_src",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "hvx_data_len",
        "type": "uint16_t     const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ancs_c_app_attr_request",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_app_id",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_evt_gattc_notif",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_ctrlpt_error_rsp",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_write_rsp",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ancs_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ancs_c_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ancs_init",
        "type": "ble_ancs_c_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ancs_c_notif_source_notif_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ancs_c_notif_source_notif_disable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ancs_c_data_source_notif_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ancs_c_data_source_notif_disable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_ancs_get_notif_attrs",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_uid",
        "type": "uint32_t const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_ancs_c_attr_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "id",
        "type": "ble_ancs_c_notif_attr_id_val_t const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_ancs_c_app_attr_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "id",
        "type": "ble_ancs_c_app_attr_id_val_t const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ancs_c_app_attr_remove",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "id",
        "type": "ble_ancs_c_app_attr_id_val_t const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_ancs_c_notif_attr_remove",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "id",
        "type": "ble_ancs_c_notif_attr_id_val_t const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_ancs_c_attr_req_clear_all",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_ancs_c_request_attrs",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_notif",
        "type": "ble_ancs_c_evt_notif_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "encode_notif_action",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "p_encoded_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "uid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "action_id",
        "type": "ble_ancs_c_action_id_values_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ancs_perform_notif_action",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "uid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "action_id",
        "type": "ble_ancs_c_action_id_values_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ancs_c_handles_assign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ancs",
        "type": "ble_ancs_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "ble_ancs_c_service_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ctrlpt_char_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_bms_init",
        "type": "nrf_ble_bms_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ctrlpt_auth",
    "return_type": "static void",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ctrlpt",
        "type": "nrf_ble_bms_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ctrlpt_decode",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_rcvd_val",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ctrlpt",
        "type": "nrf_ble_bms_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ctrlpt_execute",
    "return_type": "static void",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "op_code",
        "type": "nrf_ble_bms_op_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "ctrlpt_validate",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ctrlpt",
        "type": "nrf_ble_bms_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_feature",
        "type": "nrf_ble_bms_features_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ctrlpt_process",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rcvd_val",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ctrlpt",
        "type": "nrf_ble_bms_ctrlpt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "feature_encode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "p_feature",
        "type": "nrf_ble_bms_features_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_encoded_feature",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_qwr_auth_req",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "nrf_ble_qwr_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_qwr_exec_write",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "nrf_ble_qwr_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "nrf_ble_bms_on_qwr_evt",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "nrf_ble_qwr_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_bms_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_bms_set_conn_handle",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_bms_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_bms_init",
        "type": "nrf_ble_bms_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_bms_auth_response",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_bms",
        "type": "nrf_ble_bms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "authorize",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "encode_feature_location_type",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "p_out_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_in_feature",
        "type": "nrf_ble_cgms_feature_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "glucose_feature_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "encode_status",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "p_out_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "status_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "srt_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_cgms_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cgms_init",
        "type": "const nrf_ble_cgms_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_cgms_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_cgms_meas_create",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rec",
        "type": "ble_cgms_rec_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_cgms_update_status",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_status",
        "type": "nrf_ble_cgm_status_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_cgms_conn_handle_assign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_cgms_srt_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cgms",
        "type": "nrf_ble_cgms_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "run_time",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "evt",
        "type": "nrf_ble_es_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "new_address_set",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "check_and_update_mac_address",
    "return_type": "static void",
    "params": [
      {
        "name": "demand_new_mac",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lock_beacon",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_ble_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_escs_security_cb",
    "return_type": "static void",
    "params": [
      {
        "name": "slot_no",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_type",
        "type": "es_security_msg_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adv_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "evt",
        "type": "es_adv_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_escs_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adv_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_slots_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_es_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_es_on_start_connectable_advertising",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_es_init",
    "return_type": "void",
    "params": [
      {
        "name": "evt_handler",
        "type": "nrf_ble_es_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_evt_type_for_handle",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_uuid",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_long_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_read",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_escs_on_ble_evt",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_escs_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_escs",
        "type": "nrf_ble_escs_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_escs_init",
        "type": "const nrf_ble_escs_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_init",
    "return_type": "static void",
    "params": [
      {
        "name": "p_link",
        "type": "nrf_ble_gatt_link_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "data_length_update",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_connected_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_disconnected_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "on_exchange_mtu_rsp_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_exchange_mtu_request_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_data_length_update_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_data_length_update_request_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_gatt_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "nrf_ble_gatt_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatt_att_mtu_periph_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desired_mtu",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatt_att_mtu_central_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "desired_mtu",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatt_eff_mtu_get",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatt_data_length_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatt_data_length_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_gatt",
        "type": "nrf_ble_gatt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_length",
        "type": "uint8_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatt_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatts_c_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_gatts_c",
        "type": "nrf_ble_gatts_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gatts_c_init",
        "type": "nrf_ble_gatts_c_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_gatt_handles_are_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_gatts_c",
        "type": "nrf_ble_gatts_c_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatts_c_enable_indication",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_gatts_c",
        "type": "nrf_ble_gatts_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "indication_enable",
        "type": "bool const",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatts_c_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_gatts_c",
        "type": "nrf_ble_gatts_c_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_db_discovery_evt_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatts_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_gatts_c_handles_assign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_gatts_c",
        "type": "nrf_ble_gatts_c_t        * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t                   const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "ble_gatt_db_char_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattc_write_alloc",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_data_pool",
        "type": "nrf_memobj_pool_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_req",
        "type": "nrf_ble_gq_req_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gatts_hvx_alloc",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_data_pool",
        "type": "nrf_memobj_pool_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_req",
        "type": "nrf_ble_gq_req_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "request_err_code_handle",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_ble_gq_req_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "err_code",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queues_purge",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gatt_queue",
        "type": "nrf_ble_gq_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "request_process",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_ble_gq_req_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_handle_id_find",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "p_gatt_queue",
        "type": "nrf_ble_gq_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_handle_register",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_gatt_queue",
        "type": "nrf_ble_gq_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_any_conn_handle_registered",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_gatt_queue",
        "type": "nrf_ble_gq_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_gq_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_lesc_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_lesc_keypair_generate",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_lesc_own_oob_data_generate",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_lesc_peer_oob_data_handler_set",
    "return_type": "void",
    "params": [
      {
        "name": "handler",
        "type": "nrf_ble_lesc_peer_oob_data_handler",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "compute_and_give_dhkey",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_peer_public_key",
        "type": "nrf_ble_lesc_peer_pub_key_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_lesc_request_handler",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_dhkey_request",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_dhkey_request",
        "type": "ble_gap_evt_lesc_dhkey_request_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "lesc_oob_data_set",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_lesc_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ots_c_init",
        "type": "nrf_ble_ots_c_init_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ots_gatt_handles_are_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ots_c",
        "type": "const nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_ots_c_feature_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_obj_size_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_obj_properties_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "prop_read_rsp_decode",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "const ble_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_on_db_disc_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "ble_db_discovery_evt_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_handles_assign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t               * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t                        const",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_handles",
        "type": "nrf_ble_ots_c_service_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_l2cap_ch_setup_complete",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_l2cap_obj_send",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_obj",
        "type": "ble_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_l2cap_obj_receive",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_obj",
        "type": "ble_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ots_c_l2cap_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oacp_response",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_gattc_evt",
        "type": "ble_gattc_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_indication_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "indication_enable",
        "type": "bool const",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_ots_c_oacp_write_object",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "truncate",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_ots_c_oacp_read_object",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ots_c_oacp_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ots_c",
        "type": "nrf_ble_ots_c_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_qwr_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_qwr_init",
        "type": "nrf_ble_qwr_init_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_qwr_attr_register",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "attr_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_qwr_value_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "attr_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_mem",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_len",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_qwr_conn_handle_assign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "user_mem_reply",
    "return_type": "static void",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_user_mem_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_common_evt",
        "type": "ble_common_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_user_mem_release",
    "return_type": "static void",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_common_evt",
        "type": "ble_common_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_prepare_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_execute_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "on_cancel_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_qwr",
        "type": "nrf_ble_qwr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt_write",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_qwr_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ble_scan_connect_with_target",
    "return_type": "static void",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t           const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_report",
        "type": "ble_gap_evt_adv_report_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "find_peer_addr",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_adv_report",
        "type": "ble_gap_evt_adv_report_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adv_addr_compare",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_adv_report",
        "type": "ble_gap_evt_adv_report_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_addr_filter_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_addr",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_name_compare",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_adv_report",
        "type": "ble_gap_evt_adv_report_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t     const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_name_filter_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_name",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_short_name_compare",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_adv_report",
        "type": "ble_gap_evt_adv_report_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t           const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_short_name_filter_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t            * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_short_name",
        "type": "nrf_ble_scan_short_name_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_uuid_compare",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_adv_report",
        "type": "ble_gap_evt_adv_report_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t           const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_uuid_filter_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_uuid",
        "type": "ble_uuid_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "adv_appearance_compare",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_adv_report",
        "type": "ble_gap_evt_adv_report_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t           const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_appearance_filter_add",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "appearance",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_filter_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "type",
        "type": "nrf_ble_scan_filter_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_all_filter_remove",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_filters_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "match_all",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_filters_disable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_filter_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_status",
        "type": "nrf_ble_scan_filters_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_on_adv_report",
    "return_type": "static void",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t           const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_report",
        "type": "ble_gap_evt_adv_report_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "is_whitelist_used",
    "return_type": "bool",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_default_param_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_default_conn_param_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_on_timeout",
    "return_type": "static void",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gap",
        "type": "ble_gap_evt_t  const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_stop",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t            * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_init",
        "type": "nrf_ble_scan_init_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "nrf_ble_scan_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_start",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_params_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t              * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_scan_param",
        "type": "ble_gap_scan_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_on_connected_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_scan_ctx",
        "type": "nrf_ble_scan_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t  const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_copy_addr_to_sd_gap_addr",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_gap_addr",
        "type": "ble_gap_addr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr[BLE_GAP_ADDR_LEN]",
        "type": "const uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_ble_scan_on_ble_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_contex",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "block_dev_empty_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ev_handler",
        "type": "nrf_block_dev_ev_handler",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_empty_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_empty_read_req",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk",
        "type": "nrf_block_req_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_empty_write_req",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk",
        "type": "nrf_block_req_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_empty_ioctl",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "req",
        "type": "nrf_block_dev_ioctl_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_qspi_eunit_write",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_qspi_dev",
        "type": "nrf_block_dev_qspi_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk_left",
        "type": "nrf_block_req_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_qspi_read_from_eunit",
    "return_type": "static void",
    "params": [
      {
        "name": "p_qspi_dev",
        "type": "nrf_block_dev_qspi_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "qspi_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "nrf_drv_qspi_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "wait_for_idle",
    "return_type": "static void",
    "params": [
      {
        "name": "p_qspi_dev",
        "type": "nrf_block_dev_qspi_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_qspi_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ev_handler",
        "type": "nrf_block_dev_ev_handler",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_qspi_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_qspi_read_req",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk",
        "type": "nrf_block_req_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_qspi_update_eunit",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_qspi_dev",
        "type": "nrf_block_dev_qspi_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "off",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_src",
        "type": "const void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_qspi_write_start",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_qspi_dev",
        "type": "nrf_block_dev_qspi_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_qspi_erase",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "NRF_QSPI_ERASE_LEN_4KB",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "address",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_qspi_write_req",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk",
        "type": "nrf_block_req_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_qspi_ioctl",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "req",
        "type": "nrf_block_dev_ioctl_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_ram_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ev_handler",
        "type": "nrf_block_dev_ev_handler",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_ram_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_ram_req",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk",
        "type": "nrf_block_req_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "nrf_block_dev_event_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_ram_read_req",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk",
        "type": "nrf_block_req_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_ram_write_req",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk",
        "type": "nrf_block_req_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_ram_ioctl",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "req",
        "type": "nrf_block_dev_ioctl_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_sdc_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "wait_func",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdc_wait",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdc_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "sdc_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_sdc_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ev_handler",
        "type": "nrf_block_dev_ev_handler",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_sdc_read_req",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk",
        "type": "nrf_block_req_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_sdc_write_req",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_blk",
        "type": "nrf_block_req_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "block_dev_sdc_ioctl",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_blk_dev",
        "type": "nrf_block_dev_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "req",
        "type": "nrf_block_dev_ioctl_req_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_init",
    "return_type": "__WEAK uint32_t",
    "params": [
      {
        "name": "observer",
        "type": "nrf_dfu_observer_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_init_user",
    "return_type": "__WEAK uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flash_write_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "do_reset",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bootloader_reset",
    "return_type": "static void",
    "params": [
      {
        "name": "do_backup",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "inactivity_timeout",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dfu_observer",
    "return_type": "static void",
    "params": [
      {
        "name": "evt_type",
        "type": "nrf_dfu_evt_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "scheduler_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "wait_for_event",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "loop_forever",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dfu_enter_button_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crc_on_valid_app_required",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "boot_validate",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_validation",
        "type": "boot_validation_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "do_crc",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_boot_validate",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_validation",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "data_addr",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "data_len",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_is_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "do_crc",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dfu_enter_flags_clear",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dfu_enter_check",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "postvalidate",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "observer",
        "type": "nrf_dfu_observer_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_app_start_final",
    "return_type": "void",
    "params": [
      {
        "name": "start_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_app_start",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "jump_to_addr",
    "return_type": "void",
    "params": [
      {
        "name": "new_msp",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_start",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "vector_table_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_flash_protect",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "address",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_activate",
    "return_type": "static void",
    "params": [
      {
        "name": "p_timer",
        "type": "dfu_timer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "timeout_ticks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_stop",
    "return_type": "static void",
    "params": [
      {
        "name": "p_timer",
        "type": "dfu_timer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_fire",
    "return_type": "static void",
    "params": [
      {
        "name": "p_timer",
        "type": "dfu_timer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTC_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_dfu_inactivity_timer_restart",
    "return_type": "void",
    "params": [
      {
        "name": "timeout_ticks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "callback",
        "type": "nrf_bootloader_dfu_timeout_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_wdt_feed_timer_start",
    "return_type": "void",
    "params": [
      {
        "name": "timeout_ticks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "callback",
        "type": "nrf_bootloader_dfu_timeout_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_dfu_timer_counter_get",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "image_copy",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "dst_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "src_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "progress_update_step",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_activate",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_activate",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bl_activate",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_bl_activate",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_fw_activate",
    "return_type": "nrf_bootloader_fw_activation_result_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_mbr_addrs_populate",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_debug_port_disable",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "wdt_feed",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "wdt_feed_timer_handler",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "WDT_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_wdt_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_bootloader_wdt_feed",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_log_entry_process",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "skip",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_execute",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "transport_buffer_flush",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_flag_help_set",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_flag_help_clear",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_flag_echo_set",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_flag_echo_clear",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_flag_echo_is_set",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_flag_processing_is_set",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_flag_last_nl_get",
    "return_type": "static inline uint8_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_flag_last_nl_set",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "val",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "receive_state_change",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "state",
        "type": "nrf_cli_receive_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_strlen",
    "return_type": "static inline size_t",
    "params": [
      {
        "name": "str",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_cmd_buffer_clear",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_in_empty_line",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "full_line_cmd",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "wildcard_character_exist",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_str",
        "type": "char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "cli_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_putc",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ch",
        "type": "char",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_read",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_get",
    "return_type": "static void",
    "params": [
      {
        "name": "p_command",
        "type": "nrf_cli_cmd_entry_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "lvl",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "idx",
        "type": "size_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_entry",
        "type": "nrf_cli_static_entry_t const **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_st_entry",
        "type": "nrf_cli_static_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_line_num_with_buffer_offset_get",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "buffer_pos",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_col_num_with_buffer_offset_get",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "buffer_pos",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_row_span_with_buffer_offsets_get",
    "return_type": "static int32_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset1",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset2",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_column_span_with_buffer_offsets_get",
    "return_type": "static int32_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "offset1",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset2",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_clear_eos",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_cursor_save",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_cursor_restore",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_next_line_move",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_left_move",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "n",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_right_move",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "n",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_horiz_move",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "delta",
        "type": "int32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_up_move",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "n",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_down_move",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "n",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_vert_move",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "delta",
        "type": "int32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_position_increment",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_position_synchronize",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_cmd_word_remove",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_home_position_move",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_end_position_move",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cursor_position_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "terminal_size_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_length",
        "type": "nrf_cli_cmd_len_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_height",
        "type": "nrf_cli_cmd_len_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "vt100_color_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "nrf_cli_vt100_color_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "vt100_bgcolor_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "bgcolor",
        "type": "nrf_cli_vt100_color_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "vt100_colors_store",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_color",
        "type": "nrf_cli_vt100_colors_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "vt100_colors_restore",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_color",
        "type": "nrf_cli_vt100_colors_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "left_arrow_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "right_arrow_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "char_insert_echo_off",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "char",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "char_insert",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "char",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "char_backspace",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "char_delete",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "make_argv",
    "return_type": "static char",
    "params": [
      {
        "name": "p_argc",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_argv",
        "type": "char **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cmd",
        "type": "char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "max_argc",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_state_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "state",
        "type": "nrf_cli_state_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "history_mode_exit",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "history_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "up",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "history_list_element_add",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_memobj",
        "type": "nrf_memobj_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "history_list_element_oldest_remove",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "history_list_free_memory",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "history_save",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "str_similarity_check",
    "return_type": "static nrf_cli_cmd_len_t",
    "params": [
      {
        "name": "str_a",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "str_b",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "completion_insert",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_compl",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "compl_len",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "option_print",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_option",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "longest_option",
        "type": "nrf_cli_cmd_len_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_completion_candidate",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "candidate",
        "type": "const char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "str",
        "type": "const char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_tab_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "process_nl",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ascii_filter",
    "return_type": "static inline ret_code_t",
    "params": [
      {
        "name": "data",
        "type": "char const",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_state_collect",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_trim",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spaces_trim",
    "return_type": "static void",
    "params": [
      {
        "name": "p_char",
        "type": "char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "command_to_tmp_buffer_add",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_new_cmd",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pattern",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pattern_from_tmp_buffer_remove",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pattern",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "commands_expand",
    "return_type": "static wildcard_cmd_status_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cmd",
        "type": "nrf_cli_cmd_entry_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "cmd_lvl",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pattern",
        "type": "char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_counter",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "string_cmp",
    "return_type": "static int",
    "params": [
      {
        "name": "pp_a",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_b",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "strcmp",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "*pp_str_a",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "*pp_str_b",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_transport_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "evt_type",
        "type": "nrf_cli_transport_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_instance_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "use_colors",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_instance_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "console_task",
    "return_type": "void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "use_colors",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "log_backend",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "init_lvl",
        "type": "nrf_log_severity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_task_create",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_uninit",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_start",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_stop",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_process",
    "return_type": "void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_print_stream",
    "return_type": "void",
    "params": [
      {
        "name": "p_user_ctx",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "format_offset_string_print",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_str",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "terminal_offset",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset_first_line",
        "type": "bool",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_help_print",
    "return_type": "void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_opt",
        "type": "nrf_cli_getopt_option_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "opt_len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_cli_put",
    "return_type": "static void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msg",
        "type": "nrf_log_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_cli_flush",
    "return_type": "static void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_cli_panic_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_build_in_cmd_common_executed",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "arg_cnt_nok",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_opt",
        "type": "nrf_cli_getopt_option_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "opt_len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "nrf_cli_cmd_clear",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_cli",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_colors_off",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_colors_on",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_colors",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_echo",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_echo_off",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_echo_on",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_history",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_cli_stats",
    "return_type": "void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_cli_stats_show",
    "return_type": "void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_cli_stats_reset",
    "return_type": "void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_resize_default",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_cmd_resize",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_try",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_cli_ble_uart_internal_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "threshold",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nus_data_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_nus_evt",
        "type": "ble_nus_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timer_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_ble_uart_service_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "cli_ble_uart_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "nrf_cli_transport_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_ble_uart_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_ble_uart_enable",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "blocking",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_ble_uart_read",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_ble_uart_write",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "const void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_user_ev_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "app_usbd_cdc_acm_user_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cdc_acm_process_and_prepare_buffer",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cdc_acm",
        "type": "app_usbd_cdc_acm_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_cdc_acm_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "nrf_cli_transport_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_cdc_acm_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_cdc_acm_enable",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "blocking",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_cdc_acm_read",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_cdc_acm_write",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_libuarte_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "nrf_cli_transport_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_libuarte_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_libuarte_enable",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "blocking",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_libuarte_read",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_libuarte_write",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_rtt_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "nrf_cli_transport_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_rtt_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_rtt_enable",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "blocking",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_rtt_read",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_rtt_write",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "const void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_try",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_internal",
        "type": "nrf_cli_uart_internal_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_uart_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "nrf_cli_transport_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_uart_uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_uart_enable",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "blocking",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_uart_read",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_uart_write",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_cli_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_cnt",
        "type": "size_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "context_verify",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aead_internal_context_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_aead_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aead_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "nrf_crypto_aead_info_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_aead_uninit",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_aead_crypt",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aead_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "nrf_crypto_operation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_nonce",
        "type": "uint8_t *",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "LOW"
      },
      {
        "name": "nonce_size",
        "type": "uint8_t",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_adata",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "adata_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_in_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_mac",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mac_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_aes_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aes_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "nrf_crypto_aes_info_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "nrf_crypto_operation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_aes_uninit",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aes_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_aes_key_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aes_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_aes_iv_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aes_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_iv",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_aes_iv_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aes_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_iv",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_aes_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aes_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_aes_finalize",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aes_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_aes_crypt",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_aes_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "nrf_crypto_aes_info_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "operation",
        "type": "nrf_crypto_operation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_iv",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data_in",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_out_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "padding_pkcs7_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_padding_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_message_buff",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "msg_ending_len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "padding_pkcs7_remove",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_padded_message",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_message_len",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_internal_ecc_key_output_prepare",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_curve_info",
        "type": "nrf_crypto_ecc_curve_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key_header",
        "type": "nrf_crypto_internal_ecc_key_header_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_internal_ecc_key_input_check",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_key_header",
        "type": "nrf_crypto_internal_ecc_key_header_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "init_value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_internal_ecc_raw_output_prepare",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_raw_data_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "expected_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_internal_ecc_raw_input_check",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "raw_data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "expected_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecc_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_ecc_key_pair_generate_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_curve_info",
        "type": "nrf_crypto_ecc_curve_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "nrf_crypto_ecc_private_key_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "nrf_crypto_ecc_public_key_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_ecc_public_key_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_ecc_public_key_calculate_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "nrf_crypto_ecc_private_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "nrf_crypto_ecc_public_key_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecc_private_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_curve_info",
        "type": "nrf_crypto_ecc_curve_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "nrf_crypto_ecc_private_key_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "raw_data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecc_private_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "nrf_crypto_ecc_private_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_raw_data_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecc_public_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_curve_info",
        "type": "nrf_crypto_ecc_curve_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "nrf_crypto_ecc_public_key_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "raw_data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecc_public_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "nrf_crypto_ecc_public_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_raw_data_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecc_private_key_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "nrf_crypto_ecc_private_key_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecc_public_key_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "nrf_crypto_ecc_public_key_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecc_curve_info_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pp_curve_info",
        "type": "nrf_crypto_ecc_curve_info_t const **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecc_byte_order_invert",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_curve_info",
        "type": "nrf_crypto_ecc_curve_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_input",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_raw_output",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "raw_data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecdh_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_ecdh_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "nrf_crypto_ecc_private_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "nrf_crypto_ecc_public_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_shared_secret",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_shared_secret_size",
        "type": "size_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_ecdsa_sign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_ecdsa_sign_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "nrf_crypto_ecc_private_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_hash",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "hash_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_signature_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_ecdsa_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_ecdsa_verify_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "nrf_crypto_ecc_public_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_hash",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "hash_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "signature_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_eddsa_sign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_eddsa_sign_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "nrf_crypto_ecc_private_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_message",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "message_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_signature_size",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_eddsa_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_eddsa_verify_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "nrf_crypto_ecc_public_key_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_message",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "message_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "signature_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "verify_context",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hash_internal_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_hash_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hash_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "nrf_crypto_hash_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_hash_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hash_context_t   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_hash_finalize",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hash_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t                    * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_hash_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hash_context_t    * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "nrf_crypto_hash_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t                       * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hkdf_expand",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hmac_context_t      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "nrf_crypto_hmac_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_output_key",
        "type": "uint8_t                        * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "output_key_size",
        "type": "size_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_ainfo",
        "type": "uint8_t                  const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ainfo_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_temp",
        "type": "uint8_t                        * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_prk",
        "type": "uint8_t                  const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "prk_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_hkdf_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hmac_context_t      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "nrf_crypto_hmac_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_output_key",
        "type": "uint8_t                        * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_output_key_size",
        "type": "size_t                         * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_input_key",
        "type": "uint8_t                  const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "input_key_size",
        "type": "size_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_salt",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "salt_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ainfo",
        "type": "uint8_t                  const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ainfo_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mode",
        "type": "nrf_crypto_hkdf_mode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "verify_context_valid",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hmac_internal_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_hmac_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hmac_context_t   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "nrf_crypto_hmac_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key_size",
        "type": "size_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_hmac_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hmac_context_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_hmac_finalize",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hmac_context_t   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t                      * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_hmac_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_hmac_context_t  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_info",
        "type": "nrf_crypto_hmac_info_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t                     * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_key",
        "type": "uint8_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key_size",
        "type": "size_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_uninit",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_is_initialized",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_is_initializing",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_vector_greater_or_equal",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_vector",
        "type": "uint8_t    const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_min",
        "type": "uint8_t    const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_vector_in_range",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_vector",
        "type": "uint8_t    const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_min",
        "type": "uint8_t    const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_max",
        "type": "uint8_t    const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "count_leading_zeros",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_vector",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "generate",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_target",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "use_mutex",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "generate_in_range",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_target",
        "type": "uint8_t         * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_min",
        "type": "uint8_t   const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_max",
        "type": "uint8_t   const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "use_mutex",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_vector_generate_in_range",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_target",
        "type": "uint8_t          * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_min",
        "type": "uint8_t    const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_max",
        "type": "uint8_t    const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_vector_generate_no_mutex",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_target",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_vector_generate_in_range_no_mutex",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_target",
        "type": "uint8_t         * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_min",
        "type": "uint8_t   const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_max",
        "type": "uint8_t   const * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "nrf_crypto_rng_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_temp_buffer",
        "type": "nrf_crypto_rng_temp_buffer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_uninit",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_rng_reseed",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_temp_buffer",
        "type": "nrf_crypto_rng_temp_buffer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_input_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_internal_swap_endian_in_place",
    "return_type": "void",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_internal_swap_endian",
    "return_type": "void",
    "params": [
      {
        "name": "p_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_in",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_internal_double_swap_endian",
    "return_type": "void",
    "params": [
      {
        "name": "p_out",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_in",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "part_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_internal_double_swap_endian_in_place",
    "return_type": "void",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "part_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "csense_timer_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "min_or_max_update",
    "return_type": "__STATIC_INLINE void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pad",
        "type": "nrf_csense_pad_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ratio_calculate",
    "return_type": "__STATIC_INLINE uint16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pad",
        "type": "nrf_csense_pad_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "calculate_step",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pad_index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "find_touched_mask",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "find_touched_pad",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "touched_mask",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "find_touched_step",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "csense_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event_struct",
        "type": "nrf_drv_csense_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_csense_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "event_handler",
        "type": "nrf_csense_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ticks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_csense_uninit",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_csense_add",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_csense_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_csense_disable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_csense_ticks_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "ticks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_csense_steps_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_csense_instance_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "steps",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_dfu_init",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "observer",
        "type": "nrf_dfu_observer_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_dfu_close",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_exception",
        "type": "nrf_dfu_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "release_rx_buff",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "transmit_response",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_bcast_data",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_write_complete",
    "return_type": "static void",
    "params": [
      {
        "name": "p_buf",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "prepare_response",
    "return_type": "static void",
    "params": [
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_response",
    "return_type": "static void",
    "params": [
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_request",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_tx_transfer_complete",
    "return_type": "static void",
    "params": [
      {
        "name": "success",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_rx_transfer_start",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_rx_transfer_complete",
    "return_type": "static void",
    "params": [
      {
        "name": "success",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_rx_transfer_data",
    "return_type": "static void",
    "params": [
      {
        "name": "data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "handle_data_mesg",
    "return_type": "static void",
    "params": [
      {
        "name": "p_msg",
        "type": "ANT_MESSAGE *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ant_dfu_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "advertising_init",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "adv_flags",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_adv_params",
        "type": "ble_gap_adv_params_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "advertising_start",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sd_ble_gap_adv_start",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "m_adv_handle",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "APP_BLE_CONN_CFG_TAG",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "response_send",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "service_changed_send",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "response_prepare",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "op_code",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "result",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "response_select_obj_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "max_size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "fw_offset",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "crc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "response_crc_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "fw_offset",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "crc",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "response_ext_err_payload_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "result",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "buf_offset",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_req_handler_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_ctrl_pt_write",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_dfu",
        "type": "ble_dfu_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ble_write_evt",
        "type": "ble_gatts_evt_write_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_flash_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_buf",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gap_address_change",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gap_params_init",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ble_stack_init",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dfu_pkt_char_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_dfu",
        "type": "ble_dfu_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "dfu_ctrl_pt_add",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_dfu",
        "type": "ble_dfu_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_dfu",
        "type": "ble_dfu_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_transport_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "observer",
        "type": "nrf_dfu_observer_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_transport_close",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_exception",
        "type": "nrf_dfu_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dfu_transport_disconnect",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "dfu_fstorage_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_evt",
        "type": "nrf_fstorage_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_flash_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "sd_irq_initialized",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_flash_store",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "dest",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_src",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "callback",
        "type": "nrf_dfu_flash_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_flash_erase",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "page_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "num_pages",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "callback",
        "type": "nrf_dfu_flash_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ext_error_set",
    "return_type": "nrf_dfu_result_t",
    "params": [
      {
        "name": "error_code",
        "type": "nrf_dfu_ext_error_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ext_error_get",
    "return_type": "nrf_dfu_ext_error_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_mbr_copy_bl",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_src",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_mbr_init_sd",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_mbr_irq_forward_address_set",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_dfu_complete",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt",
        "type": "nrf_fstorage_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ext_err_code_handle",
    "return_type": "static nrf_dfu_result_t",
    "params": [
      {
        "name": "ret_val",
        "type": "nrf_dfu_result_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_protocol_version_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_hw_version_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_fw_version_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_ping_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_mtu_get_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_prn_set_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_abort_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cmd_response_offset_and_crc_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_cmd_obj_select_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_cmd_obj_create_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_cmd_obj_write_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_cmd_obj_execute_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "on_cmd_obj_crc_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_command_req",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_data_obj_select_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_data_obj_create_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_data_obj_write_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_data_obj_crc_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_data_obj_execute_request_sched",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "on_data_obj_execute_request",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "nrf_dfu_data_req",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_obj_op",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_req_handler_req_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_req",
        "type": "nrf_dfu_request_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_req_handler_req",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_req_handler_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "observer",
        "type": "nrf_dfu_observer_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dfu_req_handler_rsp_clbk",
    "return_type": "void",
    "params": [
      {
        "name": "p_res",
        "type": "nrf_dfu_response_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_serial_on_packet_received",
    "return_type": "void",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_dfu_serial_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uart_dfu_transport_init",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "observer",
        "type": "nrf_dfu_observer_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uart_dfu_transport_close",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_exception",
        "type": "nrf_dfu_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "payload_free",
    "return_type": "static void",
    "params": [
      {
        "name": "p_buf",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rsp_send",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_rx_complete",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_transport",
        "type": "nrf_dfu_serial_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usb_dfu_transport_init",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "observer",
        "type": "nrf_dfu_observer_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usb_dfu_transport_close",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_exception",
        "type": "nrf_dfu_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_dfu_transport_ev_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "app_usbd_event_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_sched_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "app_usbd_internal_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_crc_get",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_settings",
        "type": "nrf_dfu_settings_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crc_ok",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_settings",
        "type": "nrf_dfu_settings_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "boot_validation_crc",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_settings",
        "type": "nrf_dfu_settings_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "boot_validation_crc_ok",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_settings",
        "type": "nrf_dfu_settings_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_crc_ok",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_backup_crc_ok",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_forbidden_parts_copy_from_backup",
    "return_type": "static void",
    "params": [
      {
        "name": "p_dst_addr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_reinit",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "sd_irq_initialized",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_forbidden_parts_equal_to_backup",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_compare_addr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_write",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_dst",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_src",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "callback",
        "type": "nrf_dfu_flash_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dfu_settings_buffer",
        "type": "nrf_dfu_settings_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "callback",
        "type": "nrf_dfu_flash_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_backup",
    "return_type": "void",
    "params": [
      {
        "name": "callback",
        "type": "nrf_dfu_flash_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_src",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_backup",
    "return_type": "void",
    "params": [
      {
        "name": "callback",
        "type": "nrf_dfu_flash_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_write_and_backup",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "callback",
        "type": "nrf_dfu_flash_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_additional_erase",
    "return_type": "__WEAK ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_progress_reset",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_peer_data_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_dfu_peer_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_peer_data_copy",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_dfu_peer_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_peer_data_is_valid",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_settings_adv_name_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_adv_name",
        "type": "nrf_dfu_adv_name_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_dfu_settings_adv_name_copy",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_adv_name",
        "type": "nrf_dfu_adv_name_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_dfu_settings_adv_name_is_valid",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_dfu_set_peer_data_handler",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_async",
        "type": "nrf_dfu_set_peer_data_svci_async_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_set_peer_data_on_call",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "nrf_dfu_peer_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_state",
        "type": "nrf_dfu_peer_data_state_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_set_peer_data_on_sys_evt",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "sys_event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_state",
        "type": "nrf_dfu_peer_data_state_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_set_adv_name_handler",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_async",
        "type": "nrf_dfu_set_adv_name_svci_async_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_dfu_set_adv_name_on_call",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_adv_name",
        "type": "nrf_dfu_adv_name_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_state",
        "type": "nrf_dfu_set_adv_name_state_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_dfu_set_adv_name_on_sys_evt",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "sys_event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_state",
        "type": "nrf_dfu_set_adv_name_state_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_dfu_transports_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "observer",
        "type": "nrf_dfu_observer_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_transports_close",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_exception",
        "type": "nrf_dfu_transport_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dfu_trigger_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_inst",
        "type": "app_usbd_class_inst_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "app_usbd_nrf_dfu_trigger_user_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_user_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "app_usbd_event_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "strings_create",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "usbd_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "app_usbd_internal_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_trigger_usb_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_bank_invalidate",
    "return_type": "void",
    "params": [
      {
        "name": "p_bank",
        "type": "nrf_dfu_bank_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_softdevice_invalidate",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_bank0_start_addr",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_bank1_start_addr",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_app_start_address",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_softdevice_start_address",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_cache_prepare",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "required_size",
        "type": "const uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "single_bank",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "keep_app",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "keep_softdevice",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pb_decoding_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "str",
        "type": "pb_istream_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "tag",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "wire_type",
        "type": "pb_wire_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "iter",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "stored_init_cmd_decode",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crypto_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_init_cmd_create",
    "return_type": "nrf_dfu_result_t",
    "params": [
      {
        "name": "size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_init_cmd_append",
    "return_type": "nrf_dfu_result_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_init_cmd_status_get",
    "return_type": "void",
    "params": [
      {
        "name": "p_offset",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_crc",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_max_size",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_init_cmd_present",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "signature_required",
    "return_type": "static bool",
    "params": [
      {
        "name": "fw_type_to_be_updated",
        "type": "dfu_fw_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_signature_check",
    "return_type": "static nrf_dfu_result_t",
    "params": [
      {
        "name": "signature_type",
        "type": "dfu_signature_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "signature_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "EXT_ERR",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "NRF_DFU_EXT_ERROR_SIGNATURE_MISSING",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_data_size_get",
    "return_type": "static nrf_dfu_result_t",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_size",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "use_single_bank",
    "return_type": "static bool",
    "params": [
      {
        "name": "new_fw_type",
        "type": "dfu_fw_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_requires_softdevice",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "keep_softdevice",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_data_addr_get",
    "return_type": "static nrf_dfu_result_t",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "fw_size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_addr",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_prevalidate",
    "return_type": "nrf_dfu_result_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_init_cmd_execute",
    "return_type": "nrf_dfu_result_t",
    "params": [
      {
        "name": "p_dst_data_addr",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "nrf_dfu_validation_hash_ok",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_hash",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "src_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "little_endian",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "fw_hash_ok",
    "return_type": "bool",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "fw_start_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "fw_size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "is_major_softdevice_update",
    "return_type": "static bool",
    "params": [
      {
        "name": "new_sd_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "softdevice_info_ok",
    "return_type": "static bool",
    "params": [
      {
        "name": "sd_start_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sd_size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "boot_validation_extract",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_boot_validation",
        "type": "boot_validation_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "index",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "start_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "default_type",
        "type": "boot_validation_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "postvalidate_app",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "src_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "is_trusted",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "postvalidate_sd_bl",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "with_sd",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "with_bl",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "start_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "is_trusted",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_post_data_execute",
    "return_type": "nrf_dfu_result_t",
    "params": [
      {
        "name": "data_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "nrf_dfu_validation_activation_prepare",
    "return_type": "nrf_dfu_result_t",
    "params": [
      {
        "name": "data_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_validation_valid_external_app",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_req_check",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_sd_req",
        "type": "uint32_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "sd_req_cnt",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "accept_any",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_req_ok",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fw_hash_type_ok",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "fw_version_required",
    "return_type": "static bool",
    "params": [
      {
        "name": "new_fw_type",
        "type": "dfu_fw_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fw_type_ok",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fw_version_ok",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_dfu_ver_validation_check",
    "return_type": "nrf_dfu_result_t",
    "params": [
      {
        "name": "p_init",
        "type": "dfu_init_command_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "calculate_next_channel",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conversion_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "val",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "counter_compare_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event_type",
        "type": "nrf_timer_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dummy_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event_type",
        "type": "nrf_timer_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "comp_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "nrf_comp_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "comp_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adc_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_event",
        "type": "nrfx_adc_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "adc_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "saadc_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_event",
        "type": "nrf_drv_saadc_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "saadc_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_csense_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_config",
        "type": "nrf_drv_csense_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_handler",
        "type": "nrf_drv_csense_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_csense_uninit",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_csense_channels_enable",
    "return_type": "void",
    "params": [
      {
        "name": "channels_mask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_csense_channels_disable",
    "return_type": "void",
    "params": [
      {
        "name": "channels_mask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_csense_channel_read",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "csense_channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_csense_sample",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_drv_csense_is_busy",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_radio_disabled_tx_noack",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_radio_disabled_tx",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_radio_disabled_tx_wait_for_ack",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_radio_disabled_rx",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_radio_disabled_rx_ack",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bytewise_bit_swap",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_inp",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "addr_conv",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_addr",
        "type": "uint8_t const*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "apply_address_workarounds",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_rf_payload_format_esb_dpl",
    "return_type": "static void",
    "params": [
      {
        "name": "payload_length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_rf_payload_format_esb",
    "return_type": "static void",
    "params": [
      {
        "name": "payload_length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_radio_addresses",
    "return_type": "static void",
    "params": [
      {
        "name": "update_mask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_radio_tx_power",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_radio_bitrate",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_radio_protocol",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_radio_crc",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_radio_parameters",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "reset_fifos",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "initialize_fifos",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_skip_tx",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_fifo_push_rfbuf",
    "return_type": "static bool",
    "params": [
      {
        "name": "pipe",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pid",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sys_timer_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "start_tx_transaction",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "clear_events_restart_rx",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_get_clear_interrupts",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_interrupts",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_config",
        "type": "nrf_esb_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_suspend",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_disable",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_is_idle",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ESB_EVT_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_write_payload",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_payload",
        "type": "nrf_esb_payload_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_read_rx_payload",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_payload",
        "type": "nrf_esb_payload_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_start_tx",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_start_rx",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_stop_rx",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_flush_tx",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_pop_tx",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_flush_rx",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_set_address_length",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_set_base_address_0",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_addr",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_set_base_address_1",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_addr",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_set_prefixes",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_prefixes",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "num_pipes",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_update_prefix",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pipe",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "prefix",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_enable_pipes",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "enable_mask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_set_rf_channel",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_get_rf_channel",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_channel",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_set_tx_power",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "tx_output_power",
        "type": "nrf_esb_tx_power_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_set_retransmit_delay",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "delay",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_set_retransmit_count",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "count",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_set_bitrate",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "bitrate",
        "type": "nrf_esb_bitrate_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_esb_reuse_pid",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pipe",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NRF_ESB_BUGFIX_TIMER_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "addr_is_aligned32",
    "return_type": "static bool",
    "params": [
      {
        "name": "addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "addr_is_page_aligned",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "addr_is_within_bounds",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_fstorage_uninit",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_param",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_fstorage_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "src",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dest",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_fstorage_is_busy",
    "return_type": "bool",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_param",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uninit",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_param",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "read",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "src",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_dest",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_src",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_param",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "erase",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "page_addr",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_param",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_busy",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_fs",
        "type": "nrf_fstorage_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_flash_write",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_dest",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_src",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "chunk_len",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "erase_execute",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_op",
        "type": "nrf_fstorage_sd_op_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "queue_load_next",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_operation_success",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_op",
        "type": "nrf_fstorage_sd_op_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "on_operation_failure",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_op",
        "type": "nrf_fstorage_sd_op_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pixel_draw",
    "return_type": "static inline void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "x",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rect_draw",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "x",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "width",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "height",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "line_draw",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "x_0",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y_0",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "x_1",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y_1",
        "type": "int16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_character",
    "return_type": "static void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_font",
        "type": "nrf_gfx_font_desc_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "character",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_x",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "y",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "font_color",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_gfx_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_uninit",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_point_draw",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_point",
        "type": "nrf_gfx_point_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_line_draw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_line",
        "type": "nrf_gfx_line_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_circle_draw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_circle",
        "type": "nrf_gfx_circle_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "fill",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_rect_draw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rect",
        "type": "nrf_gfx_rect_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "thickness",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "fill",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_screen_fill",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_bmp565_draw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rect",
        "type": "nrf_gfx_rect_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "img_buf",
        "type": "uint16_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_background_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "img_buf",
        "type": "uint16_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_display",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_rotation_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "rotation",
        "type": "nrf_lcd_rotation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_invert",
    "return_type": "void",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "invert",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_print",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_point",
        "type": "nrf_gfx_point_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "font_color",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "string",
        "type": "const char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_font",
        "type": "const nrf_gfx_font_desc_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "wrap",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_height_get",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gfx_width_get",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_lcd_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_update_radio_params",
    "return_type": "bool",
    "params": [
      {
        "name": "system_address",
        "type": "const uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_generate_channels",
    "return_type": "void",
    "params": [
      {
        "name": "ch_dst",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "system_address",
        "type": "const uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "channel_tab_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gzp_disable_gzll",
    "return_type": "__INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_xor_cipher",
    "return_type": "void",
    "params": [
      {
        "name": "dst",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "src",
        "type": "const uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pad",
        "type": "const uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "gzp_validate_id",
    "return_type": "bool",
    "params": [
      {
        "name": "id",
        "type": "const uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_add_validation_id",
    "return_type": "void",
    "params": [
      {
        "name": "dst",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt_set_session_token",
    "return_type": "void",
    "params": [
      {
        "name": "token",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt_set_dyn_key",
    "return_type": "void",
    "params": [
      {
        "name": "key",
        "type": "const uint8_t*",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt_get_session_token",
    "return_type": "void",
    "params": [
      {
        "name": "dst_token",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt_get_dyn_key",
    "return_type": "void",
    "params": [
      {
        "name": "dst_key",
        "type": "uint8_t*",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt_select_key",
    "return_type": "void",
    "params": [
      {
        "name": "key_select",
        "type": "gzp_key_select_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt",
    "return_type": "void",
    "params": [
      {
        "name": "dst",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "src",
        "type": "const uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_random_numbers_generate",
    "return_type": "void",
    "params": [
      {
        "name": "dst",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "n",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-90A: Random number generation. Use approved DRBG or on-chip TRNG; never reuse nonces.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "nrf_gzp_set_primask",
    "return_type": "static void",
    "params": [
      {
        "name": "primask",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gzp_flush_rx_fifo",
    "return_type": "void",
    "params": [
      {
        "name": "pipe",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_tx_packet",
    "return_type": "static bool",
    "params": [
      {
        "name": "tx_packet",
        "type": "const uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pipe",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_tx_rx_transaction",
    "return_type": "static gzp_tx_rx_trans_result_t",
    "params": [
      {
        "name": "tx_packet",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rx_dst",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "rx_length",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pipe",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt_tx_transaction",
    "return_type": "static bool",
    "params": [
      {
        "name": "tx_packet",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_key_update",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_params_db_add",
    "return_type": "static void",
    "params": [
      {
        "name": "src_element",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_params_db_read",
    "return_type": "static void",
    "params": [
      {
        "name": "dst_element",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_index_db_add",
    "return_type": "static void",
    "params": [
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_index_db_read",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_index_db_full",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_index_db_empty",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_array_is_set",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "const uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_params_store",
    "return_type": "static bool",
    "params": [
      {
        "name": "store_all",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_params_restore",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_delay_rx_periods",
    "return_type": "void",
    "params": [
      {
        "name": "rx_periods",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_tick_sleep_rx_periods",
    "return_type": "void",
    "params": [
      {
        "name": "rx_periods",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "print_string",
    "return_type": "void",
    "params": [
      {
        "name": "p_expr",
        "type": "char*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_erase_pairing_data",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gzp_address_req_send",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_id_req_send",
    "return_type": "gzp_id_req_res_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_id_req_cancel",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt_data_send",
    "return_type": "bool",
    "params": [
      {
        "name": "src",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_set_host_id",
    "return_type": "void",
    "params": [
      {
        "name": "id",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_get_host_id",
    "return_type": "void",
    "params": [
      {
        "name": "dst_id",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_get_pairing_status",
    "return_type": "int8_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_gzll_device_tx_success",
    "return_type": "void",
    "params": [
      {
        "name": "pipe",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_info",
        "type": "nrf_gzll_device_tx_info_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gzll_device_tx_failed",
    "return_type": "void",
    "params": [
      {
        "name": "pipe",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "tx_info",
        "type": "nrf_gzll_device_tx_info_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gzp_tx_complete",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gzp_tx_success",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gzp_reset_tx_complete",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gzp_reset_tx_success",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gzll_disabled",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_gzll_host_rx_data_ready",
    "return_type": "void",
    "params": [
      {
        "name": "pipe",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "rx_info",
        "type": "nrf_gzll_host_rx_info_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_session_counter_inc",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_get_session_counter",
    "return_type": "static void",
    "params": [
      {
        "name": "dst",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_process_address_req",
    "return_type": "static void",
    "params": [
      {
        "name": "gzp_req",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_process_id_req",
    "return_type": "static void",
    "params": [
      {
        "name": "rx_payload",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_process_id_fetch",
    "return_type": "static void",
    "params": [
      {
        "name": "rx_payload",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_process_key_update_prepare",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_process_key_update",
    "return_type": "static void",
    "params": [
      {
        "name": "rx_payload",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_process_encrypted_user_data",
    "return_type": "static void",
    "params": [
      {
        "name": "rx_payload",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_preload_ack",
    "return_type": "static void",
    "params": [
      {
        "name": "src",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pipe",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_host_chip_id_read",
    "return_type": "void",
    "params": [
      {
        "name": "dst",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "n",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzll_goto_idle",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzll_tx_fifo_flush",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzll_rx_fifo_flush",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzll_set_rx_timeout",
    "return_type": "static void",
    "params": [
      {
        "name": "timeout",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_pairing_enable",
    "return_type": "void",
    "params": [
      {
        "name": "enable",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gzp_host_execute",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "gzll_rx_start",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_id_req_received",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_id_req_reject",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_id_req_grant",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_address_exchanged",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt_user_data_received",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gzp_crypt_user_data_read",
    "return_type": "bool",
    "params": [
      {
        "name": "dst",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t*",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_hw_backend_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_hw_backend_uninit",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "entropy_callback",
    "return_type": "static int",
    "params": [
      {
        "name": "p_entropy",
        "type": "void *",
        "comment": "Nonce/entropy input. Must be unpredictable and never reused.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buffer",
        "type": "unsigned char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-90A: Random number generation. Use approved DRBG or on-chip TRNG; never reuse nonces.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "irq_prio_inc",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "prio",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_ticks_to_us",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "ticks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "app_timer_us_to_ticks",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "us",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_buffer_schedule",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_async_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uart_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_evt",
        "type": "nrf_libuarte_drv_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_async_timeout_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_async_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tmr_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event_type",
        "type": "nrf_timer_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_async_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_async_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "nrf_libuarte_async_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "nrf_libuarte_async_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_async_uninit",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_async_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_async_enable",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_async_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_async_tx",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_async_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_async_rx_free",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_async_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_async_rts_clear",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_async_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_async_rts_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_async_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "libuarte_0_irq_handler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "libuarte_1_irq_handler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_channel_configure",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_ch",
        "type": "nrf_ppi_channel_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "task",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "fork",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_group_configure",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_ppi_group",
        "type": "nrf_ppi_channel_group_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "ch",
        "type": "nrf_ppi_channel_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_en_task",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_dis_task",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "en",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_ch_free",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ch",
        "type": "nrf_ppi_channel_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_group_free",
    "return_type": "static void",
    "params": [
      {
        "name": "p_group",
        "type": "nrf_ppi_channel_group_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_free",
    "return_type": "static void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_ch_enable",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ch",
        "type": "nrf_ppi_channel_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_ch_disable",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ch",
        "type": "nrf_ppi_channel_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_ppi_enable",
    "return_type": "static void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_ppi_disable",
    "return_type": "static void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_ppi_enable",
    "return_type": "static void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_ppi_disable",
    "return_type": "static void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ppi_configure",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "nrf_libuarte_drv_config_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_drv_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_config",
        "type": "nrf_libuarte_drv_config_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_handler",
        "type": "nrf_libuarte_drv_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_drv_uninit",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_drv_rx_start",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ext_trigger_en",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_drv_rx_buf_rsp",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_drv_rx_stop",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_drv_rts_clear",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_libuarte_drv_rts_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "irq_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_libuarte",
        "type": "const nrf_libuarte_drv_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UARTE1_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fstorage_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_evt",
        "type": "nrf_fstorage_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "saturate_align_length",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msg_to_buf",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_msg",
        "type": "nrf_log_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "msg_from_buf",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_buf",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "pp_header",
        "type": "nrf_log_header_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_data",
        "type": "uint8_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_msg_queue_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "fstorage_blocking",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queue_element_drop",
    "return_type": "static void",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "message_enqueue",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msg",
        "type": "nrf_log_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_flashlog_put",
    "return_type": "void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msg",
        "type": "nrf_log_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_crashlog_put",
    "return_type": "void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msg",
        "type": "nrf_log_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_flashlog_flush",
    "return_type": "void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_crashlog_flush",
    "return_type": "void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_flashlog_panic_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crashlog_marker_inject",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_crashlog_panic_set",
    "return_type": "void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "empty_addr_get",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_flash_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_fs_api",
        "type": "nrf_fstorage_api_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_flash_next_entry_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_token",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_header",
        "type": "nrf_log_header_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_data",
        "type": "uint8_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_flash_erase",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cli_tx",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buffer",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flashlog_clear_cmd",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "entry_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_header",
        "type": "nrf_log_header_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flashlog_read_cmd",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flashlog_status_cmd",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_rtt_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "serial_tx",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "buffer",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_rtt_put",
    "return_type": "static void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msg",
        "type": "nrf_log_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_rtt_flush",
    "return_type": "static void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_rtt_panic_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_serial_put",
    "return_type": "void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msg",
        "type": "nrf_log_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "tx_func",
        "type": "nrf_fprintf_fwrite",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_uart_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_uart_put",
    "return_type": "static void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_msg",
        "type": "nrf_log_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_uart_flush",
    "return_type": "static void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_uart_panic_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_default_backends_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "timestamp_func",
        "type": "nrf_log_timestamp_func_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "timestamp_freq",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_module_cnt_get",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "module_idx_get",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_idx",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ordered_idx",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_color_id_get",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "module_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "severity",
        "type": "nrf_log_severity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "higher_lvl_get",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "lvls",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_module_filter_set",
    "return_type": "void",
    "params": [
      {
        "name": "backend_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "module_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "severity",
        "type": "nrf_log_severity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_module_init_filter_get",
    "return_type": "static nrf_log_severity_t",
    "params": [
      {
        "name": "module_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_module_filter_get",
    "return_type": "nrf_log_severity_t",
    "params": [
      {
        "name": "backend_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "module_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ordered_idx",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "dynamic",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "invalid_packets_omit",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_header",
        "type": "nrf_log_header_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rd_idx",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_skip",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dropped_sat16_get",
    "return_type": "static inline uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__USAT",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "dropped",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "16",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "std_header_set",
    "return_type": "static inline void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_str",
        "type": "char const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "nargs",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "wr_idx",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mask",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_pending_hook",
    "return_type": "__WEAK void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "buf_prealloc",
    "return_type": "static inline bool",
    "params": [
      {
        "name": "content_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_wr_idx",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "std",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "std_n",
    "return_type": "static inline void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_str",
        "type": "char const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "args",
        "type": "uint32_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "nargs",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_frontend_std_0",
    "return_type": "void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_str",
        "type": "char const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_frontend_std_1",
    "return_type": "void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_str",
        "type": "char const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "val0",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_frontend_std_2",
    "return_type": "void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_str",
        "type": "char const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "val0",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val1",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_frontend_std_3",
    "return_type": "void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_str",
        "type": "char const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "val0",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val1",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val2",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_frontend_std_4",
    "return_type": "void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_str",
        "type": "char const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "val0",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val1",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val2",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val3",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_frontend_std_5",
    "return_type": "void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_str",
        "type": "char const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "val0",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val1",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val2",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val3",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val4",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_frontend_std_6",
    "return_type": "void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_str",
        "type": "char const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "val0",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val1",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val2",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val3",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val4",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "val5",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_frontend_hexdump",
    "return_type": "void",
    "params": [
      {
        "name": "severity_mid",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "const void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "buffer_is_empty",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_frontend_dequeue",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_id_assign",
    "return_type": "static int32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_add",
    "return_type": "int32_t",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "severity",
        "type": "nrf_log_severity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_backend_remove",
    "return_type": "void",
    "params": [
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_panic",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_config_store",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_config_load",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_cli_backend_cmd_execute",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "func",
        "type": "nrf_log_cli_backend_cmd_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "log_status",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_self_status",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_backend_status",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "module_id_get",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_name",
        "type": "const char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_id",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "module_id_filter_set",
    "return_type": "static bool",
    "params": [
      {
        "name": "backend_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "module_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "lvl",
        "type": "nrf_log_severity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_ctrl",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_self_ctrl",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_backend_ctrl",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "module_name_get",
    "return_type": "static void",
    "params": [
      {
        "name": "idx",
        "type": "size_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_static",
        "type": "nrf_cli_static_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "severity_lvl_get",
    "return_type": "static void",
    "params": [
      {
        "name": "idx",
        "type": "size_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_static",
        "type": "nrf_cli_static_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_halt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_backend_halt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_self_halt",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_go",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_backend",
        "type": "nrf_log_backend_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_backend_go",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_self_go",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_cmd_backends_list",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "backend_name_get",
    "return_type": "static void",
    "params": [
      {
        "name": "idx",
        "type": "size_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_static",
        "type": "nrf_cli_static_entry_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_config_load_cmd",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_config_store_cmd",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "log_cmd",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timestamp_print",
    "return_type": "static void",
    "params": [
      {
        "name": "p_ctx",
        "type": "nrf_fprintf_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "timestamp",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "prefix_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_params",
        "type": "nrf_log_str_formatter_entry_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ctx",
        "type": "nrf_fprintf_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "postfix_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_params",
        "type": "nrf_log_str_formatter_entry_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ctx",
        "type": "nrf_fprintf_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "newline",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_std_entry_process",
    "return_type": "void",
    "params": [
      {
        "name": "p_str",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_args",
        "type": "uint32_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "nargs",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_params",
        "type": "nrf_log_str_formatter_entry_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ctx",
        "type": "nrf_fprintf_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_hexdump_entry_process",
    "return_type": "void",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_params",
        "type": "nrf_log_str_formatter_entry_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ctx",
        "type": "nrf_fprintf_ctx_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_log_str_formatter_timestamp_freq_set",
    "return_type": "void",
    "params": [
      {
        "name": "freq",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_memobj_pool_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_pool",
        "type": "nrf_memobj_pool_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_memobj_free",
    "return_type": "void",
    "params": [
      {
        "name": "p_obj",
        "type": "nrf_memobj_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_memobj_get",
    "return_type": "void",
    "params": [
      {
        "name": "p_obj",
        "type": "nrf_memobj_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_memobj_put",
    "return_type": "void",
    "params": [
      {
        "name": "p_obj",
        "type": "nrf_memobj_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "memobj_op",
    "return_type": "static void",
    "params": [
      {
        "name": "p_obj",
        "type": "nrf_memobj_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_memobj_write",
    "return_type": "void",
    "params": [
      {
        "name": "p_obj",
        "type": "nrf_memobj_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_memobj_read",
    "return_type": "void",
    "params": [
      {
        "name": "p_obj",
        "type": "nrf_memobj_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mpu_lib_get_number_of_regions",
    "return_type": "__STATIC_INLINE unsigned int",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mpu_lib_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mpu_lib_region_create",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_region",
        "type": "nrf_mpu_lib_region_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "address",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "attributes",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mpu_lib_region_destroy",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "region",
        "type": "nrf_mpu_lib_region_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mpu_lib_cmd_info",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mpu_lib_cmd_dump",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_mpu_lib_cmd_unknown",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_nvic_EnableIRQ",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "IRQn",
        "type": "IRQn_Type",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_nvic_DisableIRQ",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "IRQn",
        "type": "IRQn_Type",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_nvic_GetPendingIRQ",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "IRQn",
        "type": "IRQn_Type",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_pending_irq",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_nvic_SetPendingIRQ",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "IRQn",
        "type": "IRQn_Type",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_nvic_ClearPendingIRQ",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "IRQn",
        "type": "IRQn_Type",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_nvic_SetPriority",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "IRQn",
        "type": "IRQn_Type",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "priority",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_nvic_GetPriority",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "IRQn",
        "type": "IRQn_Type",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_priority",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_nvic_SystemReset",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "sd_nvic_critical_region_enter",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_is_nested_critical_region",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_nvic_critical_region_exit",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "is_nested_critical_region",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwr_mgmt_fpu_sleep_prepare",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwr_mgmt_debug_pins_init",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwr_mgmt_cpu_usage_monitor_init",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwr_mgmt_cpu_usage_monitor_update",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwr_mgmt_standby_timeout_clear",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwr_mgmt_standby_timeout_check",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwr_mgmt_auto_shutdown_retry",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwr_mgmt_sleep_init",
    "return_type": "__STATIC_INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_pwr_mgmt_timeout_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pwr_mgmt_timer_create",
    "return_type": "__STATIC_INLINE ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_pwr_mgmt_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "PWR_MGMT_TIMER_CREATE",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_pwr_mgmt_run",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_pwr_mgmt_feed",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "shutdown_process",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "scheduler_shutdown_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_pwr_mgmt_shutdown",
    "return_type": "void",
    "params": [
      {
        "name": "shutdown_type",
        "type": "nrf_pwr_mgmt_shutdown_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_status",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "circullar_buffer_size_get",
    "return_type": "__STATIC_INLINE size_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_next_idx",
    "return_type": "__STATIC_INLINE size_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "idx",
        "type": "size_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queue_utilization_get",
    "return_type": "__STATIC_INLINE size_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_is_full",
    "return_type": "bool",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_push",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_element",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_generic_pop",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_element",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "just_peek",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "continous_items_get",
    "return_type": "static size_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "write",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queue_write",
    "return_type": "static void",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "element_count",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "element_count",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_in",
    "return_type": "size_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "element_count",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "queue_read",
    "return_type": "static void",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "element_count",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "element_count",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_out",
    "return_type": "size_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "element_count",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_reset",
    "return_type": "void",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_utilization_get",
    "return_type": "size_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_is_empty",
    "return_type": "bool",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_available_get",
    "return_type": "size_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_max_utilization_get",
    "return_type": "size_t",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_queue_max_utilization_reset",
    "return_type": "void",
    "params": [
      {
        "name": "p_queue",
        "type": "nrf_queue_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ringbuf_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_ringbuf",
        "type": "nrf_ringbuf_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ringbuf_alloc",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ringbuf",
        "type": "nrf_ringbuf_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "pp_data",
        "type": "uint8_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "start",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ringbuf_put",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ringbuf",
        "type": "nrf_ringbuf_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ringbuf_cpy_put",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ringbuf",
        "type": "nrf_ringbuf_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ringbuf_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ringbuf",
        "type": "nrf_ringbuf_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "pp_data",
        "type": "uint8_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "start",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ringbuf_cpy_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ringbuf",
        "type": "nrf_ringbuf_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ringbuf_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_ringbuf",
        "type": "nrf_ringbuf_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdh_request_observer_notify",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "req",
        "type": "nrf_sdh_req_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdh_state_observer_notify",
    "return_type": "static void",
    "params": [
      {
        "name": "evt",
        "type": "nrf_sdh_state_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "softdevices_evt_irq_enable",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "softdevice_evt_irq_disable",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_enable_request",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_disable_request",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_request_continue",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_is_enabled",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_suspend",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_resume",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_is_suspended",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_evts_poll",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SD_EVT_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "appsh_events_poll",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_ant_enable",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_ant_evts_poll",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_ble_app_ram_start_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_app_ram_start",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_ble_default_cfg_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_cfg_tag",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_ram_start",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ram_end_address_get",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_ble_evts_poll",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "softdevice_task",
    "return_type": "static void",
    "params": [
      {
        "name": "pvParameter",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_freertos_init",
    "return_type": "void",
    "params": [
      {
        "name": "hook_fn",
        "type": "nrf_sdh_freertos_task_hook_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sdh_soc_evts_poll",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_section_iter_item_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_iter",
        "type": "nrf_section_iter_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_section_iter_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_iter",
        "type": "nrf_section_iter_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_set",
        "type": "nrf_section_set_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_section_iter_next",
    "return_type": "void",
    "params": [
      {
        "name": "p_iter",
        "type": "nrf_section_iter_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_app_evt_wait",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ecb_block_encrypt_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_ecb_data",
        "type": "nrf_ecb_hal_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ecb_block_encrypt_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_ecb_data",
        "type": "nrf_ecb_hal_data_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "power_system_off_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "temp_get_req_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_temp",
        "type": "int32_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "temp_get_rsp_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_result_code",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "pp_temp",
        "type": "int32_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ecb_block_encrypt_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_ecb_data",
        "type": "nrf_ecb_hal_data_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ecb_block_encrypt_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_ecb_data",
        "type": "nrf_ecb_hal_data_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "power_system_off_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "temp_get_req_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "packet_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_temp",
        "type": "int32_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "temp_get_rsp_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "return_code",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint32_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_temp",
        "type": "int32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ecb_hal_data_t_in_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ecb_hal_data_t_in_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ecb_hal_data_t_out_enc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_void_struct",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_ecb_hal_data_t_out_dec",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_index",
        "type": "uint32_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_void_struct",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sortlist_add",
    "return_type": "void",
    "params": [
      {
        "name": "p_list",
        "type": "nrf_sortlist_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_item",
        "type": "nrf_sortlist_item_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sortlist_remove",
    "return_type": "bool",
    "params": [
      {
        "name": "p_list",
        "type": "nrf_sortlist_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_item",
        "type": "nrf_sortlist_item_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "start_transfer",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_nrf_spi_mngr",
        "type": "nrf_spi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "transaction_begin_signal",
    "return_type": "static void",
    "params": [
      {
        "name": "p_nrf_spi_mngr",
        "type": "nrf_spi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "transaction_end_signal",
    "return_type": "static void",
    "params": [
      {
        "name": "p_nrf_spi_mngr",
        "type": "nrf_spi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "result",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "nrf_drv_spi_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "start_pending_transaction",
    "return_type": "static void",
    "params": [
      {
        "name": "p_nrf_spi_mngr",
        "type": "nrf_spi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "switch_transaction",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_spi_mngr_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_nrf_spi_mngr",
        "type": "nrf_spi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_default_spi_config",
        "type": "nrf_drv_spi_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_spi_mngr_uninit",
    "return_type": "void",
    "params": [
      {
        "name": "p_nrf_spi_mngr",
        "type": "nrf_spi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_spi_mngr_schedule",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_nrf_spi_mngr",
        "type": "nrf_spi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_transaction",
        "type": "nrf_spi_mngr_transaction_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_internal_transaction_cb",
    "return_type": "static void",
    "params": [
      {
        "name": "result",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_user_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_stack_guard_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SVC_Handler",
    "return_type": "__ASM void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__cpp",
    "return_type": "B",
    "params": [
      {
        "name": "param",
        "type": "nrf_svc_handler_c",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_sw_backend_hash_sha256_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_sw_backend_hash_sha256_update",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_context",
        "type": "void     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_sw_backend_hash_sha256_finalize",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_context",
        "type": "void   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_len",
        "type": "size_t    * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "twi_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "nrf_drv_twi_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_twi_mngr_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_nrf_twi_mngr",
        "type": "nrf_twi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_default_twi_config",
        "type": "nrf_drv_twi_config_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_twi_mngr_uninit",
    "return_type": "void",
    "params": [
      {
        "name": "p_nrf_twi_mngr",
        "type": "nrf_twi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_twi_mngr_schedule",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_nrf_twi_mngr",
        "type": "nrf_twi_mngr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_transaction",
        "type": "nrf_twi_mngr_transaction_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "internal_transaction_cb",
    "return_type": "static void",
    "params": [
      {
        "name": "result",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_user_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_twi_sensor_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_twi_sensor",
        "type": "nrf_twi_sensor_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_read_reg_cb",
    "return_type": "static void",
    "params": [
      {
        "name": "result",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_user_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_write_reg_cb",
    "return_type": "static void",
    "params": [
      {
        "name": "result",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_user_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_twi_sensor_reg_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_instance",
        "type": "nrf_twi_sensor_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "sensor_addr",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reg_address",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_oberon_private_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_oberon_public_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_oberon_public_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_oberon_private_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oberon_vector_generate",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_oberon_ecc_secp256r1_rng",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "data[32]",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp256r1_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp256r1_public_key_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_curve25519_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_backend_curve25519_public_key_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_ed25519_private_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_ed25519_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp256r1_ecdh_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_shared_secret",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_curve25519_ecdh_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_shared_secret",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_secp256r1_sign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hash_sha256_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hash_sha256_update",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_context",
        "type": "void     * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hash_sha256_finalize",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "p_context",
        "type": "void   * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t    * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hash_sha512_init",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hash_sha512_update",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void    * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hash_sha512_finalize",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void  * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest_size",
        "type": "size_t     * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hmac_init_sha256",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key_size",
        "type": "size_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hmac_update_sha256",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void    * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hmac_finalize_sha256",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_size",
        "type": "size_t    * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hmac_init_sha512",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_key",
        "type": "uint8_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key_size",
        "type": "size_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hmac_update_sha512",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void    * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "oberon_backend_hmac_finalize_sha512",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void      * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_digest",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_size",
        "type": "size_t    * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_ecc_optiga_rng",
    "return_type": "int",
    "params": [
      {
        "name": "p_param",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_data",
        "type": "unsigned char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.2: ECC routine. Use NIST P-256; validate public keys and ensure RNG strength.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_key_pair_generate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_public_key_calculate",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_private_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_private_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_public_key_from_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_public_key_to_raw",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_raw_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_private_key_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_private_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_public_key_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "void *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_ecdh_compute",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_shared_secret",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic primitive. Verify FIPS 140-3 validation and correct algorithm use.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_sign",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_private_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "nrf_crypto_backend_optiga_verify",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "void const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_data",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_signature",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pal_gpio_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pal_os_event_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "optiga_init",
    "return_type": "static int32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "optiga_backend_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "optiga_backend_uninit",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "asn1_to_ecdsa_rs",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_asn1",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "asn1_len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_rs",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_rs_len",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ecdsa_rs_to_asn1",
    "return_type": "bool",
    "params": [
      {
        "name": "p_r",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "r_len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_s",
        "type": "uint8_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "s_len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_asn_sig",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_asn_sig_len",
        "type": "size_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_instances",
        "type": "pcal6408a_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "count",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_default_cfg_set",
    "return_type": "static void",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_add_instance",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_twi_sensor",
        "type": "nrf_twi_sensor_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "sensor_address",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_cfg_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_cfg_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_pin_data_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "user_cb",
        "type": "nrf_twi_sensor_reg_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_int_status_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "user_cb",
        "type": "nrf_twi_sensor_reg_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_pin_cfg_reg_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "reg_addr",
        "type": "pcal6408a_registers_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pin",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_pin_cfg_reg_get",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "reg_addr",
        "type": "pcal6408a_registers_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pin",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_port_cfg_reg_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "reg_addr",
        "type": "pcal6408a_registers_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "port",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "flag",
        "type": "pcal6408a_port_op_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_port_cfg_reg_get",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "reg_addr",
        "type": "pcal6408a_registers_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "port",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_pin_cfg_drive_strength",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "drive_strength_config",
        "type": "pcal6408a_pin_drive_strength_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_port_cfg_drive_strength",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "port_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "drive_strength_mask",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "flag",
        "type": "pcal6408a_port_op_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_pin_cfg_input",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pull_config",
        "type": "pcal6408a_pin_pull_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_range_cfg_output",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_range_start",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pin_range_end",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_port_pull_cfg_set",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "port",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pull_config",
        "type": "pcal6408a_pin_pull_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pcal6408a_range_cfg_input",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_range_start",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pin_range_end",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pull_config",
        "type": "pcal6408a_pin_pull_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_pdb_evt_handler",
    "return_type": "extern void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_pdb_evt_handler",
    "return_type": "extern void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_buffer_record_invalidate",
    "return_type": "static void",
    "params": [
      {
        "name": "p_record",
        "type": "pdb_buffer_record_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_buffer_record_find",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "PM_PEER_ID_INVALID",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "PM_PEER_DATA_ID_INVALID",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_buffer_record_release",
    "return_type": "static void",
    "params": [
      {
        "name": "p_write_buffer_record",
        "type": "pdb_buffer_record_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_buffer_record_acquire",
    "return_type": "static void",
    "params": [
      {
        "name": "pp_write_buffer_record",
        "type": "pdb_buffer_record_t **",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pdb_evt_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_data_point_to_buffer",
    "return_type": "static void",
    "params": [
      {
        "name": "p_peer_data",
        "type": "pm_peer_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buffer_memory",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "n_bufs",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_data_const_point_to_buffer",
    "return_type": "static void",
    "params": [
      {
        "name": "p_peer_data",
        "type": "pm_peer_data_const_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_buffer_memory",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "n_bufs",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_buf_length_words_set",
    "return_type": "static void",
    "params": [
      {
        "name": "p_peer_data",
        "type": "pm_peer_data_const_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_buf_store",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_write_buffer_record",
        "type": "pdb_buffer_record_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "write_buf_store_in_event",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_write_buffer_record",
        "type": "pdb_buffer_record_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "reattempt_previous_operations",
    "return_type": "static void",
    "params": [
      {
        "name": "retry_flash_full",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pdb_pds_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pdb_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pdb_peer_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pdb_peer_data_ptr_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_data",
        "type": "pm_peer_data_flash_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pdb_write_buf_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "n_bufs",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_peer_data",
        "type": "pm_peer_data_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pdb_write_buf_release",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pdb_write_buf_store",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "new_peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_evt_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_to_file_id",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "file_id_to_peer_id",
    "return_type": "static pm_peer_id_t",
    "params": [
      {
        "name": "file_id",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_data_id_to_record_key",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "peer_data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_key_to_peer_data_id",
    "return_type": "static pm_peer_data_id_t",
    "params": [
      {
        "name": "record_key",
        "type": "uint16_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "file_id_within_pm_range",
    "return_type": "static bool",
    "params": [
      {
        "name": "file_id",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "record_key_within_pm_range",
    "return_type": "static bool",
    "params": [
      {
        "name": "record_key",
        "type": "uint16_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_data_id_is_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_data_delete_process",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_data_find",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_desc",
        "type": "fds_record_desc_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_ids_load",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fds_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_fds_evt",
        "type": "fds_evt_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_peer_data_iterate_prepare",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_peer_data_iterate",
    "return_type": "bool",
    "params": [
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_id",
        "type": "pm_peer_id_t         * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "pm_peer_data_flash_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_peer_data_store",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_data",
        "type": "pm_peer_data_const_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_store_token",
        "type": "pm_store_token_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_peer_data_delete",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_peer_id_allocate",
    "return_type": "pm_peer_id_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_allocate",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "PM_PEER_ID_INVALID",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_peer_id_free",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_peer_id_is_allocated",
    "return_type": "bool",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_is_allocated",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "peer_id",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_peer_id_is_deleted",
    "return_type": "bool",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_is_deleted",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "peer_id",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_next_peer_id_get",
    "return_type": "pm_peer_id_t",
    "params": [
      {
        "name": "prev_peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_get_next_used",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "prev_peer_id",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_next_deleted_peer_id_get",
    "return_type": "pm_peer_id_t",
    "params": [
      {
        "name": "prev_peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_get_next_deleted",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "prev_peer_id",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pds_peer_count_get",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_n_ids",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "claim",
    "return_type": "static pm_peer_id_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_id_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "release",
    "return_type": "static void",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_id_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_delete",
    "return_type": "bool",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_id_free",
    "return_type": "void",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "next_id_get",
    "return_type": "pm_peer_id_t",
    "params": [
      {
        "name": "prev_peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_id_flags",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rank_vars_update",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_sm_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_sm_evt",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "is_conn_handle_excluded",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_sec_params_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_conn_secure",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "force_repairing",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_conn_exclude",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_conn_sec_config_reply",
    "return_type": "void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_sec_config",
        "type": "pm_conn_sec_config_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_conn_sec_params_reply",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_sec_params_reply",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "conn_handle",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_sec_params",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_context",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_local_database_has_changed",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_id_addr_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_id_addr_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_privacy_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_privacy_params",
        "type": "pm_privacy_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_privacy_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_privacy_params",
        "type": "pm_privacy_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_address_resolve",
    "return_type": "bool",
    "params": [
      {
        "name": "p_addr",
        "type": "ble_gap_addr_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_irk",
        "type": "ble_gap_irk_t const *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_whitelist_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_peers",
        "type": "pm_peer_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "peer_cnt",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_whitelist_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_addrs",
        "type": "ble_gap_addr_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_addr_cnt",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_irks",
        "type": "ble_gap_irk_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_irk_cnt",
        "type": "uint32_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_device_identities_list_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_peers",
        "type": "pm_peer_id_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "peer_cnt",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_conn_sec_status_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_sec_status",
        "type": "pm_conn_sec_status_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_conn_sec_status_get",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "conn_handle",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_conn_sec_status",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_sec_is_sufficient",
    "return_type": "bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_status_req",
        "type": "pm_conn_sec_status_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_sec_is_sufficient",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "conn_handle",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "p_sec_status_req",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_lesc_public_key_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_public_key",
        "type": "ble_gap_lesc_p256_pk_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_lesc_public_key_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "p_public_key",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_conn_handle_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_handle",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_id_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_id",
        "type": "pm_peer_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_count",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_next_peer_id_get",
    "return_type": "pm_peer_id_t",
    "params": [
      {
        "name": "prev_peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "peer_is_irk",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_irk",
        "type": "ble_gap_irk_t const * const",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_peer_id_list",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_peer_list",
        "type": "pm_peer_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_list_size",
        "type": "uint32_t       * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "first_peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "skip_id",
        "type": "pm_peer_id_list_skip_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_data_load",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_data_bonding_load",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "pm_peer_data_bonding_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_peer_data_remote_db_load",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "ble_gatt_db_srv_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_data_app_data_load",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_length",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_data_store",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_token",
        "type": "pm_store_token_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_data_bonding_store",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "pm_peer_data_bonding_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_token",
        "type": "pm_store_token_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_peer_data_remote_db_store",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "ble_gatt_db_srv_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_token",
        "type": "pm_store_token_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_data_app_data_store",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_data",
        "type": "void const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_token",
        "type": "pm_store_token_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_data_delete",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_id",
        "type": "pm_peer_data_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_new",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_new_peer_id",
        "type": "pm_peer_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_bonding_data",
        "type": "pm_peer_data_bonding_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_token",
        "type": "pm_store_token_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_delete",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peers_delete",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_ranks_get",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_highest_ranked_peer",
        "type": "pm_peer_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_highest_rank",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lowest_ranked_peer",
        "type": "pm_peer_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_lowest_rank",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rank_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_peer_rank_highest",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_conn_secure",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "force",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "delayed_conn_secure",
    "return_type": "static void",
    "params": [
      {
        "name": "context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_secure",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "force",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_handler_on_pm_evt",
    "return_type": "void",
    "params": [
      {
        "name": "p_pm_evt",
        "type": "pm_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_handler_flash_clean_on_return",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rank_highest",
    "return_type": "static void",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_handler_flash_clean",
    "return_type": "void",
    "params": [
      {
        "name": "p_pm_evt",
        "type": "pm_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_handler_pm_evt_log",
    "return_type": "void",
    "params": [
      {
        "name": "p_pm_evt",
        "type": "pm_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_handler_disconnect_on_sec_failure",
    "return_type": "void",
    "params": [
      {
        "name": "p_pm_evt",
        "type": "pm_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_handler_disconnect_on_insufficient_sec",
    "return_type": "void",
    "params": [
      {
        "name": "p_pm_evt",
        "type": "pm_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_min_conn_sec",
        "type": "pm_conn_sec_status_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_handler_secure_on_connection",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "pm_handler_secure_on_error",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mutex_lock",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_mutex",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mutex_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mutex_unlock",
    "return_type": "static void",
    "params": [
      {
        "name": "p_mutex",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mutex_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mutex_lock_status_get",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_mutex",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "mutex_id",
        "type": "uint32_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_buffer_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "pm_buffer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buffer_memory",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buffer_memory_size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_mutex_memory",
        "type": "nrf_atflags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "n_blocks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "block_size",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_buffer_block_acquire",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "pm_buffer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "n_blocks",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pm_buffer_release",
    "return_type": "void",
    "params": [
      {
        "name": "p_buffer",
        "type": "pm_buffer_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "id",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "swap_bits",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "inp",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bytewise_bitswap",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "inp",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "radio_configure",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fgetc",
    "return_type": "int",
    "params": [
      {
        "name": "p_file",
        "type": "FILE *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fputc",
    "return_type": "int",
    "params": [
      {
        "name": "ch",
        "type": "int",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_file",
        "type": "FILE *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__getchar",
    "return_type": "int",
    "params": [
      {
        "name": "p_file",
        "type": "FILE *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "__putchar",
    "return_type": "int",
    "params": [
      {
        "name": "ch",
        "type": "int",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "tag_ptr",
        "type": "__printf_tag_ptr",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.7: GATT operation. Enforce attribute permissions and sanitize input lengths.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "_write",
    "return_type": "int",
    "params": [
      {
        "name": "file",
        "type": "int",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_char",
        "type": "const char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "int",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_read",
    "return_type": "int",
    "params": [
      {
        "name": "file",
        "type": "int",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "p_char",
        "type": "char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "int",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__write",
    "return_type": "size_t",
    "params": [
      {
        "name": "handle",
        "type": "int",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buffer",
        "type": "const unsigned char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__read",
    "return_type": "size_t",
    "params": [
      {
        "name": "handle",
        "type": "int",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buffer",
        "type": "unsigned char *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__lseek",
    "return_type": "long",
    "params": [
      {
        "name": "handle",
        "type": "int",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "long",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "whence",
        "type": "int",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__close",
    "return_type": "int",
    "params": [
      {
        "name": "handle",
        "type": "int",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "remove",
    "return_type": "int",
    "params": [
      {
        "name": "filename",
        "type": "const char *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hal_rand_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-90A: Random number generation. Use approved DRBG or on-chip TRNG; never reuse nonces.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "hal_rand_get",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-90A: Random number generation. Use approved DRBG or on-chip TRNG; never reuse nonces.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "nrf_rng_random_value_get",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-90A: Random number generation. Use approved DRBG or on-chip TRNG; never reuse nonces.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "sdio_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdio_read_burst",
    "return_type": "void",
    "params": [
      {
        "name": "target_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "target_buffer_size",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdio_write_byte",
    "return_type": "void",
    "params": [
      {
        "name": "address",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data_byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_set_by_index",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_flags",
        "type": "sdk_mapped_flags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_clear_by_index",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_flags",
        "type": "sdk_mapped_flags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_get_by_index",
    "return_type": "static __INLINE bool",
    "params": [
      {
        "name": "flags",
        "type": "sdk_mapped_flags_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_first_key_index_get",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "flags",
        "type": "sdk_mapped_flags_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_update_by_key",
    "return_type": "void",
    "params": [
      {
        "name": "p_keys",
        "type": "uint16_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_flags",
        "type": "sdk_mapped_flags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "key",
        "type": "uint16_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "value",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_bulk_update_by_key",
    "return_type": "void",
    "params": [
      {
        "name": "p_keys",
        "type": "uint16_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_flags",
        "type": "sdk_mapped_flags_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "n_flag_collections",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "key",
        "type": "uint16_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "value",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_get_by_key_w_idx",
    "return_type": "bool",
    "params": [
      {
        "name": "p_keys",
        "type": "uint16_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "flags",
        "type": "sdk_mapped_flags_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "key",
        "type": "uint16_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_index",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_get_by_key",
    "return_type": "bool",
    "params": [
      {
        "name": "p_keys",
        "type": "uint16_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "flags",
        "type": "sdk_mapped_flags_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "key",
        "type": "uint16_t",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_key_list_get",
    "return_type": "sdk_mapped_flags_key_list_t",
    "params": [
      {
        "name": "p_keys",
        "type": "uint16_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "flags",
        "type": "sdk_mapped_flags_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdk_mapped_flags_n_flags_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "flags",
        "type": "sdk_mapped_flags_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_smd_evt_handler",
    "return_type": "extern void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sec_procedure",
    "return_type": "static __INLINE bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pairing",
    "return_type": "static __INLINE bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "bonding",
    "return_type": "static __INLINE bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "allow_repairing",
    "return_type": "static __INLINE bool",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sec_start_send",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "procedure",
        "type": "pm_conn_sec_procedure_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "send_storage_full_evt",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_sec_failure",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "procedure",
        "type": "pm_conn_sec_procedure_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "error",
        "type": "pm_sec_error_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "error_src",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pairing_failure",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "error",
        "type": "pm_sec_error_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "error_src",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "encryption_failure",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "error",
        "type": "pm_sec_error_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "error_src",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_secure_failure",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "error",
        "type": "pm_sec_error_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "error_src",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sec_proc_start",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "success",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "procedure",
        "type": "pm_conn_sec_procedure_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sec_info_request_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "send_config_req",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smd_conn_sec_config_reply",
    "return_type": "void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_sec_config",
        "type": "pm_conn_sec_config_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "disconnect_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "send_params_req",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_params",
        "type": "ble_gap_sec_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sec_params_request_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pairing_success_evt_send",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "data_stored",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 5.8: SMP routine. Use authenticated LE Secure Connections (ECDH) and protect key material.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "auth_status_success_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "auth_status_failure_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "auth_status_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "conn_sec_update_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flag_id_init",
    "return_type": "static void",
    "params": [
      {
        "name": "p_flag_id",
        "type": "ble_conn_state_user_flag_id_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smd_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sec_keyset_fill",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "role",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_public_key",
        "type": "ble_gap_lesc_p256_pk_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p_sec_keyset",
        "type": "ble_gap_sec_keyset_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smd_params_reply",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_public_key",
        "type": "ble_gap_lesc_p256_pk_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_secure_authenticate",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_secure_central_encryption",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_secure_central",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "force_repairing",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sec_request_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_gap_evt",
        "type": "ble_gap_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_secure_peripheral",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smd_link_secure",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "force_repairing",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smd_ble_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "flags_set_from_err_code",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "err_code",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "params_reply",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "new_evt",
    "return_type": "static inline pm_evt_t",
    "params": [
      {
        "name": "evt_id",
        "type": "pm_evt_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "key_is_lesc",
    "return_type": "static bool",
    "params": [
      {
        "name": "peer_id",
        "type": "pm_peer_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "events_send_from_err_code",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "err_code",
        "type": "ret_code_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "params_req_send",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_params",
        "type": "ble_gap_sec_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "sec_params_reply_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "new_context_get",
    "return_type": "static sec_params_reply_context_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_secure",
    "return_type": "static ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "null_params",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "force_repairing",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "send_events",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smd_params_reply_perform",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_peer_params",
        "type": "ble_gap_sec_params_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "params_req_process",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sec_req_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "evt_forward",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "pm_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "params_reply_pending_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_secure_pending_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_init",
    "return_type": "ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_ble_evt_handler",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sec_params_verify",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_sec_params_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_sec_params",
        "type": "ble_gap_sec_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_conn_sec_config_reply",
    "return_type": "void",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_conn_sec_config",
        "type": "pm_conn_sec_config_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_link_secure",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "conn_handle",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "force_repairing",
        "type": "bool",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "aes_entity_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "aes_handle",
    "return_type": "void",
    "params": [
      {
        "name": "key",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. Store securely, wipe after use, and rotate per NIST SP 800-57.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "text",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 4.1: AES cryptographic function. Use FIPS-validated AES-CCM (≥128-bit keys); secure key storage and IV uniqueness mandatory.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sensorsim_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_state",
        "type": "sensorsim_state_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cfg",
        "type": "const sensorsim_cfg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorsim_measure",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_state",
        "type": "sensorsim_state_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cfg",
        "type": "const sensorsim_cfg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorsim_increment",
    "return_type": "void",
    "params": [
      {
        "name": "p_state",
        "type": "sensorsim_state_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cfg",
        "type": "const sensorsim_cfg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorsim_decrement",
    "return_type": "void",
    "params": [
      {
        "name": "p_state",
        "type": "sensorsim_state_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_cfg",
        "type": "const sensorsim_cfg_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_app_hal_hw_init",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "handler",
        "type": "ser_app_hal_flash_op_done_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_app_hal_delay",
    "return_type": "void",
    "params": [
      {
        "name": "ms",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_app_hal_nrf_reset_pin_clear",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_app_hal_nrf_reset_pin_set",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_app_hal_nrf_evt_irq_priority_set",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_app_hal_nrf_evt_pending",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ppi_channel_enable_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_channel_enable",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ppi_channel_enable_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel_enable_set_msk",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ppi_channel_assign",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "channel_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "evt_endpoint",
        "type": "const volatile void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "task_endpoint",
        "type": "const volatile void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "addr_is_in_FLASH",
    "return_type": "__STATIC_INLINE bool",
    "params": [
      {
        "name": "ptr",
        "type": "void const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_app_power_system_off_set",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "ser_app_power_system_off_get",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "ser_app_power_system_off_enter",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL || Deprecated unsafe routine. Replace with bounds-checked alternatives (e.g., strncpy, snprintf).",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "ser_conn_command_process",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_command",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "command_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_dtm_command_process",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_command",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "command_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_is_ready_to_enter_dtm",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_ble_event_encoder",
    "return_type": "void",
    "params": [
      {
        "name": "p_event_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_ant_event_encoder",
    "return_type": "void",
    "params": [
      {
        "name": "p_event_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_on_no_mem_handler_set",
    "return_type": "void",
    "params": [
      {
        "name": "handler",
        "type": "ser_conn_on_no_mem_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_on_no_mem_handler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_hal_transport_event_handle",
    "return_type": "void",
    "params": [
      {
        "name": "event",
        "type": "ser_hal_transport_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_rx_process",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_reset",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_ble_event_handle",
    "return_type": "void",
    "params": [
      {
        "name": "p_ble_evt",
        "type": "ble_evt_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_ant_event_handle",
    "return_type": "void",
    "params": [
      {
        "name": "p_ant_evt",
        "type": "ant_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_received_pkt_process",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_rx_pkt_params",
        "type": "ser_hal_transport_evt_rx_pkt_received_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_hci_reset",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_start_from_app_sched",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event_data",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "event_size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sdh_observer_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "state",
        "type": "nrf_sdh_state_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "soft_reset_trigger",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_conn_generic_command_process",
    "return_type": "void",
    "params": [
      {
        "name": "p_command",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "command_len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "phy_events_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "phy_event",
        "type": "ser_phy_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_hal_transport_reset",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_hal_transport_open",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "events_handler",
        "type": "ser_hal_transport_events_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_hal_transport_close",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_hal_transport_rx_pkt_free",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_hal_transport_tx_pkt_alloc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_memory",
        "type": "uint8_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_num_of_bytes",
        "type": "uint16_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_hal_transport_tx_pkt_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "num_of_bytes",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_hal_transport_tx_pkt_free",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_open",
    "return_type": "__weak uint32_t",
    "params": [
      {
        "name": "events_handler",
        "type": "ser_phy_events_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_tx_pkt_send",
    "return_type": "__weak uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "num_of_bytes",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_rx_buf_set",
    "return_type": "__weak uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_close",
    "return_type": "__weak void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_interrupts_enable",
    "return_type": "__weak void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_interrupts_disable",
    "return_type": "__weak void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_tx_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "hci_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_rx_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "hci_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_link_control_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "hci_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_signal_timeout_event",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TIMER_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_timeout_setup",
    "return_type": "static void",
    "params": [
      {
        "name": "count",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_timeout_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_ack_get",
    "return_type": "static __INLINE uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_seq_get",
    "return_type": "static __INLINE uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "next_expected_ack_number_get",
    "return_type": "static __INLINE uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rx_ack_pkt_valid",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_control_packet_decode",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_event_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "ser_phy_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "memory_request_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_received_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "pBuffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_dropped_callback",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_transmitted_callback",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "error_callback",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_slip_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "ser_phy_hci_slip_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_pkt_send",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_link_control_pkt_send",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_pkt_sent_upcall",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_release_ack_buffer",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "hci_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_process_orphaned_ack",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "hci_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_tx_fsm_event_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "hci_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_mem_request",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "hci_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_inc_ack",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_rx_fsm_event_process",
    "return_type": "static void",
    "params": [
      {
        "name": "p_event",
        "type": "hci_evt_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_tx_fsm",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_rx_fsm",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_tx_reschedule",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_rx_reschedule",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_timer_reset",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_timer_init",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_timer_close",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_buf_put",
    "return_type": "static bool",
    "params": [
      {
        "name": "data_byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tx_buf_fill",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "switch",
    "return_type": "else",
    "params": [
      {
        "name": "param",
        "type": "m_tx_phase",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_hci_slip_tx_pkt_send",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_header",
        "type": "const ser_phy_hci_pkt_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_payload",
        "type": "const ser_phy_hci_pkt_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_crc",
        "type": "const ser_phy_hci_pkt_params_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "slip_decode",
    "return_type": "static bool",
    "params": [
      {
        "name": "p_received_byte",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phi_hci_rx_byte",
    "return_type": "static void",
    "params": [
      {
        "name": "rx_byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_hci_slip_rx_buf_free",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_buffer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_hci_slip_reset",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_hci_slip_open",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "events_handler",
        "type": "ser_phy_hci_slip_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_hci_slip_close",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_nohci_assert",
    "return_type": "static void",
    "params": [
      {
        "name": "cond",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_switch_state",
    "return_type": "static void",
    "params": [
      {
        "name": "evt_src",
        "type": "ser_phy_event_source_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_raw_assert",
    "return_type": "static void",
    "params": [
      {
        "name": "cond",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SW_IRQ_Handler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_spi_master_ready",
    "return_type": "static void",
    "params": [
      {
        "name": "pin",
        "type": "nrf_drv_gpiote_pin_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "action",
        "type": "nrf_gpiote_polarity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_spi_master_request",
    "return_type": "static void",
    "params": [
      {
        "name": "pin",
        "type": "nrf_drv_gpiote_pin_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "action",
        "type": "nrf_gpiote_polarity_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "callback_packet_sent",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "callback_packet_dropped",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "callback_packet_received",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "callback_mem_request",
    "return_type": "static __INLINE void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "copy_buff",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_dest",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_src",
        "type": "uint8_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "buffer_release",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "pp_buffer",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "compute_current_packet_length",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "packet_length",
        "type": "const uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "accumulated_packet_length",
        "type": "const uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "header_send",
    "return_type": "static __INLINE uint32_t",
    "params": [
      {
        "name": "length",
        "type": "const uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_send_recv",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "SER_PHY_SPI_MASTER",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "m_len_buffer",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "buf_len_size",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "0",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "frame_send",
    "return_type": "static __INLINE uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "header_get",
    "return_type": "static __INLINE uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "frame_get",
    "return_type": "static __INLINE uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_spi_master_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "spi_master_evt",
        "type": "spi_master_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_init_pendSV",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_init_gpiote",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_deinit_gpiote",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "debug_evt",
    "return_type": "void",
    "params": [
      {
        "name": "evt",
        "type": "spi_master_raw_evt_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "debug_init",
    "return_type": "void",
    "params": [
      {
        "name": "spi_master_raw_evt_callback",
        "type": "spi_master_raw_callback_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_slave_raw_assert",
    "return_type": "static void",
    "params": [
      {
        "name": "cond",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "callback_ser_phy_event",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "ser_phy_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "callback_memory_request",
    "return_type": "static void",
    "params": [
      {
        "name": "size",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "callback_packet_transmitted",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "compute_current_frame_length",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "packet_length",
        "type": "const uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "accumulated_packet_length",
        "type": "const uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_ready_line",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_request_line",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "clear_request_line",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_slave_event_handle",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "nrf_drv_spis_event_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_slave_gpiote_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_slave_ppi_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_slave_gpio_init",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_phy_init_PendSV",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_sent_callback",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "buffer_request_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "num_of_bytes",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hardware_error_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "hw_error",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_rx_start",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "packet_byte_drop",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_transport_rx_packet_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_transport_hal_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "ser_hal_transport_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_transport_open",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "ble_evt_handler",
        "type": "ser_sd_transport_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ant_evt_handler",
        "type": "ser_sd_transport_evt_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "os_rsp_wait_handler",
        "type": "ser_sd_transport_rsp_wait_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "os_rsp_set_handler",
        "type": "ser_sd_transport_rsp_set_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rx_not_handler",
        "type": "ser_sd_transport_rx_notification_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_transport_close",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_transport_ot_rsp_wait_handler_set",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "handler",
        "type": "ser_sd_transport_rsp_wait_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_transport_is_busy",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_transport_tx_alloc",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "pp_data",
        "type": "uint8_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_transport_tx_free",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_transport_rx_free",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management. Validate allocation size; clear sensitive buffers before free.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "os_rsp_set_handler",
    "return_type": "__WEAK void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "connectivity_reset_low",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "connectivity_reset_high",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 5.2: GAP operation. Require LE Secure Connections and privacy-enabled addresses.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ser_softdevice_ble_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_softdevice_ant_evt_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "length",
        "type": "uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_softdevice_flash_operation_success_evt",
    "return_type": "void",
    "params": [
      {
        "name": "success",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ser_sd_rsp_wait",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_evt_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_evt_id",
        "type": "uint32_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ble_evt_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_len",
        "type": "uint16_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ant_event_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_channel",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_event",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_ant_mesg",
        "type": "uint8_t*",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_ble_evt_mailbox_length_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "p_mailbox_length",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sd_softdevice_disable",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sha256_transform",
    "return_type": "void",
    "params": [
      {
        "name": "ctx",
        "type": "sha256_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sha256_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "ctx",
        "type": "sha256_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sha256_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "ctx",
        "type": "sha256_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "const uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sha256_final",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "ctx",
        "type": "sha256_context_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "hash",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "le",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Hash function. Prefer SHA-256 or stronger; protect against length-extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-3",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "slip_encode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_output",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_input",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "input_length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_output_buffer_length",
        "type": "uint32_t *",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "slip_decode_add_byte",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_slip",
        "type": "slip_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "c",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_send_recv_irq",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_spi_instance",
        "type": "spi_master_instance_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_signal_evt",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_spi_instance",
        "type": "spi_master_instance_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "event_type",
        "type": "spi_master_evt_type_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "const uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SPI0_TWI0_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SPI1_TWI1_IRQHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_init_hw_instance",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_nrf_spi",
        "type": "NRF_SPI_Type *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "irq_type",
        "type": "IRQn_Type",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_spi_instance",
        "type": "spi_master_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_buffer_init",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_buf",
        "type": "uint8_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "buf_len",
        "type": "const uint16_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pp_buf",
        "type": "uint8_t * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_index",
        "type": "uint16_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_buffer_release",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "pp_buf",
        "type": "uint8_t * * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "p_buf_len",
        "type": "uint16_t * const",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_send_initial_bytes",
    "return_type": "static __INLINE void",
    "params": [
      {
        "name": "p_spi_instance",
        "type": "spi_master_instance_t * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_open",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "spi_master_hw_instance",
        "type": "const spi_master_hw_instance_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "p_spi_master_config",
        "type": "spi_master_config_t const * const",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_close",
    "return_type": "void",
    "params": [
      {
        "name": "spi_master_hw_instance",
        "type": "const spi_master_hw_instance_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_get_state",
    "return_type": "__INLINE spi_master_state_t",
    "params": [
      {
        "name": "spi_master_hw_instance",
        "type": "const spi_master_hw_instance_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_evt_handler_reg",
    "return_type": "__INLINE void",
    "params": [
      {
        "name": "spi_master_hw_instance",
        "type": "const spi_master_hw_instance_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "event_handler",
        "type": "spi_master_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_abort",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "spi_master_hw_instance",
        "type": "const spi_master_hw_instance_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_master_restart",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "spi_master_hw_instance",
        "type": "const spi_master_hw_instance_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_5W_master_event_handler",
    "return_type": "static void",
    "params": [
      {
        "name": "evt",
        "type": "spi_master_evt_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "spi_5W_master_evt_handler_reg",
    "return_type": "void",
    "params": [
      {
        "name": "spi_master_hw_instance",
        "type": "const spi_master_hw_instance_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "event_handler",
        "type": "spi_master_event_handler_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "st7735_init",
    "return_type": "static ret_code_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "st7735_uninit",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "st7735_pixel_draw",
    "return_type": "static void",
    "params": [
      {
        "name": "x",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "st7735_rect_draw",
    "return_type": "static void",
    "params": [
      {
        "name": "x",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "y",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "width",
        "type": "uint16_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "height",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "color",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "st7735_dummy_display",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "st7735_rotation_set",
    "return_type": "static void",
    "params": [
      {
        "name": "rotation",
        "type": "nrf_lcd_rotation_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "st7735_display_invert",
    "return_type": "static void",
    "params": [
      {
        "name": "invert",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_init",
    "return_type": "void",
    "params": [
      {
        "name": "p_instances",
        "type": "sx1509b_instance_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "count",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_default_cfg_set",
    "return_type": "static void",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_add_instance",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_twi_sensor",
        "type": "nrf_twi_sensor_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "sensor_address",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_cfg_write",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_cfg_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_clock_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "source",
        "type": "sx1509b_clock_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "oscio_set",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "oscio_freq",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_misc_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "nreset_func",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "debounce_time",
        "type": "sx1509b_debounce_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "autoclear_nint",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_sw_reset",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_cfg_reg_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "reg",
        "type": "sx1509b_registers_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pin",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "set",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_cfg_reg_get",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "reg",
        "type": "sx1509b_registers_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pin",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_port_cfg_reg_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "reg",
        "type": "sx1509b_registers_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "port",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "flag",
        "type": "sx1509b_port_op_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_port_cfg_reg_get",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "reg",
        "type": "sx1509b_registers_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "port",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_data_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "user_cb",
        "type": "nrf_twi_sensor_reg_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_latch_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "user_cb",
        "type": "nrf_twi_sensor_reg_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_high_input",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "set",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_port_high_input",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "port_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "out_mask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "flag",
        "type": "sx1509b_port_op_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_cfg_input",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pull_config",
        "type": "sx1509b_pin_pull_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_cfg_default",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_cfg_sense_input",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "pull_config",
        "type": "sx1509b_pin_pull_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "sense_config",
        "type": "sx1509b_pin_sense_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_cfg_sense_set",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pin_number",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sense_config",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_dir_set",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "direction",
        "type": "sx1509b_pin_dir_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_cfg_output",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pin_number",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_ports_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "start_port",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_masks",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_latches_read",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "start_port",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint32_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_masks",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_pin_latch_clear",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_led_driver_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "clock_internal",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "frequency",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_led_mode",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "port_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_led_driver_get_reg",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_led_pin_time",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "on_time",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "on_intensity",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "off_time",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "off_intensity",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_led_pin_fade",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "fade_in",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "fade_out",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_led_pin_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_led_pin_disable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "pin_number",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_key_engine_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "rows",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "columns",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "sleep_time",
        "type": "sx1509b_key_sleep_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "scan_time",
        "type": "sx1509b_key_scan_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "debounce_time",
        "type": "sx1509b_debounce_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_key_data_update",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "user_cb",
        "type": "nrf_twi_sensor_reg_cb_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer handling. Perform strict bounds checking and input validation.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_key_get_bit_pos",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "reg",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_key_column_get",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sx1509b_key_row_get",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "instance_num",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "touchpad_init",
    "return_type": "bool",
    "params": [
      {
        "name": "device_address",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "touchpad_product_id_verify",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication. Implement mutual authentication and replay protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "touchpad_reset",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "touchpad_interrupt_status_read",
    "return_type": "bool",
    "params": [
      {
        "name": "interrupt_status",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "touchpad_read_register",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "TOUCHPAD_INT_STATUS",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "interrupt_status",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "touchpad_set_sleep_mode",
    "return_type": "bool",
    "params": [
      {
        "name": "mode",
        "type": "TouchpadSleepMode_t",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "touchpad_product_id_read",
    "return_type": "bool",
    "params": [
      {
        "name": "product_id",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "product_id_bytes",
        "type": "uint8_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_switch",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_stack_poison",
    "return_type": "static void",
    "params": [
      {
        "name": "task_id",
        "type": "task_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_stack_protect",
    "return_type": "static void",
    "params": [
      {
        "name": "task_id",
        "type": "task_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_manager_start",
    "return_type": "PRAGMA_OPTIMIZATION_FORCE_START\nvoid",
    "params": [
      {
        "name": "idle_task",
        "type": "task_main_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_idle_task_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_create",
    "return_type": "PRAGMA_OPTIMIZATION_FORCE_END\n\ntask_id_t",
    "params": [
      {
        "name": "task",
        "type": "task_main_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_task_name",
        "type": "char const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p_context",
        "type": "void *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_yield",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_events_wait",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "evt_mask",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_events_set",
    "return_type": "void",
    "params": [
      {
        "name": "task_id",
        "type": "task_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "evt_mask",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_exit",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_id_get",
    "return_type": "task_id_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_stack_max_usage_get",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "task_id",
        "type": "task_id_t",
        "comment": "Identifier/handle. Confirm validity and enforce session access control.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "task_mnanager_info",
    "return_type": "static void",
    "params": [
      {
        "name": "p_cli",
        "type": "nrf_cli_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "argc",
        "type": "size_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      },
      {
        "name": "argv",
        "type": "char * *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_master_write",
    "return_type": "static bool",
    "params": [
      {
        "name": "data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "issue_stop_condition",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_master_read",
    "return_type": "static bool",
    "params": [
      {
        "name": "data",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "data_length",
        "type": "uint8_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "issue_stop_condition",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_master_clear_bus",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_master_init",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_master_issue_startcondition",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_master_issue_stopcondition",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_master_clock_byte",
    "return_type": "static bool",
    "params": [
      {
        "name": "databyte",
        "type": "uint_fast8_t",
        "comment": "Integer parameter. Validate range and handle signedness correctly.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_master_clock_byte_in",
    "return_type": "static bool",
    "params": [
      {
        "name": "databyte",
        "type": "uint8_t *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "HIGH"
      },
      {
        "name": "ack",
        "type": "bool",
        "comment": "Parameter requires validation and error handling per NIST guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "twi_master_wait_while_scl_low",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uda1380_init",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_iface",
        "type": "uda1380_iface_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "p_reg_config",
        "type": "uda1380_reg_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      },
      {
        "name": "reg_size",
        "type": "size_t",
        "comment": "Length/size field. Validate against buffer size; check for integer overflow.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization. Apply secure defaults and least-privilege configuration.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uda1380_enable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_iface",
        "type": "uda1380_iface_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uda1380_disable",
    "return_type": "ret_code_t",
    "params": [
      {
        "name": "p_iface",
        "type": "uda1380_iface_t const *",
        "comment": "Pointer parameter. Verify non-NULL, ensure bounds, and protect from UAF.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Validate inputs, handle errors, and follow secure coding practices.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  }
]