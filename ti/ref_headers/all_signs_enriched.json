[
  {
    "name": "abort",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "profile_readSensor",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "params",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "profile_processValueChange",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "pParam",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "scCtrlReadyCallback",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "scTaskAlertCallback",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "AccelProfile_init",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "AccelProfile_enable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "AccelProfile_disable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "accel_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "accel_WriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Accel_AddService",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Accel_RegisterProfileCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileCallbacks",
        "type": "sensorServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Accel_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Accel_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ssp_KeyInit_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sspAesEncrypt_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sspKeyExpansion_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "KeyExp",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sspAesEncryptKeyExp_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "KeyExp",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sspAesEncryptBasic_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "RoundKey_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "W",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "rc",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "AddRoundKeySubBytes_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "KeySch",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ShiftRows_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MixColumns_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "FFMult_Sw",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "a",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "b",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "return",
    "return_type": "else",
    "params": [
      {
        "name": "param",
        "type": "0",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sspAesDecrypt_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "KeyExp",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "InvAddRoundKey_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "round",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "KeyExp",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "InvRoundKey_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "W",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "round",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "InvSubBytes_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "InvShiftRows_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "InvMixColumns_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "AesCcm_authEncrypt_Sw",
    "return_type": "signed char",
    "params": [
      {
        "name": "encrypt",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "Mval",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "N",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "M",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_m",
        "type": "unsigned short",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "A",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_a",
        "type": "unsigned short",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "MAC",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ccmLVal",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "AesCcm_decryptAuth_Sw",
    "return_type": "signed char",
    "params": [
      {
        "name": "decrypt",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "Mval",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "N",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "M",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_m",
        "type": "unsigned short",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "A",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_a",
        "type": "unsigned short",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "cState",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ccmLVal",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "Aes_encrypt_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "plainText",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "textLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "Aes_decrypt_Sw",
    "return_type": "void",
    "params": [
      {
        "name": "cypherText",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "textLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAesKey",
        "type": "uint8_t*",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "AesCcm_getNumBlocks_Sw",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "textLength",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "APPASRT_loadAssertHndlr",
    "return_type": "void",
    "params": [
      {
        "name": "pAssrtHnldr",
        "type": "APPASRTINTF_assrtHndlerFunc_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "APPASRT_callAssrtHndler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "profile_processCfgChange",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "pParam",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "BatteryProfile_init",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "BatteryProfile_enable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "BatteryProfile_disable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "battery_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "battery_WriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Battery_AddService",
    "return_type": "extern bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Battery_RegisterProfileCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileCallbacks",
        "type": "sensorServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Battery_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Battery_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "brel",
    "return_type": "void",
    "params": [
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bpool",
    "return_type": "void",
    "params": [
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "bufsize",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bstats",
    "return_type": "void",
    "params": [
      {
        "name": "curalloc",
        "type": "bufsize *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "totfree",
        "type": "bufsize *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "maxfree",
        "type": "bufsize *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nget",
        "type": "long *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "nrel",
        "type": "long *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bstatse",
    "return_type": "void",
    "params": [
      {
        "name": "pool_incr",
        "type": "bufsize *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "npool",
        "type": "long *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "npget",
        "type": "long *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "nprel",
        "type": "long *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ndget",
        "type": "long *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ndrel",
        "type": "long *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bufdump",
    "return_type": "void",
    "params": [
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bpoold",
    "return_type": "void",
    "params": [
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "dumpalloc",
        "type": "int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dumpfree",
        "type": "int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bpoolv",
    "return_type": "int",
    "params": [
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "time",
    "return_type": "extern long",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rand",
    "return_type": "int",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "main",
    "return_type": "int",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "srand",
    "return_type": "V",
    "params": [
      {
        "name": "param",
        "type": "1234",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "processICallMsg",
    "return_type": "static uint8",
    "params": [
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processICallHost",
    "return_type": "static uint8",
    "params": [
      {
        "name": "opCode",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processICallLL",
    "return_type": "static uint8",
    "params": [
      {
        "name": "opCode",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processICallUTIL",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "buildRevision",
    "return_type": "static uint8",
    "params": [
      {
        "name": "pBuildRev",
        "type": "ICall_BuildRevision *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processICallL2CAP",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processICallATT",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processICallGATT",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "processICallGAP",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "processDispMsg",
    "return_type": "static uint8",
    "params": [
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processDispGeneral",
    "return_type": "static uint8",
    "params": [
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processDispGAPProfile",
    "return_type": "static uint8",
    "params": [
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "processDispGATTProfile",
    "return_type": "static uint8",
    "params": [
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "processDispGGS",
    "return_type": "static uint8",
    "params": [
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processDispGSA",
    "return_type": "static uint8",
    "params": [
      {
        "name": "msg_ptr",
        "type": "ICall_CmdMsg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pSendCS",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "checkNVLen",
    "return_type": "static uint8",
    "params": [
      {
        "name": "id",
        "type": "osalSnvId_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "osalSnvLen_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sendGapCmdStatus",
    "return_type": "static void",
    "params": [
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "opCode",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "processExtMsg",
    "return_type": "static uint8",
    "params": [
      {
        "name": "pMsg",
        "type": "hciPacket_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processExtMsgUTIL",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pCmd",
        "type": "hciExtCmd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processExtMsgL2CAP",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pCmd",
        "type": "hciExtCmd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processExtMsgATT",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pCmd",
        "type": "hciExtCmd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "processExtMsgGATT",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pCmd",
        "type": "hciExtCmd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "processExtMsgGAP",
    "return_type": "static uint8",
    "params": [
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pCmd",
        "type": "hciExtCmd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "processEvents",
    "return_type": "static uint8",
    "params": [
      {
        "name": "pMsg",
        "type": "osal_event_hdr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "addAttrRec",
    "return_type": "static uint8",
    "params": [
      {
        "name": "pServ",
        "type": "gattService_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pUUID",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "permissions",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pTotalAttrs",
        "type": "uint16 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspDataLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "freeAttrRecs",
    "return_type": "static void",
    "params": [
      {
        "name": "pServ",
        "type": "gattService_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "buildCoChannelInfo",
    "return_type": "static uint8",
    "params": [
      {
        "name": "CID",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pInfo",
        "type": "l2capCoCInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRspBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capVerifySecCB",
    "return_type": "static uint16",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "l2capConnectReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "buildHCIExtHeader",
    "return_type": "static uint8",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "event",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "mapATT2BLEStatus",
    "return_type": "static uint8",
    "params": [
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleDispatch_Init",
    "return_type": "void",
    "params": [
      {
        "name": "task_id",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_snv_read",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "BLE_NVID_IRK",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "KEYLEN",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "IRK",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleDispatch_ProcessEvent",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "task_id",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "appForceBoot",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleDispatch_BMFree",
    "return_type": "void",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pBuf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "opcode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_mem_free",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "pPayload",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GAP_SetParamValue",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "GAP_PARAM_AUTH_TASK_ID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "bleDispatch_TaskID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "osal_snv_write",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "BLE_NVID_IRK",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "KEYLEN",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "IRK",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "icall_liteMsgParser",
    "return_type": "void",
    "params": [
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dispatch_liteProcess",
    "return_type": "uint16",
    "params": [
      {
        "name": "taskId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ble_dispatch_liteInit",
    "return_type": "void",
    "params": [
      {
        "name": "taskId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "icall_liteErrorFunction",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleStk_GapAdv_loadLocalByHandle",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advtype",
        "type": "GapAdv_dataTypes_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "local_bleApp_GapAdvCb",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pBuf",
        "type": "GapAdv_data_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "arg",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "bleStack_register",
    "return_type": "bleStack_errno_t",
    "params": [
      {
        "name": "selfEntity",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "appCallback",
        "type": "appCallback_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleStack_createTasks",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleStack_initGap",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "role",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "appSelfEntity",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "scanCallback",
        "type": "bleStk_pfnGapScanCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "paramUpdateDecision",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "bleStack_initGapBondParams",
    "return_type": "void",
    "params": [
      {
        "name": "pGapBondParams",
        "type": "gapBondParams_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "bleStack_initGapBond",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pGapBondParams",
        "type": "gapBondParams_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "bleApp_bondMgrCBs",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "bleStack_initGatt",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "role",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "appSelfEntity",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pAttDeviceName",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "bleStk_initAdvSet",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "advCallback",
        "type": "pfnBleStkAdvCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "advHandle",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "eventMask",
        "type": "GapAdv_eventMaskFlags_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "advParams",
        "type": "GapAdv_params_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "advDataLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "scanRespDataLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "scanRespData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "appContext_GapAdvCb",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pBuf",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "arg",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "bleStk_getDevAddr",
    "return_type": "void",
    "params": [
      {
        "name": "wantIA",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pAddr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "appContext_ScanCb",
    "return_type": "void",
    "params": [
      {
        "name": "event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pBuf",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "arg",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "local_bleApp_ScanCb",
    "return_type": "void",
    "params": [
      {
        "name": "event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pBuf",
        "type": "GapScan_data_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "arg",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "bleStk_GapScan_registerCb",
    "return_type": "status_t",
    "params": [
      {
        "name": "cb",
        "type": "bleStk_pfnGapScanCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "bleStk_scanInit",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "scanCallback",
        "type": "bleStk_pfnGapScanCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "eventMask",
        "type": "GapScan_EventMask_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "primPhys",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanInterval",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanWindow",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advReportFields",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "defaultScanPhy",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanDupFilter",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanFilterPduType",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanMinConnInterval",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "scanMaxConnInterval",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "driverTable_fnSpinlock",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RegisterAssertCback",
    "return_type": "void",
    "params": [
      {
        "name": "appAssertHandler",
        "type": "assertCback_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "DefaultAssertCback",
    "return_type": "void",
    "params": [
      {
        "name": "assertCause",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "assertSubcause",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setBleUserConfig",
    "return_type": "void",
    "params": [
      {
        "name": "userCfg",
        "type": "icall_userCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Board_keyChangeHandler",
    "return_type": "static void",
    "params": [
      {
        "name": "a0",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GPIO_Board_keyCallback",
    "return_type": "static void",
    "params": [
      {
        "name": "index",
        "type": "uint_least8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Board_initKeys",
    "return_type": "void",
    "params": [
      {
        "name": "appKeyCB",
        "type": "keysPressedCB_t",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "button_callback",
    "return_type": "static void",
    "params": [
      {
        "name": "buttonHandle",
        "type": "Button_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buttonEvents",
        "type": "Button_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ButtonProfile_init",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Button_Service_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Button_Service_WriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ButtonService_AddService",
    "return_type": "extern bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ButtonService_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ButtonService_RegisterAppCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "appCallbacks",
        "type": "ButtonServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ButtonService_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Button_Service_findCharParamId",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "rfDriverCallback",
    "return_type": "extern void",
    "params": [
      {
        "name": "client",
        "type": "RF_Handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "events",
        "type": "RF_GlobalEvent",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "void*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Board_initHook",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P1_LAUNCHXL_initGeneral",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Board_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P1_LAUNCHXL_sendExtFlashByte",
    "return_type": "void",
    "params": [
      {
        "name": "pinHandle",
        "type": "PIN_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P1_LAUNCHXL_wakeUpExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P1_LAUNCHXL_shutDownExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "initAntennaSwitch",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P_2_LAUNCHXL_initGeneral",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P_2_LAUNCHXL_sendExtFlashByte",
    "return_type": "void",
    "params": [
      {
        "name": "pinHandle",
        "type": "PIN_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P_2_LAUNCHXL_wakeUpExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P_2_LAUNCHXL_shutDownExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P_4_LAUNCHXL_initGeneral",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P_4_LAUNCHXL_sendExtFlashByte",
    "return_type": "void",
    "params": [
      {
        "name": "pinHandle",
        "type": "PIN_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P_4_LAUNCHXL_wakeUpExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352P_4_LAUNCHXL_shutDownExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352R1_LAUNCHXL_initGeneral",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352R1_LAUNCHXL_sendExtFlashByte",
    "return_type": "void",
    "params": [
      {
        "name": "pinHandle",
        "type": "PIN_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352R1_LAUNCHXL_wakeUpExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC1352R1_LAUNCHXL_shutDownExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC2652RB_LAUNCHXL_initGeneral",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC2652RB_LAUNCHXL_sendExtFlashByte",
    "return_type": "void",
    "params": [
      {
        "name": "pinHandle",
        "type": "PIN_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC2652RB_LAUNCHXL_wakeUpExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC2652RB_LAUNCHXL_shutDownExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC26X2R1_LAUNCHXL_initGeneral",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC26X2R1_LAUNCHXL_sendExtFlashByte",
    "return_type": "void",
    "params": [
      {
        "name": "pinHandle",
        "type": "PIN_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "byte",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC26X2R1_LAUNCHXL_wakeUpExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CC26X2R1_LAUNCHXL_shutDownExtFlash",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "traceBlockData",
    "return_type": "extern void",
    "params": [
      {
        "name": "len",
        "type": "unsigned char",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "unsigned char *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SSP_CTR_Encrypt_Sw",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "M",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_m",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Nonce",
        "type": "uint8_t *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "LOW"
      },
      {
        "name": "IV",
        "type": "uint8_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "SSP_CTR_Decrypt_Sw",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pCipherTxt",
        "type": "uint8_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cipherTxtLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Nonce",
        "type": "uint8_t*",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "LOW"
      },
      {
        "name": "IV",
        "type": "uint8_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "SSP_CCM_Auth_Encrypt_Sw",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "encrypt",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "Mval",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "N",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "M",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_m",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "A",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_a",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ccmLVal",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "SSP_CCM_InvAuth_Decrypt_Sw",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "decrypt",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "Mval",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "N",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "C",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_c",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "A",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_a",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ccmLVal",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "CommonROM_Init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Crypto_func",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Crypto_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Data_Service_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Data_Service_WriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "DataService_AddService",
    "return_type": "extern bStatus_t",
    "params": [
      {
        "name": "rspTaskId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "DataService_RegisterAppCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "appCallbacks",
        "type": "DataServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "DataService_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "DataService_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Data_Service_findCharParamId",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "devInfo_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "DevInfo_AddService",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "DevInfo_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "DevInfo_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ECC_initialize",
    "return_type": "void",
    "params": [
      {
        "name": "pWorkzone",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "windowSize",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ECC_generateKey",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "randString",
        "type": "uint32_t *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "LOW"
      },
      {
        "name": "privateKey",
        "type": "uint32_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "publicKey_x",
        "type": "uint32_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "publicKey_y",
        "type": "uint32_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ECC_ECDH_computeSharedSecret",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "privateKey",
        "type": "uint32_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "publicKey_x",
        "type": "uint32_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "publicKey_y",
        "type": "uint32_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "sharedSecret_x",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "sharedSecret_y",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "findStackBoundaryAddr",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GAP_DeviceInit_per_role",
    "return_type": "void",
    "params": [
      {
        "name": "profileRole",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_DeviceInit_validate_params",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileRole",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addrMode",
        "type": "GAP_Addr_Modes_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRandomAddr",
        "type": "uint8_t*",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_DeviceInit",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileRole",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addrMode",
        "type": "GAP_Addr_Modes_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRandomAddr",
        "type": "uint8_t*",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapScan_init",
    "return_type": "VOID",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_SM_InitiatorInit",
    "return_type": "VOID",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_gapAdv_init",
    "return_type": "VOID",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_SM_ResponderInit",
    "return_type": "VOID",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GAP_UpdateResolvingList",
    "return_type": "void",
    "params": [
      {
        "name": "pIRK",
        "type": "uint8_t *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_DeviceInit_noGAPBondMgr",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileRole",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addrMode",
        "type": "GAP_Addr_Modes_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRandomAddr",
        "type": "uint8_t*",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_UpdateResolvingList_noGAPBondMgr",
    "return_type": "void",
    "params": [
      {
        "name": "pIRK",
        "type": "uint8_t *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_DeInit",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_ReInit",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_UpdateRPA",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_LinkEst",
    "return_type": "static void",
    "params": [
      {
        "name": "addrType",
        "type": "GAP_Peer_Addr_Types_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pDevAddr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "role",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_LinkTerm",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrUpdateCharCfg",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "idx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "attrHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrInvertCharCfgItem",
    "return_type": "static void",
    "params": [
      {
        "name": "charCfgTbl",
        "type": "gapBondCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrSaveBond",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "bondIdx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBondRec",
        "type": "gapBondRec_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pLocalLtk",
        "type": "gapBondLTK_t*",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pDevLtk",
        "type": "gapBondLTK_t*",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pIRK",
        "type": "uint8_t*",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pSRK",
        "type": "uint8_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "signCount",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "syncRL",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondFindIrkResolvingList",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pIRK",
        "type": "uint8_t*",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrAddBond",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pBondRec",
        "type": "gapBondRec_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPkt",
        "type": "gapAuthCompleteEvent_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrGetStateFlags",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "idx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "CWE-119"
    ]
  },
  {
    "name": "gapBondMgrReadBonds",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrFindEmpty",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrBondTotal",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrEraseAllBondings",
    "return_type": "static bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrEraseRejectedBondAndTerm",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrEraseBonding",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "idx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrEraseLocalInfo",
    "return_type": "static bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_ProcessOSALMsg",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "osal_event_hdr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_ProcessGATTMsg",
    "return_type": "static void",
    "params": [
      {
        "name": "pMsg",
        "type": "gattMsgEvent_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_ProcessSMMsg",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "smEventHdr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_ProcessGATTServMsg",
    "return_type": "static void",
    "params": [
      {
        "name": "pMsg",
        "type": "gattEventHdr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrBondReq",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "idx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "stateFlags",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "role",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "startEncryption",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrAuthenticate",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addrType",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPairReq",
        "type": "gapPairingReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_SyncWhiteList",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_SyncCharCfg",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrReadLruBondList",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrGetLruBondIndex",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrUpdateLruBondList",
    "return_type": "static void",
    "params": [
      {
        "name": "bondIndex",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrChangeState",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "idx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "state",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "set",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrSlaveSecurityReq",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_SlaveReqSecurity",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "authReq",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrSendServiceChange",
    "return_type": "static void",
    "params": [
      {
        "name": "pLinkItem",
        "type": "linkDBItem_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_gapIdle",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondGenerateUniqueIdentifier",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "addrType",
        "type": "GAP_Peer_Addr_Types_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAddr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondPreprocessIdentityInformation",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pPkt",
        "type": "gapAuthCompleteEvent_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pRec",
        "type": "gapBondRec_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_isDevicePrivacyModeSupported",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "addrType",
        "type": "GAP_Peer_Addr_Types_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAddr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_SupportsCentAddrRes",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pPeerAddr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addrType",
        "type": "GAP_Peer_Addr_Types_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrReadRPAORsp",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRsp",
        "type": "attReadByTypeRsp_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_ProcessAttErrRsp",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRsp",
        "type": "attErrorRsp_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrSetStateFlagFromConnhandle",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "stateFlag",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "setParam",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrReadCARRsp",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRsp",
        "type": "attReadByTypeRsp_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrQueuePairing",
    "return_type": "static gapBondStateNodePtr_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addrType",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPairReq",
        "type": "gapPairingReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondFindPairReadyNode",
    "return_type": "static gapBondStateNodePtr_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondStateStartSecurity",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addrType",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPairReq",
        "type": "gapPairingReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondStateStartNextGATTDisc",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondGetStateFromConnHandle",
    "return_type": "static gbmState_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "CWE-119"
    ]
  },
  {
    "name": "gapBondStateDoGATTDisc",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "state",
        "type": "gbmState_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondStateEnd",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondStateSetState",
    "return_type": "static void",
    "params": [
      {
        "name": "pNode",
        "type": "gapBondStateNode_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "state",
        "type": "gbmState_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAPBondMgr_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "osal_snv_compact",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "NV_COMPACT_THRESHOLD",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GAPBondMgr_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAPBondMgr_FindAddr",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pDevAddr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addrType",
        "type": "GAP_Peer_Addr_Types_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pIdx",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pIdentityAddrType",
        "type": "GAP_Peer_Addr_Types_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pIdentityAddr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAPBondMgr_ServiceChangeInd",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "setParam",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_GAP_SetParamValue",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "GAP_PARAM_AUTH_TASK_ID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "gapBondMgr_TaskID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAPBondMgr_PasscodeRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "passcode",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_GAP_TerminateAuth",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "connectionHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "SMP_PAIRING_FAILED_PASSKEY_ENTRY_FAILED",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAPBondMgr_Pair",
    "return_type": "extern bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_ReadGattChar",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "uuid",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_SendServiceChangedInd",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "connHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "gapBondMgr_TaskID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrImportBond",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pBondRec",
        "type": "gapBondRec_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pLocalLtk",
        "type": "gapBondLTK_t *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pDevLtk",
        "type": "gapBondLTK_t *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pIRK",
        "type": "uint8_t *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pSRK",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "signCount",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "charCfg",
        "type": "gapBondCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrReadBondRec",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "addrType",
        "type": "GAP_Peer_Addr_Types_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pDevAddr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBondRec",
        "type": "gapBondRec_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pLocalLtk",
        "type": "gapBondLTK_t *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pDevLtk",
        "type": "gapBondLTK_t *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pIRK",
        "type": "uint8_t *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "pSRK",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "signCount",
        "type": "uint32_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "charCfg",
        "type": "gapBondCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAPBondMgr_Init",
    "return_type": "void",
    "params": [
      {
        "name": "task_id",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cfg_gapBond_maxBonds",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cfg_gapBond_maxCharCfg",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cfg_gapBond_gatt_no_client",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cfg_gapBond_gatt_no_service_changed",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAPBondMgr_ProcessEvent",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "task_id",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_osal_msg_send",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "gapEndAppTaskID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_osal_msg_deallocate",
    "return_type": "VOID",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gapBondMgr_CheckNVLen",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_syncResolvingList",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAPBondMgr_GenerateEccKeys",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_SM_GetEccKeys",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "GAPBondMgr_SCGetLocalOOBParameters",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "localOobData",
        "type": "gapBondOOBData_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAPBondMgr_SCSetRemoteOOBParameters",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "remoteOobData",
        "type": "gapBondOOBData_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "OOBDataFlag",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_GAP_SendSlaveSecurityRequest",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "authReq",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_HCI_LE_ClearWhiteListCmd",
    "return_type": "VOID",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GapBondMgr_GetPrevAuth",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pMitmReq",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pKeySize",
        "type": "uint8_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GapBondMgr_StartEnc",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_SyncAcceptList",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgrPeripheralSecurityReq",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapBondMgr_PeripheralReqSecurity",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "authReq",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_GAP_SendPeripheralSecurityRequest",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "authReq",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_HCI_LE_ClearAcceptListCmd",
    "return_type": "VOID",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_SendNotiInd",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cccValue",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "authenticated",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pfnReadAttrCB",
        "type": "pfnGATTReadAttrCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_InitCharCfg",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "charCfgTbl",
        "type": "gattCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_ProcessCharCfg",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "charCfgTbl",
        "type": "gattCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "authenticated",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "attrTbl",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "numAttrs",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pfnReadAttrCB",
        "type": "pfnGATTReadAttrCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_ProcessCCCWriteReq",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "validCfg",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_ReadCharCfg",
    "return_type": "uint16",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "charCfgTbl",
        "type": "gattCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_WriteCharCfg",
    "return_type": "uint8",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "charCfgTbl",
        "type": "gattCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "calculate_remain_time",
    "return_type": "static void",
    "params": [
      {
        "name": "transition",
        "type": "struct transition_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "constrain_target_value",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "target_value",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "constrain_delta_target_value",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_target",
    "return_type": "static void",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_transition_timeout",
    "return_type": "static bool",
    "params": [
      {
        "name": "transition",
        "type": "struct transition_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_transition_values",
    "return_type": "static void",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_current",
    "return_type": "static int",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_target",
    "return_type": "static int",
    "params": [
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_level_publish",
    "return_type": "static void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OnOffSetOff_clockHandler",
    "return_type": "static void",
    "params": [
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OnOffSetOn_clockHandler",
    "return_type": "static void",
    "params": [
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setDelay_clockHandler",
    "return_type": "static void",
    "params": [
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "levelSet_clockHandler",
    "return_type": "static void",
    "params": [
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "genericLevelDelay_clockHandler",
    "return_type": "static void",
    "params": [
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "getBatteryState",
    "return_type": "static void",
    "params": [
      {
        "name": "battery_status",
        "type": "struct batteryStatus_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "start_onoff_delay_clock",
    "return_type": "static void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "start_level_delay_clock",
    "return_type": "static void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "start_onoff_transition_clock",
    "return_type": "static void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "start_level_transition_clock",
    "return_type": "static void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "generic_power_onoff_settings_cb",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "name",
        "type": "const char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_rd",
        "type": "size_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read_cb",
        "type": "settings_read_cb",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "cb_arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "generic_default_transition_time_settings_cb",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "name",
        "type": "const char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_rd",
        "type": "size_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read_cb",
        "type": "settings_read_cb",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "cb_arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "generic_OnOff_settings_cb",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "name",
        "type": "const char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_rd",
        "type": "size_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read_cb",
        "type": "settings_read_cb",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "cb_arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "store_data",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "name",
        "type": "const char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_constructClock",
    "return_type": "extern Clock_Handle",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "clockCB",
        "type": "Clock_FuncPtr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "clockDuration",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "clockPeriod",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "startFlag",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_startClock",
    "return_type": "extern void",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_restartClock",
    "return_type": "extern void",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "clockTimeout",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_PowerUp_mode",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_PoweredDown_state",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_def_trans_time",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_OnOff_target",
    "return_type": "void",
    "params": [
      {
        "name": "target",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_OnOff_current",
    "return_type": "void",
    "params": [
      {
        "name": "current",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "set_OnOff_total_duration",
    "return_type": "void",
    "params": [
      {
        "name": "duration",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MeshModels_init",
    "return_type": "int",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_OnOff_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_onoff_publish",
    "return_type": "static void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_OnOff_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_OnOff_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_OnOff_Status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Level_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Level_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Level_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Delta_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Delta_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Move_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Move_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Level_Status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Default_Transition_Time_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_def_trans_time_publish",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Default_Transition_Time_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Default_Transition_Time_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Default_Transition_Time_Status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_OnPowerUp_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_onpowerup_publish",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_OnPowerUp_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_OnPowerUp_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_OnPowerUp_Status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Battery_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gen_Battery_status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HallProfile_init",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HallProfile_enable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HallProfile_disable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hall_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hall_WriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Hall_AddService",
    "return_type": "extern bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Hall_RegisterProfileCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileCallbacks",
        "type": "sensorServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Hall_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Hall_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HalAesInit",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ssp_HW_KeyInit",
    "return_type": "void",
    "params": [
      {
        "name": "AesKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sspAesEncryptHW",
    "return_type": "void",
    "params": [
      {
        "name": "AesKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sspAesDecryptHW",
    "return_type": "void",
    "params": [
      {
        "name": "AesKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sspAesEncryptHW_keylocation",
    "return_type": "void",
    "params": [
      {
        "name": "msg_in",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_out",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "key_location",
        "type": "uint8",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sspAesDecryptHW_keylocation",
    "return_type": "void",
    "params": [
      {
        "name": "msg_in",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_out",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "key_location",
        "type": "uint8",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HAL_APPASRT_register",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pFptr",
        "type": "APPASRTINTF_assrtHndlerFunc_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HAL_APPASRT_callAssrtHanlder",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halAssertInit",
    "return_type": "void",
    "params": [
      {
        "name": "initAssertCback",
        "type": "assertCback_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "initLegacyMode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halAssertHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halAssertHandlerExt",
    "return_type": "void",
    "params": [
      {
        "name": "assertCause",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halAssertSpinlock",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halAssertHazardLights",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SSP_CCM_Auth_Encrypt",
    "return_type": "uint8",
    "params": [
      {
        "name": "encrypt",
        "type": "bool",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "Mval",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "N",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "M",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_m",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "A",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_a",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ccmLVal",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "SSP_CCM_InvAuth_Decrypt",
    "return_type": "uint8",
    "params": [
      {
        "name": "decrypt",
        "type": "bool",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "Mval",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "N",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "C",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_c",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "A",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_a",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ccmLVal",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HalLedUpdate",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Hal_Init",
    "return_type": "void",
    "params": [
      {
        "name": "task_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HalDriverInit",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Hal_ProcessEvent",
    "return_type": "uint16",
    "params": [
      {
        "name": "task_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Hal_ProcessPoll",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HalFlashRead",
    "return_type": "void",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "cnt",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HalFlashWrite",
    "return_type": "void",
    "params": [
      {
        "name": "addr",
        "type": "uint32",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "cnt",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HalFlashErase",
    "return_type": "void",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hal_pwrmon_chk",
    "return_type": "bool",
    "params": [
      {
        "name": "threshold",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hal_pwrmon_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halGetRtcIntFlag",
    "return_type": "uint8",
    "params": [
      {
        "name": "rtcChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halSetRtcIntFlag",
    "return_type": "void",
    "params": [
      {
        "name": "rtcChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halClrRtcIntFlag",
    "return_type": "void",
    "params": [
      {
        "name": "rtcChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halInitRTC",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halSetRtcTimerEvent",
    "return_type": "void",
    "params": [
      {
        "name": "rtcChan",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "compVal",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halClearRtcTimerEvent",
    "return_type": "void",
    "params": [
      {
        "name": "rtcChan",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halReadRtcTimer",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halRtcTimerDelta",
    "return_type": "uint32",
    "params": [
      {
        "name": "time1",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "time2",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halRtcTimerCompare",
    "return_type": "uint32",
    "params": [
      {
        "name": "time1",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "time2",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halRtcRegIntCBack",
    "return_type": "void",
    "params": [
      {
        "name": "rtcChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rtcCback",
        "type": "rtcIntCBack_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTC_ISR",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HalTRNG_InitTRNG",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "HalTRNG_WaitForReady",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "HalTRNG_GetTRNG",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "SSP_KeyedHash",
    "return_type": "void",
    "params": [
      {
        "name": "M",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "bitlen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "Cstate",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic hash function. Use SHA-256 minimum. Validate input length, prevent length extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HCI_bm_free",
    "return_type": "void",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8*",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ValidConnTimeParams",
    "return_type": "uint8",
    "params": [
      {
        "name": "connIntervalMin",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connIntervalMax",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connLatency",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connTimeout",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_SendDataPkt",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pbFlag",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pktLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_DisconnectCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reason",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_ReadRemoteVersionInfoCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_SetEventMaskCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pMask",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_SetEventMaskPage2Cmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pMask",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ResetCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ReadTransmitPowerLevelCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "txPwrType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_SetControllerToHostFlowCtrlCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "flowControlEnable",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HCI_HostBufferSizeCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "hostAclPktLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "hostSyncPktLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "hostTotalNumAclPkts",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "hostTotalNumSyncPkts",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_HostNumCompletedPktCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "numHandles",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connHandles",
        "type": "uint16 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "numCompletedPkts",
        "type": "uint16 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ReadLocalVersionInfoCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ReadLocalSupportedCommandsCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ReadLocalSupportedFeaturesCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ReadBDADDRCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ReadRssiCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetEventMaskCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pEventMask",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadBufSizeCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadLocalSupportedFeaturesCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetRandomAddressCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pRandAddr",
        "type": "uint8 *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "HCI_LE_SetAdvParamCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advIntervalMin",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advIntervalMax",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "ownAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "directAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "directAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advChannelMap",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advFilterPolicy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetAdvDataCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "dataLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetExtAdvData",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pCmdParams",
        "type": "aeSetDataCmd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetExtScanRspData",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pCmdParams",
        "type": "aeSetDataCmd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetAdvStatus",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pCmdParams",
        "type": "aeEnableCmd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetScanRspDataCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "dataLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetAdvEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advEnable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_ReadAdvChanTxPowerCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetScanParamCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "scanType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanInterval",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanWindow",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "ownAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "filterPolicy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetScanEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "scanEnable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "filterDuplicates",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_CreateConnCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "scanInterval",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanWindow",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "initFilterPolicy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "addrTypePeer",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ownAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connIntervalMin",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connIntervalMax",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connLatency",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connTimeout",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "minLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_CreateConnCancelCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadWhiteListSizeCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_ClearWhiteListCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_AddWhiteListCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "addrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "devAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_RemoveWhiteListCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "addrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "devAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_ConnUpdateCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connIntervalMin",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connIntervalMax",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connLatency",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connTimeout",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "minLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetHostChanClassificationCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "chanMap",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetHostDefChanClassificationCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "chanMap",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetHostConnChanClassificationCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "chanMap",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "connID",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadChannelMapCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadRemoteUsedFeaturesCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_EncryptCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "key",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "plainText",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HCI_LE_RandCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "HCI_LE_StartEncyptCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "random",
        "type": "uint8 *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "LOW"
      },
      {
        "name": "encDiv",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ltk",
        "type": "uint8 *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_LtkReqReplyCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ltk",
        "type": "uint8 *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_LtkReqNegReplyCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_ReadSupportedStatesCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ReadAuthPayloadTimeoutCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "apto",
        "type": "uint16 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_WriteAuthPayloadTimeoutCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "aptoValue",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_RemoteConnParamReqReplyCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connIntervalMin",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connIntervalMax",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connLatency",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connTimeout",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "minLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_RemoteConnParamReqNegReplyCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reason",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetDataLenCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "txOctets",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txTime",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadSuggestedDefaultDataLenCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_WriteSuggestedDefaultDataLenCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "txOctets",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txTime",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadMaxDataLenCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_AddDeviceToResolvingListCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "peerIdAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerIdAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerIRK",
        "type": "uint8 *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "localIRK",
        "type": "uint8 *",
        "comment": "BLE long-term key material. MUST be 128-bit, derived from ECDH, stored in secure storage, never transmitted in plaintext.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_RemoveDeviceFromResolvingListCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "peerIdAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerIdAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ClearResolvingListCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadResolvingListSizeCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadPeerResolvableAddressCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "peerIdAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerIdAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadLocalResolvableAddressCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "localIdAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "localIdAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetAddressResolutionEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "addrResolutionEnable",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetResolvablePrivateAddressTimeoutCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "rpaTimeout",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetPrivacyModeCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "peerIdAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerIdAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "privacyMode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadLocalP256PublicKeyCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HCI_LE_GenerateDHKeyCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "publicKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HCI_LE_ReadPhyCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetDefaultPhyCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "allPhys",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetPhyCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "allPhys",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "phyOpts",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_TransmitterTestCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "txChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "payloadType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReceiverTestCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "rxChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_EnhancedRxTestCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "rxChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "modIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_EnhancedTxTestCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "txChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "payloadLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "payloadType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_EnhancedCteRxTestCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "rxChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "modIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "expectedCteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "expectedCteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_EnhancedCteTxTestCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "txChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "payloadLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "payloadType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_TestEndCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadTxPowerCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadRfPathCompCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_WriteRfPathCompCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "txPathParam",
        "type": "int16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPathParam",
        "type": "int16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetConnectionCteReceiveParamsCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "samplingEnable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetConnectionCteTransmitParamsCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "types",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetConnectionCteRequestEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "interval",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "type",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetConnectionCteResponseEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_ReadAntennaInformationCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_SetPeriodicAdvParamsCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "periodicAdvIntervalMin",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "periodicAdvIntervalMax",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "periodicAdvProp",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetPeriodicAdvDataCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "operation",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetPeriodicAdvEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetConnectionlessCteTransmitParamsCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteCount",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetConnectionlessCteTransmitEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_PeriodicAdvCreateSyncCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "options",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advSID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddress",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "skip",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "syncTimeout",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "syncCteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HCI_LE_PeriodicAdvCreateSyncCancelCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_PeriodicAdvTerminateSyncCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HCI_LE_AddDeviceToPeriodicAdvListCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddress",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advSID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_RemoveDeviceFromPeriodicAdvListCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddress",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advSID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_ClearPeriodicAdvListCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_ReadPeriodicAdvListSizeCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetPeriodicAdvReceiveEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_SetConnectionlessIqSamplingEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "samplingEnable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "maxSampledCtes",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_EXT_SetRxGainCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "rxGain",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetTxPowerCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "txPower",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_OnePktPerEvtCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "control",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_ClkDivOnHaltCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "control",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_DeclareNvUsageCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "mode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_DecryptCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "key",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "encText",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HCI_EXT_SetLocalSupportedFeaturesCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "localFeatures",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetFastTxResponseTimeCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "control",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetSlaveLatencyOverrideCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "control",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_ModemTestTxCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "cwMode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_ModemHopTestTxCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_ModemTestRxCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "rxChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_EnhancedModemTestTxCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "cwMode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rfPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rfChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_EnhancedModemHopTestTxCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "payloadLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "payloadType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rfPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_EnhancedModemTestRxCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "rfPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rfChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_EndModemTestCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetBDADDRCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "bdAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetVirtualAdvAddrCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "bdAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_EXT_SetSCACmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "scaInPPM",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_EnablePTMCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetFreqTuneCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "step",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SaveFreqTuneCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetMaxDtmTxPowerCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "txPower",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_MapPmIoPortCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "ioPort",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "ioPin",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_DisconnectImmedCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_EXT_PacketErrorRateCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "command",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_PERbyChanCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "perByChan",
        "type": "perByChan_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_ExtendRfRangeCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_HaltDuringRfCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "mode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_BuildRevisionCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "mode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "userRevNum",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_DelaySleepCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "delay",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_ResetSystemCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "mode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "HCI_EXT_OverlappedProcessingCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "mode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_NumComplPktsLimitCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "limit",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "flushOnEvt",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_GetConnInfoCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "numAllocConns",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "numActiveConns",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "activeConnInfo",
        "type": "hciConnInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetMaxDataLenCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "txOctets",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txTime",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxOctets",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxTime",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetDtmTxPktCntCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "txPktCnt",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_ReadRandAddrCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "HCI_EXT_SetPinOutputCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "dio",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetLocationingAccuracyCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "handle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate1M",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize1M",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate2M",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize2M",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCtrl",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_GetActiveConnInfoCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "activeConnInfo",
        "type": "hciActiveConnInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetExtScanChannels",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "extScanChannelsMap",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_EXT_SetQOSParameters",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "taskType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "paramType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "paramVal",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "taskHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetQOSDefaultParameters",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "paramDefaultVal",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "paramType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "taskType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_CoexEnableCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_GetRxStatisticsCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "command",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_GetTxStatisticsCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "command",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_GetCoexStatisticsCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "command",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_LLTestModeCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "testCase",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_RandCback",
    "return_type": "void",
    "params": [
      {
        "name": "randData",
        "type": "uint8 *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "LL_EXT_SetRxGainCback",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EXT_SetTxPowerCback",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EXT_PacketErrorRateCback",
    "return_type": "void",
    "params": [
      {
        "name": "numPkts",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numCrcErr",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numEvents",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numMissedEvts",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EXT_ExtendRfRangeCback",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EXT_GetRxStatsCback",
    "return_type": "void",
    "params": [
      {
        "name": "numRxOk",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numRxCtrl",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numRxCtrlAck",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numRxCrcErr",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numRxIgnored",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numRxEmpty",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numRxBufFull",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EXT_GetTxStatsCback",
    "return_type": "void",
    "params": [
      {
        "name": "numTx",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numTxAck",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numTxCtrl",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numTxCtrlAck",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numTxCtrlAckAck",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numTxRetrans",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numTxEntryDone",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EXT_GetCoexStatsCback",
    "return_type": "void",
    "params": [
      {
        "name": "grants",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rejects",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "contRejects",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "maxContRejects",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadAcceptListSizeCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_ClearAcceptListCmd",
    "return_type": "hciStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_AddAcceptListCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "addrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "devAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_RemoveAcceptListCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "addrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "devAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_LE_GenerateDHKeyV2Cmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "publicKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "keyType",
        "type": "uint8",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "HCI_EXT_SetPeripheralLatencyOverrideCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "control",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_EXT_SetAdvSetRandAddrCmd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "randAddr",
        "type": "uint8 *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "HCI_ReverseBytes",
    "return_type": "void",
    "params": [
      {
        "name": "buf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_RxDataCompleteCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "fragFlag",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssi",
        "type": "int8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciInitEventMasks",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_DataBufferOverflowEvent",
    "return_type": "void",
    "params": [
      {
        "name": "linkType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_NumOfCompletedPacketsEvent",
    "return_type": "void",
    "params": [
      {
        "name": "numHandles",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handles",
        "type": "uint16 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "numCompletedPkts",
        "type": "uint16 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_CommandCompleteEvent",
    "return_type": "void",
    "params": [
      {
        "name": "opcode",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numParam",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EXT_ScanReqReportCback",
    "return_type": "void",
    "params": [
      {
        "name": "peerAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "chan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssi",
        "type": "int8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_EXT_ChanMapUpdateCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "newChanMap",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "nextDataChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_VendorSpecifcCommandCompleteEvent",
    "return_type": "void",
    "params": [
      {
        "name": "opcode",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numParam",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_CommandStatusEvent",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "hciStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "opcode",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_HardwareErrorEvent",
    "return_type": "void",
    "params": [
      {
        "name": "hwErrorCode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_SendCommandStatusEvent",
    "return_type": "void",
    "params": [
      {
        "name": "eventCode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "opcode",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_SendCommandCompleteEvent",
    "return_type": "void",
    "params": [
      {
        "name": "eventCode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "opcode",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numParam",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_SendControllerToHostEvent",
    "return_type": "void",
    "params": [
      {
        "name": "eventCode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_DataLenExceedEventCback",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "handle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cid",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_AuthPayloadTimeoutExpiredCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_RemoteConnParamReqCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "Interval_Min",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "Interval_Max",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "Latency",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "Timeout",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_PhyUpdateCompleteEventCback",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "llStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "txPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_DataLengthChangeEventCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxTxOctets",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxTxTime",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxRxOctets",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxRxTime",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ReadLocalP256PublicKeyCompleteEventCback",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "p256KeyX",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "p256KeyY",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "LL_GenerateDHKeyCompleteEventCback",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dhKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "LL_EnhancedConnectionCompleteCback",
    "return_type": "void",
    "params": [
      {
        "name": "reasonCode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "role",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "localRPA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "peerRPA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "connInterval",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "slaveLatency",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connTimeout",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "clockAccuracy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_ChannelSelectionAlgorithmCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "chSelAlgo",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_AdvReportCback",
    "return_type": "void",
    "params": [
      {
        "name": "advEvt",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "dataLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "rssi",
        "type": "int8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_ConnectionCompleteCback",
    "return_type": "void",
    "params": [
      {
        "name": "reasonCode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "role",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connInterval",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "slaveLatency",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connTimeout",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "clockAccuracy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_DisconnectCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reasonCode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_ConnParamUpdateCback",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "llStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connInterval",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connLatency",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connTimeout",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ConnParamUpdateRejectCback",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "llStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connInterval",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connLatency",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connTimeout",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ReadRemoteUsedFeaturesCompleteCback",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "hciStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "featureSet",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ReadRemoteVersionInfoCback",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "hciStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "verNum",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "comId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "subverNum",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EncLtkReqCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "randNum",
        "type": "uint8 *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "LOW"
      },
      {
        "name": "encDiv",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_EncChangeCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reason",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "encEnab",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EncKeyRefreshCback",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reason",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_DirectTestEndDoneCback",
    "return_type": "void",
    "params": [
      {
        "name": "numPackets",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "mode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_SetCteSamples",
    "return_type": "uint16",
    "params": [
      {
        "name": "sampleCount",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleSlot",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleRate",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCtrl",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "samplesOffset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "src",
        "type": "uint32 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "iqSamples",
        "type": "int8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ConnectionIqReportEvent",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "phy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataChIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssi",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssiAntenna",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDuration",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connEvent",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCount",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteData",
        "type": "uint32 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_CteRequestFailedEvent",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ExtConnectionIqReportEvent",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "phy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataChIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssi",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssiAntenna",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDuration",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connEvent",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCount",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCtrl",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteData",
        "type": "uint32 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_ConnectionlessIqReportEvent",
    "return_type": "void",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "channelIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssi",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssiAntenna",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDuration",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "eventCounter",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCount",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteData",
        "type": "uint32 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_ExtConnectionlessIqReportEvent",
    "return_type": "void",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "channelIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssi",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssiAntenna",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDuration",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "eventCounter",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCount",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCtrl",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteData",
        "type": "uint32 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_PeriodicAdvSyncEstablishedEvent",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advSid",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddress",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "periodicAdvInt",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advClockAccuracy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_PeriodicAdvReportEvent",
    "return_type": "void",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "txPower",
        "type": "int8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssi",
        "type": "int8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataStatus",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_PeriodicAdvSyncLostEvent",
    "return_type": "void",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciSerialPacketParser",
    "return_type": "void",
    "params": [
      {
        "name": "port",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciProcessHostToCtrlCmd",
    "return_type": "void",
    "params": [
      {
        "name": "pBuf",
        "type": "hciPacket_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hciProcessHostToCtrlData",
    "return_type": "void",
    "params": [
      {
        "name": "pMsg",
        "type": "hciDataPacket_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hciProcessCtrlToHost",
    "return_type": "void",
    "params": [
      {
        "name": "pBuf",
        "type": "hciPacket_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hciDisconnect",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciReadRemoteVersionInfo",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciSetEventMask",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciSetEventMaskPage2",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciReset",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciReadTransmitPowerLevel",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciSetControllerToHostFlowCtrl",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hciHostBufferSize",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciHostNumCompletedPkt",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciReadAuthPayloadTimeout",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciWriteAuthPayloadTimeout",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciReadLocalVersionInfo",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciReadLocalSupportedCommands",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciReadLocalSupportedFeatures",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciReadBDADDR",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciReadRssi",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetEventMask",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadBufSize",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadLocalSupportedFeatures",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetRandomAddr",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "hciLESetAdvParam",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetAdvData",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetScanRspData",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetAdvEnab",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEReadAdvChanTxPower",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetScanParam",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetScanEnable",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLECreateConn",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLECreateConnCancel",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadWhiteListSize",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEClearWhiteList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEAddWhiteList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLERemoveWhiteList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEConnUpdate",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetHostChanClass",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadChanMap",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadRemoteUsedFeatures",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEEncrypt",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hciLERand",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "hciLEStartEncrypt",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hciLELtkReqReply",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLELtkReqNegReply",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEReadSupportedStates",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReceiverTest",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLETransmitterTest",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLETestEnd",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLERemoteConnParamReqReply",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLERemoteConnParamReqNegReply",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetDataLen",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadSuggestedDefaultDataLen",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEWriteSuggestedDefaultDataLen",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadMaxDataLen",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetMaxDataLen",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEAddDeviceToResolvingList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLERemoveDeviceFromResolvingList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEClearResolvingList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadResolvingListSize",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadPeerResolvableAddress",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadLocalResolvableAddress",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetAddressResolutionEnable",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetResolvablePrivateAddressTimeout",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetPrivacyMode",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadLocalP256PubicKey",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hciLEGenerateDHKey",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hciLEReadPhy",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetDefaultPhy",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetPhy",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEEnhancedRxTest",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEEnhancedTxTest",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetConnectionCteReceiveParams",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetConnectionCteTransmitParams",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetConnectionCteRequestEnable",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetConnectionCteResponseEnable",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEReadAntennaInformation",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLESetPeriodicAdvParams",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetPeriodicAdvData",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetPeriodicAdvEnable",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetConnectionlessCteTransmitParams",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetConnectionlessCteTransmitEnable",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEPeriodicAdvCreateSync",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEPeriodicAdvCreateSyncCancel",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEPeriodicAdvTerminateSync",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEAddDeviceToPeriodicAdvList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLERemoveDeviceFromPeriodicAdvList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEClearPeriodicAdvList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEReadPeriodicAdvListSize",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetPeriodicAdvReceiveEnable",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLESetConnectionlessIqSamplingEnable",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciExtSetRxGain",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetTxPower",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtExtendRfRange",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtHaltDuringRf",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtOnePktPerEvt",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtClkDivOnHalt",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtDeclareNvUsage",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtDelayPostProc",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtDecrypt",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hciExtSetLocalSupportedFeatures",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetFastTxResponseTime",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetSlaveLatencyOverride",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtModemTestTx",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtModemHopTestTx",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtModemtestRx",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtEndModemTest",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetBDADDR",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetSCA",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtEnablePTM",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetFreqTune",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSaveFreqTune",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetMaxDtmTxPower",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtMapPmIoPort",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtBuildRevision",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetVirtualAdvAddr",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciExtDelaySleep",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtResetSystem",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "hciExtDisconnectImmed",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciExtPER",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtOverlappedProcessing",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtNumComplPktsLimit",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtGetConnInfo",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtScanReqRpt",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciExtLLTestMode",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_Init",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ParamUpdateRjctEvtRegister",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_getCmdResponderID",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_ProcessEvent",
    "return_type": "uint16",
    "params": [
      {
        "name": "task_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TestAppTaskRegister",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_GAPTaskRegister",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_L2CAPTaskRegister",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_SMPTaskRegister",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciExtSetHostDefChanClass",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetHostConnChanClass",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEEnhancedCteRxTest",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEEnhancedCteTxTest",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtEnhancedModemTestTx",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtEnhancedModemHopTestTx",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtEnhancedModemtestRx",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetDtmTxPktCnt",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtReadRandAddr",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "hciExtSetPinOutput",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetLocationingAccuracy",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetExtScanChannels",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciExtSetQOSParameters",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetQOSDefaultParameters",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtCoexEnable",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciLEReadAcceptListSize",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEClearAcceptList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLEAddAcceptList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciLERemoveAcceptList",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hciExtSetTxPowerDbm",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciExtSetPeripheralLatencyOverride",
    "return_type": "hciStatus_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_LE_ReadAcceptListSizemd",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "healthSrv_fault_get_cur_cb",
    "return_type": "static int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "test_id",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "company_id",
        "type": "uint16_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "faults",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "fault_count",
        "type": "uint8_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "healthSrv_fault_get_reg_cb",
    "return_type": "static int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "company_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "test_id",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "faults",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "fault_count",
        "type": "uint8_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "healthSrv_fault_clear_cb",
    "return_type": "static int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "company_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "healthSrv_fault_test_cb",
    "return_type": "static int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "test_id",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "company_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "helathSrv_standard_fault_test",
    "return_type": "static int",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "healthSrv_init",
    "return_type": "int",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "healthSrv_cur_fault_add",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "const struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "fault_id",
        "type": "const uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "healthSrv_cur_fault_clear",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "const struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "healthSrv_reg_fault_clear",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "const struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "healthSrv_register_fault_test_cb",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "const struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "test_id",
        "type": "const uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "test_func_ptr",
        "type": "helathSrv_faultTest_cb",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HumProfile_init",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pHandle",
        "type": "I2C_Handle *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HumProfile_enable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HumProfile_disable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "humidity_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "humidity_WriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Humidity_AddService",
    "return_type": "extern bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Humidity_RegisterProfileCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileCallbacks",
        "type": "sensorServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Humidity_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Humidity_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_enterCSImpl",
    "return_type": "ICall_CSState",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_leaveCSImpl",
    "return_type": "void",
    "params": [
      {
        "name": "key",
        "type": "ICall_CSState",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_heapFree",
    "return_type": "void",
    "params": [
      {
        "name": "blk",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_AbsoluteTimePlusTimerInMilli",
    "return_type": "static void",
    "params": [
      {
        "name": "timeout",
        "type": "uint_least32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "tsTimer",
        "type": "struct timespec *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_eventPost",
    "return_type": "static void",
    "params": [
      {
        "name": "taskentry",
        "type": "ICall_TaskEntry *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_heapMgrGetMetrics",
    "return_type": "void",
    "params": [
      {
        "name": "pBlkMax",
        "type": "uint32_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBlkCnt",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pBlkFree",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pMemAlo",
        "type": "uint32_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pMemMax",
        "type": "uint32_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pMemUB",
        "type": "uint32_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_searchServiceEntity",
    "return_type": "ICall_EntityID",
    "params": [
      {
        "name": "service",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_dispatch",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_taskEntry",
    "return_type": "static Void",
    "params": [
      {
        "name": "arg0",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "arg1",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_initPrim",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_createRemoteTasksAtRuntime",
    "return_type": "void",
    "params": [
      {
        "name": "remoteTaskTable",
        "type": "ICall_RemoteTask_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nbElems",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_createRemoteTasks",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_getRemoteTaskHandle",
    "return_type": "ICall_TaskHandle",
    "params": [
      {
        "name": "index",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primEnroll",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_EnrollServiceArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primRegisterApp",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_RegisterAppArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primAllocMsg",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_AllocArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primFreeMsg",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FreeArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_heapMalloc",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "size",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_freeImpl",
    "return_type": "void",
    "params": [
      {
        "name": "ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primMalloc",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_AllocArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primFree",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FreeArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_msgEnqueue",
    "return_type": "static void",
    "params": [
      {
        "name": "q_ptr",
        "type": "ICall_MsgQueue *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_msgPrepend",
    "return_type": "static void",
    "params": [
      {
        "name": "q_ptr",
        "type": "ICall_MsgQueue *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "head",
        "type": "ICall_MsgQueue",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primSend",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_SendArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primFetchMsg",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FetchMsgArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primRepostSync",
    "return_type": "static ICall_Errno",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primEntityId2ServiceId",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "entityId",
        "type": "ICall_EntityID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "servId",
        "type": "ICall_ServiceEnum *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_primE2S",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_EntityId2ServiceIdArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primSendServiceMsg",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_SendArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_primFetchServiceMsg",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FetchMsgArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_msecs2Ticks",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "msecs",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "ticks",
        "type": "UInt *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primWait",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_WaitArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primSignal",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_SignalArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primAbort",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primEnableInt",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_IntNumArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primDisableInt",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_IntNumArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primEnableMInt",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primDisableMInt",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primRegisterISR",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_RegisterISRArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primRegisterISR_Ext",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_RegisterISRArgs_Ext *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primGetTicks",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_GetUint32Args *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_clockFunc",
    "return_type": "static Void",
    "params": [
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primSetTimer",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_SetTimerArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primSetTimerMSecs",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_SetTimerArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primStopTimer",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_StopTimerArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primGetTickPeriod",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_GetUint32Args *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primGetMaxMSecs",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_GetUint32Args *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primWaitMatch",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_WaitMatchArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primGetEntityId",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_GetEntityIdArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primThreadServes",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_ThreadServesArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primCreateTask",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_CreateTaskArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primCreateEvent",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_CreateEventArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primCreateSemaphore",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_CreateSemaphoreArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primWaitEvent",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_WaitEventArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primWaitSemaphore",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_WaitSemaphoreArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primPostSemaphore",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_SignalArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primPostEvent",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_SignalEventsArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primService",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_verify",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_registerApp",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "entity",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msgSyncHdl",
        "type": "ICall_SyncHandle *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_allocMsgInternal",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "FALSE",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "size",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_freeMsg",
    "return_type": "void",
    "params": [
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_sendServiceMsg",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "format",
        "type": "ICall_MSGFormat",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_fetchServiceMsg",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_wait",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "milliseconds",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_signal",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "msgSyncHdl",
        "type": "ICall_SyncHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_enrollService",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "service",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "fn",
        "type": "ICall_ServiceFunc",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "entity",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msgSyncHdl",
        "type": "ICall_SyncHandle *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_free",
    "return_type": "void",
    "params": [
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_getHeapStats",
    "return_type": "void",
    "params": [
      {
        "name": "pStats",
        "type": "ICall_heapStats_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_getHeapMgrGetMetrics",
    "return_type": "void",
    "params": [
      {
        "name": "pBlkMax",
        "type": "uint32_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBlkCnt",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pBlkFree",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pMemAlo",
        "type": "uint32_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pMemMax",
        "type": "uint32_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pMemUB",
        "type": "uint32_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_send",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "format",
        "type": "ICall_MSGFormat",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_fetchMsg",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_entityId2ServiceId",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "entityId",
        "type": "ICall_EntityID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "servId",
        "type": "ICall_ServiceEnum *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_abort",
    "return_type": "ICall_Errno",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_enableInt",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "intnum",
        "type": "int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_disableInt",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "intnum",
        "type": "int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_enableMInt",
    "return_type": "ICall_Errno",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_disableMInt",
    "return_type": "ICall_Errno",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_getTicks",
    "return_type": "uint_fast32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_getTickPeriod",
    "return_type": "uint_fast32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_getMaxMSecs",
    "return_type": "uint_fast32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_setTimerMSecs",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "msecs",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cback",
        "type": "ICall_TimerCback",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "id",
        "type": "ICall_TimerID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_setTimer",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "ticks",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cback",
        "type": "ICall_TimerCback",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "id",
        "type": "ICall_TimerID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_stopTimer",
    "return_type": "void",
    "params": [
      {
        "name": "id",
        "type": "ICall_TimerID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_pwrUpdActivityCounter",
    "return_type": "bool",
    "params": [
      {
        "name": "incFlag",
        "type": "bool",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_pwrConfigACAction",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "bitmap",
        "type": "ICall_PwrBitmap_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_pwrRequire",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "bitmap",
        "type": "ICall_PwrBitmap_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_pwrDispense",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "bitmap",
        "type": "ICall_PwrBitmap_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_pwrIsStableXOSCHF",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_pwrSwitchXOSCHF",
    "return_type": "ICall_Errno",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_pwrGetXOSCStartupTime",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "timeUntilWakeupInMs",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_pwrRegisterNotify",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "fn",
        "type": "ICall_PwrNotifyFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "obj",
        "type": "ICall_PwrNotifyData *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_pwrGetTransitionState",
    "return_type": "uint_fast8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_createSemaphore",
    "return_type": "ICall_Semaphore",
    "params": [
      {
        "name": "mode",
        "type": "uint_fast8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "initcount",
        "type": "int",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_postSemaphore",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "sem",
        "type": "ICall_Semaphore",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_createEvent",
    "return_type": "ICall_Event",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_postEvent",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "event",
        "type": "ICall_Event",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "events",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_waitEvent",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "event",
        "type": "ICall_Event",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "milliseconds",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_waitSemaphore",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "sem",
        "type": "ICall_Semaphore",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "milliseconds",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_waitMatch",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "milliseconds",
        "type": "uint_least32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "matchFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "src",
        "type": "ICall_ServiceEnum *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_getEntityId",
    "return_type": "ICall_EntityID",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_threadServes",
    "return_type": "uint_fast8_t",
    "params": [
      {
        "name": "service",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_getLocalMsgEntityId",
    "return_type": "uint_fast8_t",
    "params": [
      {
        "name": "service",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "entity",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchLiteCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_sendServiceComplete",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "format",
        "type": "ICall_MSGFormat",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ICall_registerAppCback",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "selfEntity",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "appCallback",
        "type": "appCallback_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "getStatusValueFromErrNo",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "errno",
        "type": "ICall_Errno",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "setICallCmdEvtHdr",
    "return_type": "static void",
    "params": [
      {
        "name": "pHdr",
        "type": "ICall_HciExtCmd *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "subgrp",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setDispatchCmdEvtHdr",
    "return_type": "static void",
    "params": [
      {
        "name": "pHdr",
        "type": "ICall_HciExtCmd *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "subgrp",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "waitMatchCS",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sendWaitMatchCS",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sendWaitMatchValueCS",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "registerTask",
    "return_type": "static void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "subgrp",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gattRequest",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attMsg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "opcode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattWriteLong",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attPrepareWriteReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "opcode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattIndNoti",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pIndNoti",
        "type": "attMsg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "authenticated",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "opcode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "profileAddService",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "services",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "profileId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "serviceId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattAddService",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "services",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "profileSetParameter",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "subgrp",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "profileGetParameter",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "subgrp",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchProfileCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "profileId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchProfileSetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "profileId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchProfileGetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "profileId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchGGSSetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchGGSGetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchGSASetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchGSAGetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchProfileAddServiceCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapSendParamsCmd",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapSendPtrParamsCmd",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "pParam1",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pParam2",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapSendParamAndPtrCmd",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "taskID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pParam",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapSetGetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapDeviceInitCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapConfigDeviceAddrCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapUpdateLinkParamReqCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapConnParamUpdateReplyCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapTerminateLinkReqCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapUpdateAdvDataCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapSetAdvTokenCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapRemoveAdvTokenCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapUpdateAdvTokenCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapAuthenticateCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapTerminateAuthCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapBondCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapSignableCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapPasskeyUpdateCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapSetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapGetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapResolvePrivateAddrCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapSlaveSecurityReqCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchLinkDBStateCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchLinkDBNumConnsCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchLinkDBNumActiveCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchLinkDBGetInfoCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchBondMgrSetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchBondMgrGetParamCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchBondMgrServiceChangeIndCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchL2capCmdStatus",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchL2capParamUpdateCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchL2capRegisterPsmCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchL2capDeregisterPsmCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchL2capPsmInfoCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchL2capPsmChannelsCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchL2capChannelInfoCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchL2capSendSDUCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchL2capConnectReqCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "matchL2capConnectRspCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "matchL2capDisconnectReqCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "matchL2capFCCreditCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchGattRequestCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattCmdStatus",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattDiscAllPrimarySvcCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattDiscPrimartSvcCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattFindIncludedSvcCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattDiscAllCharsCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattReliableWritesCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattGetNexthandleCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattWriteLongCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattIndNotiCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchCccUpdatedEventCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "attSendParamAndPtrCmd",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "opCode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pMsg",
        "type": "attMsg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchAttCmdStatus",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchAttErrorRspCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchAttReadRspCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchAttReadBlobRspCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchAttWriteRspCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchAttExecuteWriteRspCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "matchAttValueHandleCfmCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchGapPasscodeCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapResolveAddrCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGapLinkEstCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattInitClientCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGattSendRspCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGSARegisterServiceCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGSADeregisterServiceCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGSAServiceChangedIndCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchGSAReadRspCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciSendCmd",
    "return_type": "static hciStatus_t",
    "params": [
      {
        "name": "opCode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciSendParamsCmd",
    "return_type": "static hciStatus_t",
    "params": [
      {
        "name": "opCode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param1",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param2",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param3",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciSendPtrParamsCmd",
    "return_type": "static hciStatus_t",
    "params": [
      {
        "name": "opCode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pParam1",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pParam2",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pParam3",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hciSendParamAndPtrCmd",
    "return_type": "static hciStatus_t",
    "params": [
      {
        "name": "opCode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pParam",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "matchCSFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciReadRemoteVersionInfoCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciSetEventMaskCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciSetEventMaskPage2CS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciResetCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciReadTxPwrLvlCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciReadLocalVerInfoCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciReadLocalSupportedCommandsCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciReadLocalSupportedFeaturesCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciReadBdAddrCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciReadRssiCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeSetEventMaskCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeReadLocalSupportedFeaturesCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeReadAdvChanTxPowerCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciLeReadWhiteListSizeCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciLeClearWhiteListCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciLeAddWhiteListCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciLeRemoveWhiteListCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciLeSetHostChanClassificationCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeReadRemoteUsedFeaturesCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeReadChannelMapCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeEncryptCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "matchHciLeReadSupportedStatesCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeReadMaxDataLenCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeReadSuggestedDefaultDataLenCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeWriteSuggestedDefaultDataLenCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeSetDataLenCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeTxTestCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeRxTestCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciLeTestEndCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtSetTxPowerCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtOnePktPerEvtCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtDecryptCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "matchHciExtSetLocalFeatsCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtSetFastTxRspTimeCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtSetSLOverrideCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtModemTestTxCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtModemHopTestTxCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtModemTestRxCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtEndModemTestCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtSetBdAddrCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtSetScaCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtEnablePTMCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtSetMaxDtmTxPwrCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtDisconnectImmedCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciExtPacketErrorRateCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtPERByChanCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtBuildRevCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtDelaySleepCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtResetSystemCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "matchHciExtNumComplPktsLimitCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtGetConnInfoCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchUtilNvCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchUtilNvReadCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchUtilNvWriteCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchUtilBuildRevCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchUtilGetTRNGCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "matchSMGetScConfirmCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "GAP_RegisterForMsgs",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "NPI_RegisterTask",
    "return_type": "void",
    "params": [
      {
        "name": "taskId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "L2CAP_RegisterFlowCtrlTask",
    "return_type": "void",
    "params": [
      {
        "name": "taskId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "GATTServApp_AddService",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "services",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_DeregisterService",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "handle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "p2pAttrs",
        "type": "gattAttribute_t * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTServApp_ReadRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttrValue",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "attrLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "attrHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTQual_AddService",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "services",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATTTest_AddService",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "services",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_RegisterForMsgs",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_InitClient",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_RegisterForInd",
    "return_type": "void",
    "params": [
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_SetHostToAppFlowCtrl",
    "return_type": "void",
    "params": [
      {
        "name": "heapSize",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "flowCtrlMode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "GATT_AppCompletedMsg",
    "return_type": "void",
    "params": [
      {
        "name": "pMsg",
        "type": "gattMsgEvent_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_SendRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pRsp",
        "type": "gattMsg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GGS_AddService",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "services",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GGS_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GGS_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GGS_RegisterAppCBs",
    "return_type": "void",
    "params": [
      {
        "name": "appCallbacks",
        "type": "ggsAppCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GATT_ExchangeMTU",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attExchangeMTUReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_DiscAllPrimaryServices",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_DiscPrimaryServiceByUUID",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_FindIncludedServices",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "startHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "endHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_DiscAllChars",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "startHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "endHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_DiscCharsByUUID",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attReadByTypeReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_DiscAllCharDescs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "startHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "endHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_ReadCharValue",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attReadReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_ReadUsingCharUUID",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attReadByTypeReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_ReadLongCharValue",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attReadBlobReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_ReadMultiCharValues",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attReadMultiReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_WriteNoRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attWriteReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_SignedWriteNoRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attWriteReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_WriteCharValue",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attWriteReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_WriteLongCharValue",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attPrepareWriteReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_WriteLongCharDesc",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attPrepareWriteReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_ReliableWrites",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReqs",
        "type": "attPrepareWriteReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "numReqs",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "flags",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_ReadCharDesc",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attReadReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_ReadLongCharDesc",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attReadBlobReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_WriteCharDesc",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pReq",
        "type": "attWriteReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_Notification",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pNoti",
        "type": "attHandleValueNoti_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "authenticated",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_GetNextHandle",
    "return_type": "uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_Indication",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pInd",
        "type": "attHandleValueInd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "authenticated",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ATT_ErrorRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRsp",
        "type": "attErrorRsp_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ATT_ReadRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRsp",
        "type": "attReadRsp_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ATT_ReadBlobRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRsp",
        "type": "attReadBlobRsp_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ATT_WriteRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ATT_ExecuteWriteRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "ATT_HandleValueCfm",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GAP_UpdateLinkParamReq",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pParams",
        "type": "gapUpdateLinkParamReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_UpdateLinkParamReqReply",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pParams",
        "type": "gapUpdateLinkParamReqReply_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_TerminateLinkReq",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reason",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_Authenticate",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pParams",
        "type": "gapAuthParams_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pPairReq",
        "type": "gapPairingReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_TerminateAuth",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reason",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_Bond",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "authenticated",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "secureConnections",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pParams",
        "type": "smSecurityInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "startEncryption",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_Signable",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "authenticated",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pParams",
        "type": "smSigningInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_PasskeyUpdate",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pPasskey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "connectionHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_GetParamValue",
    "return_type": "uint16",
    "params": [
      {
        "name": "paramID",
        "type": "gapParamIDs_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GAP_SendSlaveSecurityRequest",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "authReq",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "linkDB_State",
    "return_type": "uint8",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "linkDB_NumConns",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "linkDB_NumActive",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "linkDB_GetInfo",
    "return_type": "uint8",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pInfo",
        "type": "linkDBInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "L2CAP_ConnParamUpdateReq",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pUpdateReq",
        "type": "l2capParamUpdateReq_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "L2CAP_RegisterPsm",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pPsm",
        "type": "l2capPsm_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "L2CAP_DeregisterPsm",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "psm",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "L2CAP_PsmInfo",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "psm",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pInfo",
        "type": "l2capPsmInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "L2CAP_PsmChannels",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "psm",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numCIDs",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pCIDs",
        "type": "uint16 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "L2CAP_ChannelInfo",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "CID",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pInfo",
        "type": "l2capChannelInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "L2CAP_SendSDU",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pPkt",
        "type": "l2capPacket_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "L2CAP_ConnectReq",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "psm",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "peerPsm",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "L2CAP_ConnectRsp",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "result",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "L2CAP_DisconnectReq",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "CID",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "L2CAP_FlowCtrlCredit",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "CID",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerCredits",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "GATTServApp_SendCCCUpdatedEvent",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "attrHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "GATT_bm_free",
    "return_type": "void",
    "params": [
      {
        "name": "pMsg",
        "type": "gattMsg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "opcode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "BM_free",
    "return_type": "void",
    "params": [
      {
        "name": "payload_ptr",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SM_GetScConfirmOob",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "publicKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "oob",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pOut",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "CWE-119"
    ]
  },
  {
    "name": "Util_buildRevision",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pBuildRev",
        "type": "ICall_BuildRevision *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_GetTRNG",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "matchGapPeripheralSecurityReqCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciLeReadAcceptListSizeCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciLeClearAcceptListCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciLeAddAcceptListCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciLeRemoveAcceptListCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "matchHciExtSetTxPowerDbmCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "matchHciExtSetMaxDtmTxPwrDbmCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GAP_SendPeripheralSecurityRequest",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "authReq",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "rfErrCb",
    "return_type": "void",
    "params": [
      {
        "name": "h",
        "type": "RF_Handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "ch",
        "type": "RF_CmdHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "e",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "PowerCC26XX_isStableXOSC_HF",
    "return_type": "extern bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrNotify",
    "return_type": "static int_least32_t",
    "params": [
      {
        "name": "eventType",
        "type": "unsigned int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "eventArg",
        "type": "uintptr_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "clientArg",
        "type": "uintptr_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrRequireImpl",
    "return_type": "static void",
    "params": [
      {
        "name": "bitmap",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrDispenseImpl",
    "return_type": "static void",
    "params": [
      {
        "name": "bitmap",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrUpdActivityCounter",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrUpdActivityCounterArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrConfigACAction",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrBitmapArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrRequire",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrBitmapArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrDispense",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrBitmapArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrRegisterNotify",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrRegisterNotifyArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrIsStableXOSCHF",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_GetBoolArgs*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrSwitchXOSCHF",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrGetTransitionState",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrGetTransitionStateArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_pwrGetXOSCStartupTime",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrGetXOSCStartupTimeArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICallPlatform_verify",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "host_tl_passcodeCB",
    "return_type": "static void",
    "params": [
      {
        "name": "deviceAddr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connectionHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "uiInputs",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "uiOutputs",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numComparison",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "isDataLenLessThanMaxDataSize",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "hci_tl_advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_SendCommandPkt",
    "return_type": "static void",
    "params": [
      {
        "name": "pMsg",
        "type": "hciPacket_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_SendDataPkt",
    "return_type": "static void",
    "params": [
      {
        "name": "pMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_SendExtensionCmdPkt",
    "return_type": "static void",
    "params": [
      {
        "name": "pMsg",
        "type": "hciPacket_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "host_tl_passcodeCBProcess",
    "return_type": "static void",
    "params": [
      {
        "name": "pData",
        "type": "passcodeEvtCallback_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_SendVSEvent",
    "return_type": "static void",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "dataLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_getMemStats",
    "return_type": "static void",
    "params": [
      {
        "name": "mask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8_t*",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "host_tl_advEvtCallback",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "arg",
        "type": "uintptr_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "host_tl_advEvtCallbackProcess",
    "return_type": "static void",
    "params": [
      {
        "name": "advEvtCallback",
        "type": "advEvtCallback_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "host_tl_scanEvtCallback",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "arg",
        "type": "uintptr_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "host_tl_scanEvtCallbackProcess",
    "return_type": "static void",
    "params": [
      {
        "name": "scanEvtCallback",
        "type": "scanEvtCallback_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "host_tl_sendAdvReport",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advRpt",
        "type": "GapScan_Evt_AdvRpt_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "host_tl_connEvtCallback",
    "return_type": "static void",
    "params": [
      {
        "name": "pReport",
        "type": "Gap_ConnEventRpt_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "host_tl_connEvtCallbackProcess",
    "return_type": "static void",
    "params": [
      {
        "name": "pReport",
        "type": "Gap_ConnEventRpt_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "processExtraHCICmd",
    "return_type": "static void",
    "params": [
      {
        "name": "cmdOpCode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_tl_RemoveAdvSet",
    "return_type": "static void",
    "params": [
      {
        "name": "handle",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hci_tl_ClearAdvSet",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hci_tl_removePendingData",
    "return_type": "static void",
    "params": [
      {
        "name": "pendingAdvData",
        "type": "uint8_t*",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_tl_managedAEdata",
    "return_type": "static void",
    "params": [
      {
        "name": "mode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pCmddata",
        "type": "aeSetDataCmd_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_tl_aeAdvCback",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hci_tl_aeAdvCbackSendEvent",
    "return_type": "static void",
    "params": [
      {
        "name": "eventId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "handle",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hci_tl_aeAdvCbackProcess",
    "return_type": "static void",
    "params": [
      {
        "name": "evtCallback",
        "type": "hci_tl_AdvEvtCallback_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hci_tl_aeScanCback",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "extAdvRpt",
        "type": "aeExtAdvRptEvt_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hci_tl_setDefaultScanParams",
    "return_type": "static void",
    "params": [
      {
        "name": "pcmdScanParams",
        "type": "aeSetScanParamCmd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hci_tl_aeScanEventCallbackProcess",
    "return_type": "static void",
    "params": [
      {
        "name": "extAdvRpt",
        "type": "hci_tl_ScanEvtCallback_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "hci_tl_legacyScanCback",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "extAdvRpt",
        "type": "aeExtAdvRptEvt_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hci_tl_legacyScanEventCallbackProcess",
    "return_type": "static void",
    "params": [
      {
        "name": "extAdvRpt",
        "type": "hci_tl_ScanEvtCallback_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "HCI_TL_Init",
    "return_type": "void",
    "params": [
      {
        "name": "overwriteCB",
        "type": "HCI_TL_ParameterOverwriteCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "csCB",
        "type": "HCI_TL_CommandStatusCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "evtCB",
        "type": "HCI_TL_CalllbackEvtProcessCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "taskID",
        "type": "ICall_EntityID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_sendSystemReport",
    "return_type": "void",
    "params": [
      {
        "name": "id",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "info",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "HCI_TL_sendMemoryReport",
    "return_type": "void",
    "params": [
      {
        "name": "reportMask",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_compareAppLastOpcodeSent",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "opcode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_SendToStack",
    "return_type": "void",
    "params": [
      {
        "name": "msgToParse",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "checkLegacyHCICmdMode",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "opcode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "checkLegacyHCICmdStatus",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "opcode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HCI_TL_processStructuredEvent",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pEvt",
        "type": "ICall_Hdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "BLE3ToAgama_setParam",
    "return_type": "status_t",
    "params": [
      {
        "name": "id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "getBLE3ToAgamaEventProp",
    "return_type": "uint16_t",
    "params": [
      {
        "name": "eventType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "getAgamaToBLE3EventProp",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "eventType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "hci_tl_InitAdvSetParams",
    "return_type": "static void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "hci_tl_advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "hci_tl_isValidRandomAddressForAdv",
    "return_type": "static uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "hci_tl_advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "hci_tl_isValidRandomAddressForScan",
    "return_type": "static uint8",
    "params": [
      {
        "name": "hci_tl_cmdScanParams",
        "type": "aeSetScanParamCmd_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "isValidRandomAddressForCreateConn",
    "return_type": "uint8",
    "params": [
      {
        "name": "HCI_TL_createConnParam",
        "type": "aeCreateConnCmd_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "MAP_LL_IsRandomAddressConfigured",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "sendLiteCmdStatus",
    "return_type": "static void",
    "params": [
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "icall_liteTranslationInit",
    "return_type": "void",
    "params": [
      {
        "name": "JT",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "icall_liteTranslation",
    "return_type": "void",
    "params": [
      {
        "name": "pMsg",
        "type": "icall_directAPIMsg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICALL_Task_restore",
    "return_type": "void",
    "params": [
      {
        "name": "OriginalParam",
        "type": "struct sched_param *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICALL_Task_disable",
    "return_type": "void",
    "params": [
      {
        "name": "OriginalParam",
        "type": "struct sched_param *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_taskSelf",
    "return_type": "Task_Handle",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primEnableint",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_intNumArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primDisableint",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_intNumArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primEnableMint",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_primDisableMint",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "convertMilliToTimepec",
    "return_type": "void",
    "params": [
      {
        "name": "timeoutPosix",
        "type": "struct timespec *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "timeout",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "malloc",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "size",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_heapGetStats",
    "return_type": "void",
    "params": [
      {
        "name": "pStats",
        "type": "ICall_heapStats_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "ICall_enableint",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "intnum",
        "type": "int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_disableint",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "intnum",
        "type": "int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GetTickCount",
    "return_type": "uint_fast32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "AbsoluteTimeInMilliPlusTimer",
    "return_type": "static void",
    "params": [
      {
        "name": "timeout",
        "type": "uint_least32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "tsTimer",
        "type": "struct timespec *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_createWorkerThread",
    "return_type": "int",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_workerThreadSendMsg",
    "return_type": "int",
    "params": [
      {
        "name": "func",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ICall_IsQueueEmpty",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "slow_crc16",
    "return_type": "uint16",
    "params": [
      {
        "name": "crc",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint32",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "validChecksum",
    "return_type": "uint8",
    "params": [
      {
        "name": "beginAddr",
        "type": "const uint32 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "endAddr",
        "type": "const uint32 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "startup_entry",
    "return_type": "void",
    "params": [
      {
        "name": "arg0",
        "type": "const ICall_RemoteTaskArg *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "arg1",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "stack_main",
    "return_type": "extern int",
    "params": [
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__iar_data_init3",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "__TI_auto_init",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "kcb_Init",
    "return_type": "void",
    "params": [
      {
        "name": "processKeyCB",
        "type": "KcbEvtCBack_t",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "numKeys",
        "type": "uint8_t",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "kcb_ProcessKey",
    "return_type": "void",
    "params": [
      {
        "name": "keyId",
        "type": "uint8",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LEDProfile_init",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LED_Service_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LED_Service_WriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LedService_AddService",
    "return_type": "extern bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LedService_RegisterProfileCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileCallbacks",
        "type": "sensorServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LedService_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LedService_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LedService_RegisterAppCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "appCallbacks",
        "type": "LedServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LED_Service_findCharParamId",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LightProfile_init",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pHandle",
        "type": "I2C_Handle *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LightProfile_enable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LightProfile_disable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "light_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "light_WriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Light_AddService",
    "return_type": "extern bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Light_RegisterProfileCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileCallbacks",
        "type": "sensorServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Light_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Light_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "markSwitchFactoryImg",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_DisableInts",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llEnterCS_Raw",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llExitCS_Raw",
    "return_type": "void",
    "params": [
      {
        "name": "primask",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_Init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_EnableInts",
    "return_type": "void",
    "params": [
      {
        "name": "cpe0Ints",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cpe1Ints",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "hwInts",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_ClearInts",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_EnableHWInts",
    "return_type": "void",
    "params": [
      {
        "name": "hwInts",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_SendCommand",
    "return_type": "uint8",
    "params": [
      {
        "name": "radioCmd",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_SendCommandSynch",
    "return_type": "uint8",
    "params": [
      {
        "name": "rfCmd",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_ReadMailboxStatus",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_RegisterIsrCback",
    "return_type": "void",
    "params": [
      {
        "name": "mbIntType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "mbIntCback",
        "type": "mbIntCback_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MB_FwDebugDump",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mbCmdAckIsr",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mbCpe0Isr",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mbCpe1Isr",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mbHwIsr",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "get_model_info",
    "return_type": "model_info_t",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "output_number_callback",
    "return_type": "int",
    "params": [
      {
        "name": "act",
        "type": "bt_mesh_output_action_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "num",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "output_string_callback",
    "return_type": "int",
    "params": [
      {
        "name": "str",
        "type": "const char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "unprovisioned_beacon_callback",
    "return_type": "void",
    "params": [
      {
        "name": "uuid[16]",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "oob_info",
        "type": "bt_mesh_prov_oob_info_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "uri_hash",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_open_callback",
    "return_type": "void",
    "params": [
      {
        "name": "bearer",
        "type": "bt_mesh_prov_bearer_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "link_close_callback",
    "return_type": "void",
    "params": [
      {
        "name": "bearer",
        "type": "bt_mesh_prov_bearer_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "input_callback",
    "return_type": "int",
    "params": [
      {
        "name": "act",
        "type": "bt_mesh_input_action_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "func_callback",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "update_callback",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "init_callback",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "reset_callback",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "start_callback",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_set_callback",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "name",
        "type": "const char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_rd",
        "type": "size_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "read_cb",
        "type": "settings_read_cb",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "cb_arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fault_get_cur_callback",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "test_id",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "company_id",
        "type": "uint16_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "faults",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "fault_count",
        "type": "uint8_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fault_get_reg_callback",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "company_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "test_id",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "faults",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "fault_count",
        "type": "uint8_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fault_clear_callback",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "company_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "fault_test_callback",
    "return_type": "int",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "test_id",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "company_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "attn_on_callback",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "attn_off_callback",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mesh_erpc_register",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mesh_init",
    "return_type": "int",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_init_prov_raw_init",
    "return_type": "int",
    "params": [
      {
        "name": "prov_raw",
        "type": "const struct bt_mesh_prov_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_init_comp_raw_init",
    "return_type": "int",
    "params": [
      {
        "name": "comp_raw",
        "type": "const struct bt_mesh_comp_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_init_elem_raw_init",
    "return_type": "int",
    "params": [
      {
        "name": "elem_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "elem_raw",
        "type": "const struct bt_mesh_elem_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_cli_raw_init",
    "return_type": "int",
    "params": [
      {
        "name": "elem_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "model_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_srv_raw_init",
    "return_type": "int",
    "params": [
      {
        "name": "model_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_health_srv_raw_init",
    "return_type": "int",
    "params": [
      {
        "name": "elem_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "model_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "health_srv",
        "type": "const struct bt_mesh_health_srv_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "max_faults",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_init_model_raw_init",
    "return_type": "int",
    "params": [
      {
        "name": "elem_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "model_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "model_raw",
        "type": "const struct bt_mesh_model_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "op_raw",
        "type": "const struct bt_mesh_model_op_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "op_len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_app_key_add_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "key_net_idx",
        "type": "uint16_t",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "key_app_idx",
        "type": "uint16_t",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "app_key[16]",
        "type": "const uint8_t",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_app_key_add",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "key_net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "key_app_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "app_key",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_app_bind_vnd_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_app_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cid",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_app_bind_vnd",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "elem_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_app_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_id",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "cid",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_app_bind_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_app_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_app_bind",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "elem_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_app_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_id",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_add_vnd_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sub_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cid",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_add_vnd",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "elem_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sub_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_id",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "cid",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_add_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sub_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_add",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "elem_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sub_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_id",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_del_vnd_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sub_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cid",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_del_vnd",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "elem_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sub_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_id",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "cid",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_del_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sub_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_del",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "elem_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sub_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_id",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_va_add_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "label[16]",
        "type": "const uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_va_add",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "elem_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "label",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_id",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_va_add_vnd_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "label[16]",
        "type": "const uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cid",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_sub_va_add_vnd",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "net_idx",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "elem_addr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "label",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "mod_id",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "cid",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_pub_set_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pub",
        "type": "struct bt_mesh_cfg_mod_pub_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_cfg_mod_pub_set_vnd_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "net_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "elem_addr",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cid",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pub",
        "type": "struct bt_mesh_cfg_mod_pub_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_model_publish_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "elem_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "is_vnd",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "model_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "struct net_buf_simple_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_model_publish",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "model",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_model_send_data_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "elem_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "is_vnd",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "model_index",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "struct net_buf_simple_raw *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_model_find_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "elem_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_model_find_vnd_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "elem_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "company",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "id",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_model_extend_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "mod_elem_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mod_is_vnd",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "mod_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "base_mod_elem_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "base_mod_is_vnd",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "base_mod_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_model_extend",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "mod",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "base_mod",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_fault_update_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "elem_idx",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_prov_enable_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "bearers",
        "type": "bt_mesh_prov_bearer",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bt_mesh_prov_disable_wrapper",
    "return_type": "int",
    "params": [
      {
        "name": "bearers",
        "type": "bt_mesh_prov_bearer",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_load_wrapper",
    "return_type": "int",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "settings_load",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPI_InitTransport",
    "return_type": "void",
    "params": [
      {
        "name": "npiCallback",
        "type": "npiCBack_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPI_RxBufLen",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPI_ReadTransport",
    "return_type": "uint16",
    "params": [
      {
        "name": "buf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPI_WriteTransport",
    "return_type": "uint16",
    "params": [
      {
        "name": "buf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPI_GetMaxRxBufSize",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPI_GetMaxTxBufSize",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MT_BuildAndSendZToolResponse",
    "return_type": "void",
    "params": [
      {
        "name": "cmdType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "dataLen",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIClient_saveLocalTaskInfo",
    "return_type": "void",
    "params": [
      {
        "name": "localTaskEntityID",
        "type": "ICall_EntityID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIFrame_initialize",
    "return_type": "void",
    "params": [
      {
        "name": "incomingFrameCB",
        "type": "npiIncomingFrameCBack_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIFrame_frameMsg",
    "return_type": "void",
    "params": [
      {
        "name": "npiMsg",
        "type": "NPIMSG_msg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIFrame_collectFrameData",
    "return_type": "NPITASK_STATUS",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "npiframe_calcMTFCS",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "msg_ptr",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIRxBuf_Read",
    "return_type": "uint16",
    "params": [
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIRxBuf_GetRxBufCount",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIRxBuf_GetRxBufAvail",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIRxBuf_ReadFromRxBuf",
    "return_type": "uint16",
    "params": [
      {
        "name": "buf",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPISS_BLE_HCI_msgFromHost",
    "return_type": "void",
    "params": [
      {
        "name": "pNPIMsg",
        "type": "_npiFrame_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPISS_BLE_HCI_msgFromICall",
    "return_type": "void",
    "params": [
      {
        "name": "pGenMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPISS_BLE_HCI_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_process",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_transportRXCallBack",
    "return_type": "static void",
    "params": [
      {
        "name": "size",
        "type": "int",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_transportTxDoneCallBack",
    "return_type": "static void",
    "params": [
      {
        "name": "size",
        "type": "int",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_MRDYEventCB",
    "return_type": "static void",
    "params": [
      {
        "name": "size",
        "type": "int",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_ProcessTXQ",
    "return_type": "static NPITASK_STATUS",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_ProcessSyncTXQ",
    "return_type": "static NPITASK_STATUS",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_processSyncRXQ",
    "return_type": "static NPITASK_STATUS",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "syncReqRspWatchDogTimeoutCB",
    "return_type": "static void",
    "params": [
      {
        "name": "a0",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_ProcessRXQ",
    "return_type": "static NPITASK_STATUS",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_incomingFrameCB",
    "return_type": "static void",
    "params": [
      {
        "name": "frameSize",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pFrame",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msgType",
        "type": "NPIMSG_Type",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_sendBufToStack",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "appEntity",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "NPIMSG_msg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_processICallMsgEvent",
    "return_type": "static NPITASK_STATUS",
    "params": [
      {
        "name": "pMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_processStackMsg",
    "return_type": "static void",
    "params": [
      {
        "name": "pMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_createPQueue",
    "return_type": "static int",
    "params": [
      {
        "name": "queueHandle",
        "type": "mqd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mq_name",
        "type": "char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "mq_size",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mq_msgsize",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mq_flags",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_inititializeTask",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_handleICallEvents",
    "return_type": "static NPITASK_STATUS",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_handleAsyncEvents",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_handleSyncEvents",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_handleMrdyEvents",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_task",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_Fxn",
    "return_type": "Void",
    "params": [
      {
        "name": "a0",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "a1",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_createTask",
    "return_type": "void",
    "params": [
      {
        "name": "stackID",
        "type": "uint32_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_registerIncomingRXEventAppCB",
    "return_type": "void",
    "params": [
      {
        "name": "appRxCB",
        "type": "npiIncomingEventCBack_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "reRouteType",
        "type": "NPI_IncomingNPIEventRerouteType",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_registerIncomingTXEventAppCB",
    "return_type": "void",
    "params": [
      {
        "name": "appTxCB",
        "type": "npiIncomingEventCBack_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "reRouteType",
        "type": "NPI_IncomingNPIEventRerouteType",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_sendToHost",
    "return_type": "void",
    "params": [
      {
        "name": "pMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_freeNpiMsg",
    "return_type": "void",
    "params": [
      {
        "name": "pMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_transportDoneCallBack",
    "return_type": "static void",
    "params": [
      {
        "name": "sizeRx",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sizeTx",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_RemRdyEventCB",
    "return_type": "static void",
    "params": [
      {
        "name": "state",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_processRXQ",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_routeHostToSS",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pNPIMsg",
        "type": "_npiFrame_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_routeICallToSS",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pGenMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_Params_init",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "portType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "params",
        "type": "NPI_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_open",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "params",
        "type": "NPI_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_close",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_regSSFromHostCB",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "ssID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pCB",
        "type": "npiFromHostCBack_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_regSSFromICallCB",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "icallID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pCB",
        "type": "npiFromICallCBack_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_freeFrame",
    "return_type": "void",
    "params": [
      {
        "name": "frame",
        "type": "_npiFrame_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_sendAssertMsg",
    "return_type": "void",
    "params": [
      {
        "name": "assertMsg",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_chgAssertHdr",
    "return_type": "void",
    "params": [
      {
        "name": "npi_cmd0",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "npi_cmd1",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIData_postAssertNpiMsgEvent",
    "return_type": "void",
    "params": [
      {
        "name": "assertType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_DeserializeFrame",
    "return_type": "static void",
    "params": [
      {
        "name": "pMsg",
        "type": "_npiFrame_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_freeFrameData",
    "return_type": "void",
    "params": [
      {
        "name": "npiFrame",
        "type": "_npiFrame_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_transmissionCallBack",
    "return_type": "static void",
    "params": [
      {
        "name": "Rxlen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "Txlen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_MRDYPinHwiFxn",
    "return_type": "static void",
    "params": [
      {
        "name": "index",
        "type": "uint_least8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_initTL",
    "return_type": "void",
    "params": [
      {
        "name": "npiCBTx",
        "type": "npiRtosCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "npiCBRx",
        "type": "npiRtosCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "npiCBMrdy",
        "type": "npiRtosCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITask_NpiTlTestIsFree",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "GPIO_read",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "SRDY_PIN",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_ObtainTxLock",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_ReleaseTxLock",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_setPM",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_relPM",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_handleMrdyEvent",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_readTL",
    "return_type": "uint16",
    "params": [
      {
        "name": "buf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_writeTL",
    "return_type": "uint16",
    "params": [
      {
        "name": "buf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_getMaxRxBufSize",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_getMaxTxBufSize",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_getRxBufLen",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_remRdyGPIOHwiFxn",
    "return_type": "static void",
    "params": [
      {
        "name": "index",
        "type": "uint_least8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_openTL",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "params",
        "type": "NPITL_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_closeTL",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_checkNpiBusy",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_handleRemRdyEvent",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITL_writeBypassSafeTL",
    "return_type": "void",
    "params": [
      {
        "name": "buf",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_CallBack",
    "return_type": "static void",
    "params": [
      {
        "name": "handle",
        "type": "SPI_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "objTransaction",
        "type": "SPI_Transaction *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_calcFCS",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "msg_ptr",
        "type": "Char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_initializeTransport",
    "return_type": "void",
    "params": [
      {
        "name": "tRxBuf",
        "type": "Char *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "tTxBuf",
        "type": "Char *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "npiCBack",
        "type": "npiCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_stopTransfer",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_handleMrdyEvent",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_readTransport",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_writeTransport",
    "return_type": "uint16",
    "params": [
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_openTransport",
    "return_type": "void",
    "params": [
      {
        "name": "portID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "portParams",
        "type": "SPI_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "npiCBack",
        "type": "npiCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_closeTransport",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLSPI_handleRemRdyEvent",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_readIsrBuf",
    "return_type": "static uint16",
    "params": [
      {
        "name": "size",
        "type": "size_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_writeCallBack",
    "return_type": "static void",
    "params": [
      {
        "name": "handle",
        "type": "UART2_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "userArg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "int_fast16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_readCallBack",
    "return_type": "static void",
    "params": [
      {
        "name": "handle",
        "type": "UART2_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "size_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "userArg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "int_fast16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_initializeTransport",
    "return_type": "void",
    "params": [
      {
        "name": "tRxBuf",
        "type": "Char *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "tTxBuf",
        "type": "Char *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "npiCBack",
        "type": "npiCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_stopTransfer",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_handleMrdyEvent",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_readTransport",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_writeTransport",
    "return_type": "uint16",
    "params": [
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_validPacketFound",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_calcFCS",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "buf",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_openTransport",
    "return_type": "void",
    "params": [
      {
        "name": "portID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "portParams",
        "type": "UART2_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "npiCBack",
        "type": "npiCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_closeTransport",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_handleRemRdyEvent",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPITLUART_eventCallBack",
    "return_type": "static void",
    "params": [
      {
        "name": "handle",
        "type": "UART2_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "event",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "data",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "userArg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIUtil_free",
    "return_type": "void",
    "params": [
      {
        "name": "pMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIUtil_EnterCS",
    "return_type": "_npiCSKey_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIUtil_ExitCS",
    "return_type": "void",
    "params": [
      {
        "name": "key",
        "type": "_npiCSKey_t",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIUtil_constructQueue",
    "return_type": "Queue_Handle",
    "params": [
      {
        "name": "pQueue",
        "type": "Queue_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Queue_handle",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pQueue",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "NPIUtil_createPQueue",
    "return_type": "int",
    "params": [
      {
        "name": "queueHandle",
        "type": "mqd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mq_name",
        "type": "char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "mq_size",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mq_msgsize",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "mq_flags",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "oadWriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "oadImgIdentifyWrite",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadProcessExtControlCmd",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadImgBlockWrite",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadGetNextBlockReq",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "blkNum",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadEnqueueMsg",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "event",
        "type": "oadEvent_e",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadSendNotification",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "charCfg",
        "type": "gattCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "charIdx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "oadCheckImageID",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "idPld",
        "type": "imgIdentifyPld_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadCheckDL",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadValidateCandidateHdr",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "receivedHeader",
        "type": "imgHdr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "oadFindCurrentImageHdr",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadCheckFactoryImage",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadFindFactImgAddr",
    "return_type": "static uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadFindExtFlMetaPage",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "metaPg",
        "type": "uint16_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "imgInfo",
        "type": "ImageSizeInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadFindExtFlImgAddr",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "extImgInfo",
        "type": "ImageSizeInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "candiateLen",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadSortImgInfo",
    "return_type": "static void",
    "params": [
      {
        "name": "extImgInfo",
        "type": "ImageSizeInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "numImgs",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadFindleastRecentlyUsedIdx",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "extImgInfo",
        "type": "ImageSizeInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "numImgs",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadEraseExtFlashPages",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "startAddr",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "imgLen",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pageSize",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadResetState",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadInactivityTimeout",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_open",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "oadTimeout",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_register",
    "return_type": "void",
    "params": [
      {
        "name": "pfnOadCBs",
        "type": "oadTargetCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_getactiveCxnHandle",
    "return_type": "uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_getSWVersion",
    "return_type": "bool",
    "params": [
      {
        "name": "swVer",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "OAD_processQueue",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_getBlockSize",
    "return_type": "uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_cancel",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_isUsrAppValid",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_close",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_setBlockSize",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "mtuSize",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_evenBitCount",
    "return_type": "bool",
    "params": [
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadCreateFactoryImageBackup",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_getProgressInfo",
    "return_type": "void",
    "params": [
      {
        "name": "pImgInfo",
        "type": "imgProgressInfo_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "displayMetadata",
    "return_type": "static void",
    "params": [
      {
        "name": "startingRow",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "imgIdx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "displayMetaList",
    "return_type": "static void",
    "params": [
      {
        "name": "startingRow",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "maxMeta",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "eraseAll",
    "return_type": "static void",
    "params": [
      {
        "name": "startingRow",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "maxMeta",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "eraseSingle",
    "return_type": "static void",
    "params": [
      {
        "name": "startingRow",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "metaIdx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "createFactoryImg",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "printMetaDataStruct",
    "return_type": "static void",
    "params": [
      {
        "name": "meta",
        "type": "ExtImageInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "imgNum",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "startingRow",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "eraseExtFlRegion",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "startPage",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "endPage",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "pageIsUsed",
    "return_type": "static bool",
    "params": [
      {
        "name": "page",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "eraseImage",
    "return_type": "static bool",
    "params": [
      {
        "name": "startingRow",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "metaIdx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OadEflDbg_displayMetadata",
    "return_type": "bool",
    "params": [
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OadEflDbg_displayMetaList",
    "return_type": "bool",
    "params": [
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OadEflDbg_eraseAll",
    "return_type": "bool",
    "params": [
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OadEflDbg_eraseImg",
    "return_type": "bool",
    "params": [
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OadEflDbg_createFactoryImg",
    "return_type": "bool",
    "params": [
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ResetReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ResetWriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Reset_addService",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pfnOadCBs",
        "type": "oadUsrAppCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "OAD_processSNPEventCB",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "snpEventParam_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_getNextBlockReq",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "blkNum",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_rejectImage",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pImgHdr",
        "type": "img_hdr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_sendStatus",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "CheckImageDownloadCount",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "checkDL",
    "return_type": "static uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crcCalcDL",
    "return_type": "static uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "crc16",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "crc",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "val",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "oadCCCDIndCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "context",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "conn",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cccdHdl",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "OAD_addService",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "OAD_imgIdentifyWrite",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OAD_imgBlockWrite",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OADUtil_signCommandECDSA",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "secHdr",
        "type": "securityHdr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "signPld",
        "type": "signPld_ECDSA_P256_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "payload",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "InitBoard",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Onboard_rand",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "TimerElapsed",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "_itoa",
    "return_type": "void",
    "params": [
      {
        "name": "num",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "radix",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Onboard_soft_reset",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RegisterForKeys",
    "return_type": "uint8",
    "params": [
      {
        "name": "task_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OnBoard_KeyCallback",
    "return_type": "void",
    "params": [
      {
        "name": "keys",
        "type": "uint8",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "OnBoard_SendKeys",
    "return_type": "uint8",
    "params": [
      {
        "name": "keys",
        "type": "uint8",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_msg_enqueue_push",
    "return_type": "static uint8",
    "params": [
      {
        "name": "destination_task",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_ptr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "urgent",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_proxy2alien",
    "return_type": "static ICall_EntityID",
    "params": [
      {
        "name": "proxyid",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_dispatch2id",
    "return_type": "static uint8",
    "params": [
      {
        "name": "entity",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_alien2proxy",
    "return_type": "static uint8",
    "params": [
      {
        "name": "entity",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_msec_timer_cback",
    "return_type": "static void",
    "params": [
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_strlen",
    "return_type": "int",
    "params": [
      {
        "name": "pString",
        "type": "char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_memcmp",
    "return_type": "uint8",
    "params": [
      {
        "name": "src1",
        "type": "const void GENERIC *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "src2",
        "type": "const void GENERIC *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "unsigned int",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_build_uint16",
    "return_type": "uint16",
    "params": [
      {
        "name": "swapped",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_build_uint32",
    "return_type": "uint32",
    "params": [
      {
        "name": "swapped",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_rand",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "osal_prepare_svc_enroll",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_enroll_dispatchid",
    "return_type": "void",
    "params": [
      {
        "name": "taskid",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "dispatchid",
        "type": "ICall_EntityID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_enroll_senderid",
    "return_type": "void",
    "params": [
      {
        "name": "taskid",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "dispatchid",
        "type": "ICall_EntityID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_enroll_notasksender",
    "return_type": "void",
    "params": [
      {
        "name": "dispatchid",
        "type": "ICall_EntityID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_event_send",
    "return_type": "static int8",
    "params": [
      {
        "name": "type",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "destination_task",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_ptr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_service_complete",
    "return_type": "uint8",
    "params": [
      {
        "name": "destination_task",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_ptr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "osal_msg_push_front",
    "return_type": "uint8",
    "params": [
      {
        "name": "destination_task",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_ptr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_msg_count",
    "return_type": "uint8",
    "params": [
      {
        "name": "task_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "event",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_msg_enqueue",
    "return_type": "void",
    "params": [
      {
        "name": "q_ptr",
        "type": "osal_msg_q_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_msg_push",
    "return_type": "void",
    "params": [
      {
        "name": "q_ptr",
        "type": "osal_msg_q_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_msg_extract",
    "return_type": "void",
    "params": [
      {
        "name": "q_ptr",
        "type": "osal_msg_q_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "prev_ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_msg_enqueue_max",
    "return_type": "uint8",
    "params": [
      {
        "name": "q_ptr",
        "type": "osal_msg_q_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "max",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_clear_event",
    "return_type": "uint8",
    "params": [
      {
        "name": "task_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "event_flag",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_int_enable",
    "return_type": "uint8",
    "params": [
      {
        "name": "interrupt_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_int_disable",
    "return_type": "uint8",
    "params": [
      {
        "name": "interrupt_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_init_system",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "osal_timer_init",
    "return_type": "void",
    "params": [
      {
        "name": "tickPeriod",
        "type": "uint_least32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "osalMaxMsecs",
        "type": "uint_least32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_start_system",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "osal_service_entry",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "osal_set_icall_hook",
    "return_type": "void",
    "params": [
      {
        "name": "param",
        "type": "osal_icallMsg_hook_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_run_system",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "osal_isbufset",
    "return_type": "uint8",
    "params": [
      {
        "name": "buf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "val",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_self",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleLog_handleCyclicBuf",
    "return_type": "void",
    "params": [
      {
        "name": "len",
        "type": "uint32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleLog_int_int",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "type",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "format",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "param1",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param2",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleLog_int_str",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "type",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "format",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "param1",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param2",
        "type": "char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "bleLog_int_time",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "type",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "start_str",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "param1",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llQueryTxQueue",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "addr",
        "type": "uint32",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llHealthUpdateWrapperForOsal",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_bm_reg_callback",
    "return_type": "void",
    "params": [
      {
        "name": "pCBack",
        "type": "bm_notify_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_bm_free",
    "return_type": "void",
    "params": [
      {
        "name": "payload_ptr",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "cbTimerSetup",
    "return_type": "static Status_t",
    "params": [
      {
        "name": "pfnCbTimer",
        "type": "pfnCbTimer_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "timeout",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pTimerId",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reload",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_CbTimerInit",
    "return_type": "void",
    "params": [
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_CbTimerProcessEvent",
    "return_type": "uint16",
    "params": [
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_CbTimerStart",
    "return_type": "Status_t",
    "params": [
      {
        "name": "pfnCbTimer",
        "type": "pfnCbTimer_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "timeout",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pTimerId",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_CbTimerStartReload",
    "return_type": "Status_t",
    "params": [
      {
        "name": "pfnCbTimer",
        "type": "pfnCbTimer_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "timeout",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pTimerId",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_CbTimerUpdate",
    "return_type": "Status_t",
    "params": [
      {
        "name": "timerId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "timeout",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_CbTimerStop",
    "return_type": "Status_t",
    "params": [
      {
        "name": "timerId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "macMcuPrecisionCount",
    "return_type": "extern uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osalMcuDivide31By16To16",
    "return_type": "extern __near_func uint32",
    "params": [
      {
        "name": "dividend",
        "type": "uint32",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "divisor",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "monthLength",
    "return_type": "static uint8",
    "params": [
      {
        "name": "lpyr",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "mon",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osalClockUpdate",
    "return_type": "static void",
    "params": [
      {
        "name": "elapsedMSec",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osalTimeUpdate",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osalAdjustTimer",
    "return_type": "void",
    "params": [
      {
        "name": "Msec",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_setClock",
    "return_type": "void",
    "params": [
      {
        "name": "newTime",
        "type": "UTCTime",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_getClock",
    "return_type": "UTCTime",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_ConvertUTCTime",
    "return_type": "void",
    "params": [
      {
        "name": "tm",
        "type": "UTCTimeStruct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "secTime",
        "type": "UTCTime",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_ConvertUTCSecs",
    "return_type": "UTCTime",
    "params": [
      {
        "name": "tm",
        "type": "UTCTimeStruct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ll_McuPrecisionCount",
    "return_type": "extern uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_list_clearList",
    "return_type": "void",
    "params": [
      {
        "name": "list",
        "type": "osal_list_list *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_list_empty",
    "return_type": "bool",
    "params": [
      {
        "name": "list",
        "type": "osal_list_list *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_list_insert",
    "return_type": "void",
    "params": [
      {
        "name": "list",
        "type": "osal_list_list *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "newElem",
        "type": "osal_list_elem *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "curElem",
        "type": "osal_list_elem *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_list_put",
    "return_type": "void",
    "params": [
      {
        "name": "list",
        "type": "osal_list_list *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "elem",
        "type": "osal_list_elem *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_list_putHead",
    "return_type": "void",
    "params": [
      {
        "name": "list",
        "type": "osal_list_list *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "elem",
        "type": "osal_list_elem *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_list_remove",
    "return_type": "void",
    "params": [
      {
        "name": "list",
        "type": "osal_list_list *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "elem",
        "type": "osal_list_elem *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_mem_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_mem_kick",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_heap_block_max",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_heap_block_cnt",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_heap_block_free",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_heap_mem_used",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_heap_high_water",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_init",
    "return_type": "void",
    "params": [
      {
        "name": "p",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_item_init_ex",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "subId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_item_init",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_item_len_ex",
    "return_type": "uint16",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "subId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_item_len",
    "return_type": "uint16",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_write_ex",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "subId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ndx",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_write",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ndx",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_read_ex",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "subId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ndx",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_read",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ndx",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_delete_ex",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "subId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_nv_delete",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_pwrmgr_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_pwrmgr_device",
    "return_type": "void",
    "params": [
      {
        "name": "pwrmgr_device",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_pwrmgr_task_state",
    "return_type": "uint8",
    "params": [
      {
        "name": "task_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_pwrmgr_powerconserve",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "initNV",
    "return_type": "static uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setActivePage",
    "return_type": "static void",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "setXferPage",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "erasePage",
    "return_type": "static void",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "findOffset",
    "return_type": "static void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "compactPage",
    "return_type": "static void",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "writeWord",
    "return_type": "static void",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "cnt",
        "type": "osalSnvLen_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "enableCache",
    "return_type": "static void",
    "params": [
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "disableCache",
    "return_type": "static uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "findItem",
    "return_type": "static uint16",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "id",
        "type": "osalSnvId_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "writeItem",
    "return_type": "static void",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "id",
        "type": "osalSnvId_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "alignedLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "xferItem",
    "return_type": "static void",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "alignedLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "srcOff",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "verifyWordM",
    "return_type": "static void",
    "params": [
      {
        "name": "pg",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "cnt",
        "type": "osalSnvLen_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_snv_init",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_snv_register",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pFptrs",
        "type": "NVINTF_nvFuncts_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "systemId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_snv_ext_write",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "id",
        "type": "osalSnvId_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "osalSnvLen_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBuf",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_delete",
    "return_type": "void",
    "params": [
      {
        "name": "task_handle",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_suspend",
    "return_type": "void",
    "params": [
      {
        "name": "task_handle",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_resume",
    "return_type": "void",
    "params": [
      {
        "name": "task_handle",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_priority_get",
    "return_type": "uint32",
    "params": [
      {
        "name": "task_handle",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_priority_set",
    "return_type": "void",
    "params": [
      {
        "name": "task_handle",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "task_priority",
        "type": "uint32",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_delay",
    "return_type": "void",
    "params": [
      {
        "name": "ticks_to_delay",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_delay_until",
    "return_type": "void",
    "params": [
      {
        "name": "prev_wake_time",
        "type": "uint32* const",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "time_increment",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_start_scheduler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_end_scheduler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_suspend_all",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_resume_all",
    "return_type": "long",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_task_yield",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_queue_receive",
    "return_type": "uint32",
    "params": [
      {
        "name": "handle",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buffer",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "wait_ticks",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_queue_send",
    "return_type": "uint32",
    "params": [
      {
        "name": "handle",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "buffer",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "wait_ticks",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osalDeleteTimer",
    "return_type": "void",
    "params": [
      {
        "name": "rmTimer",
        "type": "osalTimerRec_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osalTimerInit",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_timer_refTimeUpdate",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_start_timerEx",
    "return_type": "uint8",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "event_id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "timeout_value",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_start_reload_timer",
    "return_type": "uint8",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "event_id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "timeout_value",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_stop_timerEx",
    "return_type": "uint8",
    "params": [
      {
        "name": "task_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "event_id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_get_timeoutEx",
    "return_type": "uint32",
    "params": [
      {
        "name": "task_id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "event_id",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_timer_num_active",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osalTimerUpdate",
    "return_type": "void",
    "params": [
      {
        "name": "updateTime",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_adjust_timers",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_next_timeout",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "osal_GetSystemClock",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "port_timerStart",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "struct port_timerObject_s *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "timeout",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "port_timerStop",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "struct port_timerObject_s *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "port_queueGet",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "struct port_queueObject_s *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ppQueueElement",
        "type": "char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "port_queuePut",
    "return_type": "int",
    "params": [
      {
        "name": "handle",
        "type": "struct port_queueObject_s *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "queueElement",
        "type": "char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "size",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "port_queueEmpty",
    "return_type": "bool",
    "params": [
      {
        "name": "handle",
        "type": "struct port_queueObject_s *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "port_enterCS_HW",
    "return_type": "port_key_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "port_exitCS_HW",
    "return_type": "void",
    "params": [
      {
        "name": "key",
        "type": "port_key_t",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "port_enterCS_SW",
    "return_type": "port_key_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "port_exitCS_SW",
    "return_type": "void",
    "params": [
      {
        "name": "key",
        "type": "port_key_t",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "timerEventCB",
    "return_type": "static void",
    "params": [
      {
        "name": "a0",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "PWRMON_check",
    "return_type": "bool",
    "params": [
      {
        "name": "threshold",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "PWRMON_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "PWRMON_setMonitor",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "mode",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "threshold",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "period",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cBack",
        "type": "PWRMON_CbackFn_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "PWRMON_startMonitor",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "PWRMON_stopMonitor",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "PWRMON_getVoltage",
    "return_type": "uint16_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rcosc_injectCalibrationClockHandler",
    "return_type": "static void",
    "params": [
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rcosc_injectCalibrationPostNotify",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "eventType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "eventArg",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "clientArg",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RCOSC_enableCalibration",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_InitRfHal",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_AllocRatChan",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_FreeRatChan",
    "return_type": "uint8",
    "params": [
      {
        "name": "ratChanNum",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_MapRatChansToInt",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_RegisterRatChanCallback",
    "return_type": "uint8",
    "params": [
      {
        "name": "ratChanNum",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "ratChanCBack",
        "type": "ratChanCBack_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_InitDataQueue",
    "return_type": "void",
    "params": [
      {
        "name": "pDataEntryQ",
        "type": "dataEntryQ_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_QueueRFDataEntries",
    "return_type": "rfhalStat_t",
    "params": [
      {
        "name": "pDataEntryQ",
        "type": "dataEntryQ_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_AddTxDataEntry",
    "return_type": "rfhalStat_t",
    "params": [
      {
        "name": "pDataEntryQ",
        "type": "dataEntryQ_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pDataEntry",
        "type": "dataEntry_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "rfCoreState",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_FreeNextTxDataEntry",
    "return_type": "void",
    "params": [
      {
        "name": "pDataEntryQ",
        "type": "dataEntryQ_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_FreeDataEntryQueue",
    "return_type": "void",
    "params": [
      {
        "name": "pDataEntryQ",
        "type": "dataEntryQ_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_NextDataEntryDone",
    "return_type": "void",
    "params": [
      {
        "name": "pDataEntryQ",
        "type": "dataEntryQ_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RFHAL_FreeDataEntry",
    "return_type": "void",
    "params": [
      {
        "name": "pDataEntry",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rfCallback_hook",
    "return_type": "extern void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rfCallback",
    "return_type": "extern void",
    "params": [
      {
        "name": "param",
        "type": "RF_Handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "RF_CmdHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rfPUpCallback",
    "return_type": "extern void",
    "params": [
      {
        "name": "param",
        "type": "RF_Handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "RF_CmdHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ll_eccInit",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ll_GenerateDHKey",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ll_ReadLocalP256PublicKey",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "L2CAP_SendDataPkt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capAllocChannel",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capAllocConnChannel",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capBuildInfoReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capBuildParamUpdateReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capBuildSignalHdr",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capDisconnectAllChannels",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "l2capEncapSendData",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capFindLocalId",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capFreeChannel",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capFreePendingPkt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capHandleTimerCB",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capHandleRxError",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capNotifyData",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capNotifyEvent",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capNotifySignal",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capParseCmdReject",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capParsePacket",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capParseParamUpdateRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capParseSignalHdr",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capProcessOSALMsg",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capProcessReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capProcessRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capProcessRxData",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capProcessSignal",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capSendCmd",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capSendFCPkt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capSendPkt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capSendReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capStartTimer",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capStopTimer",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capStoreFCPkt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capFindPsm",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capAllocPsm",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capNumActiveChannnels",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capFindLocalCID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capGetCoChannelInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capFindRemoteId",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capSendConnectRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "l2capBuildDisconnectReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "l2capFlowCtrlCredit",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "l2capReassembleSegment",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capParseConnectRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "l2capNotifyChannelEstEvt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capParseDisconnectRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "l2capNotifyChannelTermEvt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capProcessConnectReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "l2capParseDisconnectReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "l2capBuildDisconnectRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "l2capFindRemoteCID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capDisconnectChannel",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "l2capSendNextSegment",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capFindNextSegment",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capSendSegment",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capFreeTxSDU",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capNotifyCreditEvt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capBuildConnectRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "l2capNotifySendSduDoneEvt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "l2capBuildFlowCtrlCredit",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "attSendMsg",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "attSendMsg_sPatch",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "attSendRspMsg",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gattClientHandleConnStatusCB",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattClientHandleTimerCB",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattClientNotifyTxCB",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattClientProcessMsgCB",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattFindClientInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattFindServerInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattFindService",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattGetPayload",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattGetServerStatus",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "CWE-119"
    ]
  },
  {
    "name": "gattNotifyEvent",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattParseReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessExchangeMTUReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessExecuteWriteReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "CWE-119"
    ]
  },
  {
    "name": "gattProcessFindByTypeValueReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessFindInfoReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessReadByGrpTypeReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessReadByTypeReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessReadReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessRxData",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessOSALMsg",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessWriteReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessReadMultiReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattRegisterClient",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattRegisterServer",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattResetServerInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattSendFlowCtrlEvt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "gattServerHandleConnStatusCB",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServerHandleTimerCB",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServerNotifyTxCB",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServerProcessMsgCB",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServerStartTimer",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServiceLastHandle",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattStartTimer",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattStopTimer",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattStoreServerInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattClientStartTimer",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessMultiReqs",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattResetClientInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessFindInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessFindByTypeValue",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessReadByType",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessReadLong",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessReadByGrpType",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessReliableWrites",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattProcessWriteLong",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattWrite",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattPrepareWriteReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattStoreClientInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattReadByGrpType",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattFindByTypeValue",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattReadByType",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattFindInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattRead",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattReadLong",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattGetClientStatus",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_FindServiceCBs",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_ProcessExchangeMTUReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_ProcessExecuteWriteReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "CWE-119"
    ]
  },
  {
    "name": "gattServApp_ProcessFindByTypeValueReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_ProcessPrepareWriteReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_ProcessReadBlobReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_ProcessReadByTypeReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_ProcessReadByGrpTypeReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_ProcessReadMultiReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_ProcessReadReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gattServApp_ProcessWriteReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_filterDiscMode",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_discardAdvRptSession",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_sendSessionEndEvt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_defragAdvRpt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_saveRptAndNotify",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_processAdvRptCb",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_processStartEndCb",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_processErrorCb",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_processSessionEndEvt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapInit_connect_internal",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapInit_sendConnCancelledEvt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapInit_initiatingEnd",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ROM_Spinlock",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "FLASH_EmptyFunc",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ROM_Init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rfCallback_all",
    "return_type": "extern void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "rfCallback_ADV_NCONN_and_ADV_CONN",
    "return_type": "extern void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "rfCallback_ADV_NCONN",
    "return_type": "extern void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "rfCallback_SCAN_CFG_and_INIT_CFG",
    "return_type": "extern void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_ProcessEvent_LL_EVT_EXT_SCAN_TIMEOUT_SCAN_CFG",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_ProcessEvent_LL_EVT_EXT_SCAN_TIMEOUT_no_SCAN_CFG",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_ProcessEvent_LL_EVT_EXT_SCAN_TIMEOUT_hook",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_ProcessEvent_LL_EVT_MASTER_CONN_CREATED_INIT_CFG",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ProcessEvent_LL_EVT_MASTER_CONN_CREATED_no_INIT_CFG",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ProcessEvent_LL_EVT_MASTER_CONN_CREATED_hook",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HOOK_llProcessMasterControlPacket",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "connPtr",
        "type": "llConnState_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "HOOK_llProcessMasterControlPacket_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llScheduler",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llScheduler_no_INIT_CFG_no_SCAN_CFG",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llScheduler_no_INIT_CFG",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llScheduler_hook",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llGetCteInfo",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_processHciEvent",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "hciEvt",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "hciEvtSz",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_processPeriodicAdvEvent",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_EnhancedCteRxTest",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "rxChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "modIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "expectedCteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "expectedCteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EnhancedCteTxTest",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "txChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "payloadLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "payloadType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_DirectCteTestTxTest",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "txChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "payloadLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "payloadType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_DirectCteTestRxTest",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "rxChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "modIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "expectedCteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "expectedCteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_DirectCteTestTxTest",
    "return_type": "uint8",
    "params": [
      {
        "name": "txChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "payloadLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "payloadType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_DirectCteTestRxTest",
    "return_type": "uint8",
    "params": [
      {
        "name": "rxChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "modIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "expectedCteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "expectedCteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_EnhancedCteTxTest",
    "return_type": "uint8",
    "params": [
      {
        "name": "txChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "payloadLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "payloadType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "txPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_EnhancedCteRxTest",
    "return_type": "uint8",
    "params": [
      {
        "name": "rxChan",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rxPhy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "modIndex",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "expectedCteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "expectedCteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSetRfReportAodPackets",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llGetCteInfo",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_RTLSSrv_processHciEvent",
    "return_type": "uint8",
    "params": [
      {
        "name": "hciEvt",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "hciEvtSz",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_SetConnectionCteReceiveParams",
    "return_type": "uint8",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "samplingEnable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_SetConnectionCteReceiveParams",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "samplingEnable",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "slotDurations",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "length",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pAntenna",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LL_SetConnectionCteTransmitParams",
    "return_type": "uint8",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "types",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_SetConnectionCteTransmitParams",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "types",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "length",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pAntenna",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LL_SetConnectionCteRequestEnable",
    "return_type": "uint8",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "interval",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "type",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_SetConnectionCteRequestEnable",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "enable",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "interval",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "length",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "type",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LL_SetConnectionCteResponseEnable",
    "return_type": "uint8",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_SetConnectionCteResponseEnable",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "enable",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LL_ReadAntennaInformation",
    "return_type": "uint8",
    "params": [
      {
        "name": "sampleRates",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "maxNumOfAntennas",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxSwitchPatternLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxCteLen",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ReadAntennaInformation",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "sampleRates",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "maxNumOfAntennas",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "maxSwitchPatternLen",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "maxCteLen",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llUpdateCteState",
    "return_type": "void",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSetupCte",
    "return_type": "uint8",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "req",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llSetupCte",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connPtr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "req",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llFreeCteSamplesEntryQueue",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llFreeCteSamplesEntryQueue",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_EXT_SetLocationingAccuracy",
    "return_type": "uint8",
    "params": [
      {
        "name": "handle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate1M",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize1M",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate2M",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize2M",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCtrl",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EXT_SetLocationingAccuracy",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sampleRate1M",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sampleSize1M",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sampleRate2M",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sampleSize2M",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "sampleCtrl",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_HCI_CteRequestFailedEvent",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llDmmSetThreshold",
    "return_type": "extern void",
    "params": [
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "handle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reset",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llDmmGetActivityIndex",
    "return_type": "extern uint32",
    "params": [
      {
        "name": "cmdNum",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llDmmSetAdvHandle",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "handle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "clear",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llDmmDynamicFree",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llDmmDynamicAlloc",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_AbortedCback",
    "return_type": "extern uint32_t",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_AbortedCback_all",
    "return_type": "extern uint32_t",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_AbortedCback_peripheral",
    "return_type": "extern uint32_t",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_AbortedCback_broadcaster",
    "return_type": "extern uint32_t",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_AbortedCback_central",
    "return_type": "extern uint32_t",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llDmmSetThreshold",
    "return_type": "void",
    "params": [
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "handle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reset",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llDmmGetActivityIndex",
    "return_type": "uint32",
    "params": [
      {
        "name": "cmdNum",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llDmmSetAdvHandle",
    "return_type": "uint8",
    "params": [
      {
        "name": "handle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "clear",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llDmmDynamicFree",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llDmmDynamicAlloc",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_AbortedCback",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSetStarvationMode",
    "return_type": "uint8",
    "params": [
      {
        "name": "connId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "setOnOffValue",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llSetStarvationMode",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connId",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "setOnOffValue",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llGetStarvationMode",
    "return_type": "uint8",
    "params": [
      {
        "name": "connId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "llGetStarvationMode",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connId",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "MAP_llMaster_TaskEnd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSlave_TaskEnd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llInitFeatureSet",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llCoexSetParams",
    "return_type": "extern llCoexParams_t",
    "params": [
      {
        "name": "cmdNum",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pCmdParams",
        "type": "RF_ScheduleCmdParams *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llCoexInit",
    "return_type": "extern void",
    "params": [
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llCoexUpdateCounters",
    "return_type": "extern void",
    "params": [
      {
        "name": "grant",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llCoexRfLinkRatCompareConnMaxTimeLength",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llCoexSetParams",
    "return_type": "void",
    "params": [
      {
        "name": "cmdNum",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pCmdParams",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llCoexInit",
    "return_type": "void",
    "params": [
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llCoexUpdateCounters",
    "return_type": "void",
    "params": [
      {
        "name": "grant",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llCoexRfLinkRatCompareConnMaxTimeLength",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_EXT_CoexEnable",
    "return_type": "uint8",
    "params": [
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_EXT_CoexEnable",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "enable",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LE_SetPeriodicAdvParams",
    "return_type": "uint8",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "periodicAdvIntervalMin",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "periodicAdvIntervalMax",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "periodicAdvProp",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetPeriodicAdvParams",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "advHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "periodicAdvIntervalMin",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "periodicAdvIntervalMax",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "periodicAdvProp",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_SetPeriodicAdvData",
    "return_type": "uint8",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "operation",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "data",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetPeriodicAdvData",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "advHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "operation",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "dataLength",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "data",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_SetPeriodicAdvEnable",
    "return_type": "uint8",
    "params": [
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetPeriodicAdvEnable",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "enable",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "advHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_SetConnectionlessCteTransmitParams",
    "return_type": "uint8",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteCount",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetConnectionlessCteTransmitParams",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "advHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "cteLen",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "cteType",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "cteCount",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "length",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pAntenna",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_SetConnectionlessCteTransmitEnable",
    "return_type": "uint8",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetConnectionlessCteTransmitEnable",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "advHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "enable",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llGetPeriodicAdv",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llUpdatePeriodicAdvChainPacket",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetPeriodicAdvChmapUpdate",
    "return_type": "void",
    "params": [
      {
        "name": "set",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llPeriodicAdv_PostProcess",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llTrigPeriodicAdv",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pPeriodicAdv",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llTrigPeriodicAdv",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pAdvSet",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pPeriodicAdv",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetupPeriodicAdv",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSetupPeriodicAdv",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pAdvSet",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llEndPeriodicAdvTask",
    "return_type": "void",
    "params": [
      {
        "name": "pPeriodicAdv",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llFindNextPeriodicAdv",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetPeriodicSyncInfo",
    "return_type": "void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llGetCurrentPeriodicAdv",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llPeriodicAdv_Config",
    "return_type": "void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llClearPeriodicAdvSets",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapAdv_periodicAdvCmdCompleteCBs",
    "return_type": "uint8",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapAdv_periodicAdvCmdCompleteCBs",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llProcessExtScanRxFIFO_hook",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llProcessScanRxFIFO_hook",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llProcessPeriodicScanSyncInfo",
    "return_type": "extern void",
    "params": [
      {
        "name": "pPkt",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "advEvent",
        "type": "aeExtAdvRptEvt_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "timeStamp",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "phy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llUpdateExtScanAcceptSyncInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_PeriodicAdvCreateSync",
    "return_type": "uint8",
    "params": [
      {
        "name": "options",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advSID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddress",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "skip",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "syncTimeout",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "syncCteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_PeriodicAdvCreateSync",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "options",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "advSID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "advAddrType",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "advAddress",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "skip",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "syncTimeout",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "syncCteType",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_PeriodicAdvCreateSyncCancel",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_PeriodicAdvCreateSyncCancel",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_PeriodicAdvTerminateSync",
    "return_type": "uint8",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_PeriodicAdvTerminateSync",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "syncHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_AddDeviceToPeriodicAdvList",
    "return_type": "uint8",
    "params": [
      {
        "name": "advAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddress",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advSID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_AddDeviceToPeriodicAdvList",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "advAddrType",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "advAddress",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "advSID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_RemoveDeviceFromPeriodicAdvList",
    "return_type": "uint8",
    "params": [
      {
        "name": "advAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advAddress",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "advSID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_RemoveDeviceFromPeriodicAdvList",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "advAddrType",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "advAddress",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "advSID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_ClearPeriodicAdvList",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_ClearPeriodicAdvList",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_ReadPeriodicAdvListSize",
    "return_type": "uint8",
    "params": [
      {
        "name": "listSize",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_ReadPeriodicAdvListSize",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "listSize",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_SetPeriodicAdvReceiveEnable",
    "return_type": "uint8",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetPeriodicAdvReceiveEnable",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "syncHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "enable",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_SetConnectionlessIqSamplingEnable",
    "return_type": "uint8",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "samplingEnable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "maxSampledCtes",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "length",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetConnectionlessIqSamplingEnable",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "syncHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "samplingEnable",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "slotDurations",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "maxSampledCtes",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "length",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pAntenna",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llProcessExtScanRxFIFO_hook",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llProcessScanRxFIFO_hook",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llProcessPeriodicScanSyncInfo",
    "return_type": "void",
    "params": [
      {
        "name": "pPkt",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "advEvent",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "timeStamp",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "phy",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llEndPeriodicScanTask",
    "return_type": "void",
    "params": [
      {
        "name": "pPeriodicScan",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llPeriodicScan_PostProcess",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llProcessPeriodicScanRxFIFO",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llFindNextPeriodicScan",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llTerminatePeriodicScan",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llGetPeriodicScan",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llGetCurrentPeriodicScan",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "state",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llGetPeriodicScanCteTasks",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llGetPeriodicScanCteTasks",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapScan_periodicAdvCmdCompleteCBs",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_periodicAdvCmdCompleteCBs",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapScan_periodicAdvCmdStatusCBs",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_periodicAdvCmdStatusCBs",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapScan_processBLEPeriodicAdvCBs",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapScan_processBLEPeriodicAdvCBs",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llClearPeriodicScanSets",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llUpdateExtScanAcceptSyncInfo",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetExtAdvData_hook",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetExtAdvData",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetExtScanRspData_hook",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetExtScanRspData",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetExtAdvEnable_hook",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_SetExtAdvEnable",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapAdv_handleAdvHciCmdComplete",
    "return_type": "uint8",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapAdv_handleAdvHciCmdComplete",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llGetSingleConn",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "llCalcSingleConnMaxTimeLength",
    "return_type": "extern uint32",
    "params": [
      {
        "name": "startConnId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "bestSelectedConnIdAfterStart",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llCalcConnMaxTimeLength",
    "return_type": "extern uint32",
    "params": [
      {
        "name": "startConnId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "bestSelectedConnIdAfterStart",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llGetNextConn_hook",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llGetNextConn",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llCalcConnMaxTimeLength",
    "return_type": "uint32",
    "params": [
      {
        "name": "startConnId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "bestSelectedConnIdAfterStart",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llFindStartType_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "secTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "primTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llFindStartTypeNoQos",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "secTask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "primTask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llFindStartType",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "secTask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "primTask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llUpdateExtAdvTx",
    "return_type": "extern void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llPrepareNextExtAdv",
    "return_type": "extern void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSetupExtAdv_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSetupExtAdv",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pAdvSet",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llNextChanIndex_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "eventCounter",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llNextChanIndex",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "eventCounter",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llUpdateExtAdvTx",
    "return_type": "void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llPrepareNextExtAdv",
    "return_type": "void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpResponderProcessIncoming_hook",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "pLinkItem",
        "type": "linkDBItem_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pParsedMsg",
        "type": "smpMsgs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "SM_dhKeyCB_hook",
    "return_type": "void",
    "params": [
      {
        "name": "pDhKey",
        "type": "void *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "SM_p256KeyCB_hook",
    "return_type": "void",
    "params": [
      {
        "name": "pK",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "privateKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smpInitiatorProcessPairingRandom_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "pParsedMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "smpInitiatorProcessPairingRandom",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pParsedMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "connHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "smpResponderProcessPairingPublicKey_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "pParsedMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpResponderProcessPairingPublicKey",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pParsedMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smResponderProcessLTKReq_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRandom",
        "type": "uint8 *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "LOW"
      },
      {
        "name": "encDiv",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smResponderProcessLTKReq",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connectionHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pRandom",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "encDiv",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpResponderProcessIncoming_sPatch",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pLinkItem",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "cmdID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pParsedMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smGeneratePairingReqRsp_hook",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smGeneratePairingReqRsp",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapSendSlaveSecurityReqEvent_hook",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pDevAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "authReq",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llHealthCheck",
    "return_type": "int8",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llHealthCheck",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llHealthUpdate",
    "return_type": "void",
    "params": [
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llHealthSetThreshold",
    "return_type": "void",
    "params": [
      {
        "name": "connTime",
        "type": "uint32",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "scanTime",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "initTime",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "advTime",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_checkLegacyHCICmdStatus",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "opcode",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_checkVsEventsStatus",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llAddExtWlAndSetIgnBit",
    "return_type": "uint8",
    "params": [
      {
        "name": "extAdvRpt",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ignoreBit",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llFlushIgnoredRxEntry",
    "return_type": "uint8",
    "params": [
      {
        "name": "ignoreBit",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llFlushIgnoredRxEntry",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "ignoreBit",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSetRxCfg",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llHandleSDAALastCmdDone",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llHandleSDAAControlTX",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "nextConnPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "secTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "startTaskType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_SDAA_Init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_SDAA_RecordTxUsage",
    "return_type": "void",
    "params": [
      {
        "name": "numOfBytes",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "phyType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "power",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_SDAA_HandleSDAALastCmdDone",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_SDAA_AddDwtRecord",
    "return_type": "void",
    "params": [
      {
        "name": "dwT",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "task",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "index",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_SDAA_SampleRXWindow",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_SDAA_GetRXWindowDuration",
    "return_type": "uint16",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_SDAA_GetRXWindowDuration",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_SDAA_SetChannelInSample",
    "return_type": "void",
    "params": [
      {
        "name": "channel",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSDAASetupRXWindowCmd",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llSDAASetupRXWindowCmd",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llHandleSDAAControlTX",
    "return_type": "uint8",
    "params": [
      {
        "name": "nextConnPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "secTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "startTaskType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "linkDB_reportStatusChange",
    "return_type": "extern void",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "changeType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smProcessHCIBLEEventCode",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smProcessHCIBLEMetaEventCode",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smProcessOSALMsg",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "generate_subkey",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "leftshift_onebit",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "padding",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smAuthReqToUint8",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smEncrypt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smEncryptLocal",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smGenerateRandBuf",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "smStartRspTimer",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smStopRspTimer",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smUint8ToAuthReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_c1new",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_CMAC",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sm_f4",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_f5",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_f6",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_g2",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_s1",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_xor",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "xor_128",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smDetermineIOCaps",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smDetermineKeySize",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smEndPairing",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smFreePairingParams",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smF5Wrapper",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smGenerateAddrInput",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smGenerateConfirm",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smGenerateDHKeyCheck",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smGenerateRandMsg",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "smGetECCKeys",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smIncrementEccKeyRecycleCount",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smLinkCheck",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smNextPairingState",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smOobSCAuthentication",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smPairingSendEncInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smPairingSendIdentityAddrInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smPairingSendIdentityInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smPairingSendMasterID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smPairingSendSigningInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smProcessDataMsg",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smProcessEncryptChange",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smProcessPairingReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smRegisterResponder",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smSavePairInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smSaveRemotePublicKeys",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smSendDHKeyCheck",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smSendFailAndEnd",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smSendFailureEvt",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smSetPairingReqRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smSendPublicKeys",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smStartEncryption",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smTimedOut",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_allocateSCParameters",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sm_computeDHKey",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "sm_c1",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smpProcessIncoming",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smFinishPublicKeyExchange",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smResponderAuthStageTwo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smpResponderProcessEncryptionInformation",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smpResponderProcessIdentityAddrInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpResponderProcessIdentityInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpResponderProcessMasterID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpResponderProcessPairingConfirm",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpResponderProcessPairingDHKeyCheck",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smpResponderProcessPairingRandom",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "smpResponderProcessPairingReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpResponderProcessSigningInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildEncInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildIdentityAddrInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildIdentityInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildMasterID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildPairingConfirm",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildPairingDHKeyCheck",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smpBuildPairingFailed",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildPairingPublicKey",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildPairingRandom",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "smpBuildPairingReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildPairingReqRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildPairingRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildSecurityReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildSigningInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParseEncInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParseIdentityAddrInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParseIdentityInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParseKeypressNoti",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParseMasterID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParsePairingConfirm",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParsePairingDHKeyCheck",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smpParsePairingFailed",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParsePairingPublicKey",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParsePairingRandom",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "smpParsePairingReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParseSecurityReq",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParseSigningInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smSendSMMsg",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ENC_Init",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smGenerateAddrInput_sPatch",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smPairingSendCentralID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpResponderProcessCentralID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpBuildCentralID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpParseCentralID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpInitiatorProcessPairingRsp",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpInitiatorProcessPairingPubKey",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpInitiatorProcessPairingDHKeyCheck",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smpInitiatorProcessPairingConfirm",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpInitiatorProcessEncryptionInformation",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "smpInitiatorProcessCentralID",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpInitiatorProcessIdentityInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpInitiatorProcessIdentityAddrInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpInitiatorProcessSigningInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smInitiatorAuthStageTwo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smpInitiatorContProcessPairingPubKey",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "setupInitiatorKeys",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smInitiatorSendNextKeyInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smpResponderProcessIncoming",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smResponderSendNextKeyInfo",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smpResponderSendPairRspEvent",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smRegisterInitiator",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "smEncLTK",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "smpInitiatorProcessIncoming",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llLastCmdDoneEventHandleConnectRequest",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "llRxEntryDoneEventHandleConnectRequest",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "PeerA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "PeerAdd",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "chSel",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "llRxIgnoreEventHandleConnectRequest",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "PeerA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "PeerAdd",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "chSel",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "llAbortEventHandleStateAdv",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llLastCmdDoneEventHandleStateAdv",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llTxDoneEventHandleStateAdv",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llRxIgnoreEventHandleStateAdv",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llRxEmptyEventHandleStateAdv",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llRxEntryDoneEventHandleStateAdv",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llAbortEventHandleStateScan",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llLastCmdDoneEventHandleStateScan",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llRxIgnoreEventHandleStateScan",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llRxIgnoreEventHandleConnectResponse",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "OwnA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "OwnAdd",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "PeerA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "PeerAdd",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "llAbortEventHandleStateInit",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llLastCmdDoneEventHandleStateInit",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llRxIgnoreEventHandleStateInit",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llRxEntryDoneEventHandleStateInit",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llAbortEventHandleStatePeripheral",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llLastCmdDoneEventHandleStatePeripheral",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llAbortEventHandleStateCentral",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llLastCmdDoneEventHandleStateCentral",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llRxEntryDoneEventHandleStateConnection",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "crcError",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llLastCmdDoneEventHandleStateTest",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llRxEntryDoneEventHandleStateTest",
    "return_type": "extern uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llSetTaskInit",
    "return_type": "extern void",
    "params": [
      {
        "name": "startType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "nextSecTask",
        "type": "taskInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nextSecCommand",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "nextConnCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llSetTaskScan",
    "return_type": "extern void",
    "params": [
      {
        "name": "startType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "nextSecTask",
        "type": "taskInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nextSecCommand",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "nextConnCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSetTaskAdv",
    "return_type": "extern void",
    "params": [
      {
        "name": "startType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "nextSecCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSetTaskCentral",
    "return_type": "extern void",
    "params": [
      {
        "name": "connId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nextConnCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llSetTaskPeripheral",
    "return_type": "extern void",
    "params": [
      {
        "name": "connId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nextConnCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llSetTaskPeriodicAdv",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSetTaskPeriodicScan",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_TxEntryDoneCback",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llCheckIsSecTaskCollideWithPrimTaskInLsto",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "secTask",
        "type": "taskInfo_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "timeGap",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "selectedConnId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llPostProcessExtendedAdv",
    "return_type": "extern llStatus_t",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llTxDoneEventHandleStateExtAdv",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSetupExtendedAdvData",
    "return_type": "extern void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSetExtendedAdvReport",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "extAdvRpt",
        "type": "aeExtAdvRptEvt_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pPkt",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "evtType",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "extHdrFlgs",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pHdr",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pSyncInfo",
        "type": "uint8 * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "secPhy",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pChannelIndex",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llProcessCentralConnectionCreated",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llProcessPeripheralConnectionCreated",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llProcessScanTimeout",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llProcessConnectionEstablishFailed",
    "return_type": "void",
    "params": [
      {
        "name": "role",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reason",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llProcessAdvAddrResolutionTimeout",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llAbortEventHandleStateAdv",
    "return_type": "uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llLastCmdDoneEventHandleStateAdv",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llTxDoneEventHandleStateAdv",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llRxIgnoreEventHandleStateAdv",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llRxEmptyEventHandleStateAdv",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llRxEntryDoneEventHandleStateAdv",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llAbortEventHandleStateScan",
    "return_type": "uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llLastCmdDoneEventHandleStateScan",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llRxIgnoreEventHandleStateScan",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llRxIgnoreEventHandleConnectResponse",
    "return_type": "uint8",
    "params": [
      {
        "name": "OwnA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "OwnAdd",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "PeerA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "PeerAdd",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_llAbortEventHandleStateInit",
    "return_type": "uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llLastCmdDoneEventHandleStateInit",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llRxIgnoreEventHandleStateInit",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llRxEntryDoneEventHandleStateInit",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llAbortEventHandleStatePeripheral",
    "return_type": "uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llLastCmdDoneEventHandleStatePeripheral",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llAbortEventHandleStateCentral",
    "return_type": "uint8",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llLastCmdDoneEventHandleStateCentral",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llRxEntryDoneEventHandleStateConnection",
    "return_type": "uint8",
    "params": [
      {
        "name": "crcError",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llLastCmdDoneEventHandleStateTest",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llRxEntryDoneEventHandleStateTest",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llProcessCentralControlPacket",
    "return_type": "void",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPkt",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llProcessPeripheralControlPacket",
    "return_type": "void",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPkt",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSetTaskInit",
    "return_type": "void",
    "params": [
      {
        "name": "startType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "nextSecTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nextSecCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "nextConnCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSetTaskScan",
    "return_type": "void",
    "params": [
      {
        "name": "startType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "nextSecTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nextSecCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "nextConnCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetTaskPeriodicScan",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetTaskAdv",
    "return_type": "void",
    "params": [
      {
        "name": "startType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "nextSecCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetTaskPeriodicAdv",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetTaskCentral",
    "return_type": "void",
    "params": [
      {
        "name": "connId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nextConnCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSetTaskPeripheral",
    "return_type": "void",
    "params": [
      {
        "name": "connId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nextConnCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llSelectTaskAdv",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "secTaskID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "timeGap",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSelectTaskInit",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "secTaskID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "timeGap",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llSelectTaskScan",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "secTaskID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "timeGap",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSelectTaskPeriodicScan",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "secTaskID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "timeGap",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSelectTaskPeriodicAdv",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "secTaskID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "timeGap",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LE_ClearAdvSets",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LE_ClearAdvSets",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LL_ConnActive",
    "return_type": "uint8",
    "params": [
      {
        "name": "connId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ConnActive",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connId",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_CountAdvSets",
    "return_type": "uint8",
    "params": [
      {
        "name": "type",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_CountAdvSets",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "type",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_GetAdvSet",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "LE_SEARCH_ADV_SET",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llCheckPeripheralTerminate",
    "return_type": "uint8",
    "params": [
      {
        "name": "connId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llCheckPeripheralTerminate",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connId",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llGetNextConn",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llDataGetConnPtr",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connId",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llConnCleanup",
    "return_type": "void",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llReleaseAllConnId",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_TxEntryDoneCback",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llCompareSecondaryPrimaryTasksQoSParam",
    "return_type": "uint8",
    "params": [
      {
        "name": "qosParamType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "secTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "primConnPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llCompareSecondaryPrimaryTasksQoSParam",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "qosParamType",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "secTask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "primConnPtr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llCheckIsSecTaskCollideWithPrimTaskInLsto",
    "return_type": "uint8",
    "params": [
      {
        "name": "secTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "timeGap",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "selectedConnId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSetupConn",
    "return_type": "void",
    "params": [
      {
        "name": "connId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llProcessExtScanRxFIFO",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llAlignToNextEvent",
    "return_type": "void",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_LL_SetSecAdvChanMap",
    "return_type": "uint8",
    "params": [
      {
        "name": "chanMap",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "LL_SetSecAdvChanMap",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "chanMap",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_LL_ChanMapUpdate",
    "return_type": "uint8",
    "params": [
      {
        "name": "chanMap",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "connID",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "LL_ChanMapUpdate",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "chanMap",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "connID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llLastCmdDoneEventHandleConnectRequest",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_llRxEntryDoneEventHandleConnectRequest",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "PeerA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "PeerAdd",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "chSel",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_llRxIgnoreEventHandleConnectRequest",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "PeerA",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "PeerAdd",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "chSel",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_llConnExists",
    "return_type": "uint8",
    "params": [
      {
        "name": "peerAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "peerAddrType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "llConnExists",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "peerAddr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "peerAddrType",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llCentral_TaskEnd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llPeripheral_TaskEnd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llCoexSetHighPriorityGroup",
    "return_type": "void",
    "params": [
      {
        "name": "cmdNum",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llSetExtendedAdvParams",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pCmdParams",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "llSetExtendedAdvParams",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pAdvSet",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pCmdParams",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetupExtAdv",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llPostProcessExtendedAdv",
    "return_type": "llStatus_t",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llTxDoneEventHandleStateExtAdv",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetupExtendedAdvData",
    "return_type": "void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llSetExtendedAdvReport",
    "return_type": "uint8",
    "params": [
      {
        "name": "extAdvRpt",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pPkt",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "evtType",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "extHdrFlgs",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pHdr",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dataLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pSyncInfo",
        "type": "uint8 * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "secPhy",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pChannelIndex",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_checkAutoFeatureExchangeStatus",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_llAddExtAlAndSetIgnBit",
    "return_type": "uint8",
    "params": [
      {
        "name": "extAdvRpt",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ignoreBit",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "gapScan_init",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "SM_InitiatorInit",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_gap_CentConnRegister",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapScan_processSessionEndEvt",
    "return_type": "void",
    "params": [
      {
        "name": "pSession",
        "type": "void*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapAdv_init",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "SM_ResponderInit",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_gap_PeriConnRegister",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llExtAdv_PostProcess",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llExtScan_PostProcess",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_llExtInit_PostProcess",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_l2capSendNextSegment",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_l2capReassembleSegment",
    "return_type": "uint8",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPkt",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_L2CAP_ParseConnectReq",
    "return_type": "uint8",
    "params": [
      {
        "name": "pCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "L2CAP_ParseConnectReq",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pCmd",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pData",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "len",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_l2capParseConnectRsp",
    "return_type": "uint8",
    "params": [
      {
        "name": "pCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_L2CAP_ParseFlowCtrlCredit",
    "return_type": "uint8",
    "params": [
      {
        "name": "pCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "L2CAP_ParseFlowCtrlCredit",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pCmd",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pData",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "len",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_l2capParseDisconnectReq",
    "return_type": "uint8",
    "params": [
      {
        "name": "pCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_l2capParseDisconnectRsp",
    "return_type": "uint8",
    "params": [
      {
        "name": "pCmd",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_L2CAP_DisconnectReq",
    "return_type": "uint8",
    "params": [
      {
        "name": "CID",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_l2capBuildDisconnectRsp",
    "return_type": "uint16",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pData",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_l2capProcessConnectReq",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pConnReq",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "MAP_l2capGetCoChannelInfo",
    "return_type": "void",
    "params": [
      {
        "name": "pCoC",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pInfo",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_l2capNotifyChannelEstEvt",
    "return_type": "void",
    "params": [
      {
        "name": "pChannel",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "result",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_l2capNotifyChannelTermEvt",
    "return_type": "void",
    "params": [
      {
        "name": "pChannel",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "reason",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "MAP_l2capDisconnectChannel",
    "return_type": "void",
    "params": [
      {
        "name": "pChannel",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "reason",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapIsInitiating",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "gapIsInitiating",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_GapInit_cancelConnect",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_smpInitiatorContProcessPairingPubKey",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapInit_initiatingEnd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "MAP_gapInit_sendConnCancelledEvt",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "RTLSSrv_init",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "numOfRTLSConns",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_register",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pCB",
        "type": "pfnAppEventHandlerCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_setConnCteReceiveParams",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "samplingEnable",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "numAnt",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "antArray[]",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_setConnCteRequestEnableCmd",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "interval",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_setConnCteTransmitParams",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "types",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "antArray[]",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_setConnCteResponseEnableCmd",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_readAntennaInformationCmd",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_setCteSampleAccuracy",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate1M",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize1M",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate2M",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize2M",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCtrl",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_initAntArray",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "mainAntenna",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_handleError",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "errSrc",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "errCause",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_callAppCb",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "evtType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "evtSize",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_handleConnIqEvent",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_handleCLIqEvent",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_handleExtConnIqEvent",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_handleExtCLIqEvent",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_handleCteReqFail",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_handleReadAntInfo",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_SetCLCteTransmitParams",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteLength",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cteType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteCount",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "switchLen",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_CLCteTransmitEnable",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "advHandle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_setCLCteSamplingEnableCmd",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDuration",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "maxSampleCte",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "numAnt",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pAntPattern[]",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_getNumAnt",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "handle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "RTLSSrv_removeClNumAntNode",
    "return_type": "void",
    "params": [
      {
        "name": "syncHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sAddrCmp",
    "return_type": "bool",
    "params": [
      {
        "name": "pAddr1",
        "type": "const sAddr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAddr2",
        "type": "const sAddr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sAddrIden",
    "return_type": "bool",
    "params": [
      {
        "name": "pAddr1",
        "type": "const sAddr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAddr2",
        "type": "const sAddr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sAddrCpy",
    "return_type": "void",
    "params": [
      {
        "name": "pDest",
        "type": "sAddr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pSrc",
        "type": "const sAddr_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sAddrExtCmp",
    "return_type": "bool",
    "params": [
      {
        "name": "pAddr1",
        "type": "const uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAddr2",
        "type": "const uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_serviceCB",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "svcUuid",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "paramID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cbType",
        "type": "sensor_cb_type_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sensor_serviceCfgChangeCB",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "svcUuid",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "paramID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sensor_serviceValueChangeCB",
    "return_type": "static void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "svcUuid",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "paramID",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Sensors_taskFxn",
    "return_type": "static void",
    "params": [
      {
        "name": "a0",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "a1",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Sensors_enqueueMsg",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "event",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Sensors_performDeferred",
    "return_type": "static void",
    "params": [
      {
        "name": "def_params",
        "type": "def_params_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Sensors_init",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Sensors_defer",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pFn",
        "type": "deferredTarget_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pParams",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Sensors_disable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Sensors_registerCbs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "serviceUUID",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cbs",
        "type": "sensorProcessCBs_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Sensors_clockHandler",
    "return_type": "void",
    "params": [
      {
        "name": "deferred_target",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_registerModel",
    "return_type": "int",
    "params": [
      {
        "name": "elem_idx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pSensorCBs",
        "type": "sensorModels_CBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "sensorDataLen",
        "type": "int",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_buf",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "opcode",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "dataLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_desc_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sensor_desc_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sensor_desc_Status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "sensorModels_send_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pSensorState",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "sensorDataLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_no_data",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_status_by_id",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_Column_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rawValueX",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Column_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Column_Status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_Series_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "rawValueX1",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rawValueX2",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Series_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Series_Status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_settings_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_settings_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Settings_status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_setting_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "settingPropertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_setting_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "settingPropertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_setting_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "settingPropertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_setting_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_setting_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_setting_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Setting_status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_cadence_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_cadence_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorModels_send_cadence_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "propertyId",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Cadence_get",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Cadence_set_unack",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Cadence_set",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensor_Cadence_status",
    "return_type": "void",
    "params": [
      {
        "name": "model",
        "type": "struct bt_mesh_model *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ctx",
        "type": "struct bt_mesh_msg_ctx *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "buf",
        "type": "struct net_buf_simple *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorTmpr8_getTemperature",
    "return_type": "int",
    "params": [
      {
        "name": "pData",
        "type": "uint8_t * *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "dataLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorTmpr8_register",
    "return_type": "int",
    "params": [
      {
        "name": "elem_idx",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "sensorTmpr8_setTemperature",
    "return_type": "void",
    "params": [
      {
        "name": "value",
        "type": "int8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "simpleProfile_ReadAttrCB",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "simpleProfile_WriteAttrCB",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "SimpleProfile_AddService",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "services",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "SimpleProfile_RegisterAppCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "appCallbacks",
        "type": "simpleProfileCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SimpleProfile_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SimpleProfile_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "simpleProfile_CCCDIndCB",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "context",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "connectionHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cccdHdl",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "simpleProfile_processSNPEventCB",
    "return_type": "static void",
    "params": [
      {
        "name": "event",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "snpEventParam_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "getCharIDFromHdl",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "charHdl",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "getHdlFromCharID",
    "return_type": "static uint16_t",
    "params": [
      {
        "name": "charID",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "SimpleProfile_RegisterAppCB",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "writeCB",
        "type": "simpleProfileWrite_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "cccdCB",
        "type": "simpleProfileCCCD_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SP_ID_CREATE",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "i",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "SP_VALUE",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SM_p256KeyCB",
    "return_type": "void",
    "params": [
      {
        "name": "pK",
        "type": "hciEvt_BLEReadP256PublicKeyComplete_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "privateKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "SM_dhKeyCB",
    "return_type": "void",
    "params": [
      {
        "name": "pDhKey",
        "type": "hciEvt_BLEGenDHKeyComplete_t *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "trimDevice",
    "return_type": "static bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "enableExternalClock",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "prepareInternalClock",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "System_Setup",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "System_Init",
    "return_type": "__root void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ]
  },
  {
    "name": "resetHook",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "TempProfile_init",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pHandle",
        "type": "I2C_Handle *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "TempProfile_enable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "TempProfile_disable",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "temperature_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16_t *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "temperature_WriteAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Temperature_AddService",
    "return_type": "extern bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Temperature_RegisterProfileCBs",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "profileCallbacks",
        "type": "sensorServiceCBs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Temperature_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Temperature_GetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Time_clockInit",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Time_clockDisplay",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Time_clockSet",
    "return_type": "void",
    "params": [
      {
        "name": "pData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Time_configNext",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "state",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Time_configGattMsg",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "state",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pMsg",
        "type": "gattMsgEvent_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Time_discCurrTime",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "state",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pMsg",
        "type": "gattMsgEvent_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Time_discStart",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Time_discGattMsg",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "DISC_CURR_TIME_START",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "NULL",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "Time_indGattMsg",
    "return_type": "void",
    "params": [
      {
        "name": "pMsg",
        "type": "gattMsgEvent_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "dpl_enterCSImpl",
    "return_type": "dpl_CSState",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "dpl_leaveCSImpl",
    "return_type": "void",
    "params": [
      {
        "name": "key",
        "type": "dpl_CSState",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "vPortFree",
    "return_type": "void",
    "params": [
      {
        "name": "pv",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "closeTRNG",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "TRNGCC26XX_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "openTRNG",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "TRNGCC26XX_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "TRNGCC26XX_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "TRNGCC26XX_open",
    "return_type": "TRNGCC26XX_Handle",
    "params": [
      {
        "name": "index",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "TRNGCC26XX_close",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "TRNGCC26XX_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "TRNGCC26XX_Params_init",
    "return_type": "int8_t",
    "params": [
      {
        "name": "params",
        "type": "TRNGCC26XX_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "TRNGCC26XX_getNumber",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "handle",
        "type": "TRNGCC26XX_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "params",
        "type": "TRNGCC26XX_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "int8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "TRNGCC26XX_isParamValid",
    "return_type": "int8_t",
    "params": [
      {
        "name": "params",
        "type": "TRNGCC26XX_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.3: Random number generation. MUST use hardware TRNG or NIST SP 800-90A approved DRBG. NEVER use predictable PRNGs for cryptographic material. Ensure sufficient entropy and proper seeding.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-90A"
    ]
  },
  {
    "name": "tbm_displayItemPage",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tbm_goTo",
    "return_type": "void",
    "params": [
      {
        "name": "pMenuObj",
        "type": "tbmMenuObj_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tbm_initTwoBtnMenu",
    "return_type": "bool",
    "params": [
      {
        "name": "hDisp",
        "type": "Display_Handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pMenuMain",
        "type": "tbmMenuObj_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "numItemRow",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pfnMenuSwitchCB",
        "type": "pfnMenuSwitchCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tbm_findActiveItem",
    "return_type": "uint32",
    "params": [
      {
        "name": "itemStart",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tbm_getNumDisplayItem",
    "return_type": "uint32",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tbm_setItemStatus",
    "return_type": "void",
    "params": [
      {
        "name": "pMenuObj",
        "type": "tbmMenuObj_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "enables",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "disables",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tbm_buttonLeft",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tbm_buttonRight",
    "return_type": "bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "tbm_displayItem",
    "return_type": "void",
    "params": [
      {
        "name": "itemIndex",
        "type": "uint32",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "row",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_processLLMsg",
    "return_type": "void",
    "params": [
      {
        "name": "pEvtMsg",
        "type": "ubleEvtMsg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_processGAPMsg",
    "return_type": "void",
    "params": [
      {
        "name": "pEvtMsg",
        "type": "ubleEvtMsg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "uble_getPublicAddr",
    "return_type": "void",
    "params": [
      {
        "name": "pPublicAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_stackInit",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "addrType",
        "type": "ubleAddrType_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pStaticAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pfnPostEvtProxyCB",
        "type": "ublePostEvtProxyCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "timeCritical",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_timeCompare",
    "return_type": "uint8",
    "params": [
      {
        "name": "time1",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "time2",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_timeDelta",
    "return_type": "uint32",
    "params": [
      {
        "name": "time1",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "time2",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_setParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pValue",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_getParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_checkAddr",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "addrType",
        "type": "ubleAddrType_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_setPrivateAddr",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "addrType",
        "type": "ubleAddrType_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPrivateAddr",
        "type": "uint8*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_resetAddr",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_getAddr",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "addrType",
        "type": "ubleAddrType_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAddr",
        "type": "uint8*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_registerAntSwitchCB",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pfnAntSwitchCB",
        "type": "ubleAntSwitchCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_processMsg",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "uble_buildAndPostEvt",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "evtDst",
        "type": "ubleEvtDst_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "evt",
        "type": "ubleEvt_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pMsg",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ugap_observerScanWindowCompleteCB",
    "return_type": "static void",
    "params": [
      {
        "name": "status",
        "type": "bStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_bcastChangeState",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "state",
        "type": "ugapBcastState_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_observerChanMapToIndex",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "pChanMap",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_observerChangeState",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "state",
        "type": "ugapObserverScan_State_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_monitorChangeState",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "state",
        "type": "ugapMonitorState_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_clockHandler",
    "return_type": "void",
    "params": [
      {
        "name": "a0",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugb_advPrepareCB",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugb_advPostprocessCB",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "bStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_observerScanIndicationCB",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "bStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPayload",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "upag_monitorIndicationCB",
    "return_type": "static void",
    "params": [
      {
        "name": "status",
        "type": "bStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "sessionId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "len",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pPayload",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_monitorCompleteCB",
    "return_type": "static void",
    "params": [
      {
        "name": "status",
        "type": "bStatus_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "sessionId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_bcastInit",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pCBs",
        "type": "ugapBcastCBs_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_bcastSetDuty",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "dutyOnTime",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "dutyOffTime",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_bcastStart",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "numAdvEvent",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_bcastStop",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_scanInit",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pCBs",
        "type": "ugapObserverScanCBs_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_scanStart",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_scanStop",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_scanSuspend",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_scanResume",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_scanRequest",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "scanChanMap",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanWindow",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "scanInterval",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_monitorInit",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pCBs",
        "type": "ugapMonitorCBs_t*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_monitorStart",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_monitorStop",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ugap_monitorRequest",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "accessAddr",
        "type": "uint32_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "startTime",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "duration",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "crcInit",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_advSchedule",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "mode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_nextDataEntryDone",
    "return_type": "void",
    "params": [
      {
        "name": "pDataEntryQ",
        "type": "dataEntryQ_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ull_flushAllDataEntry",
    "return_type": "static void",
    "params": [
      {
        "name": "pDataEntryQ",
        "type": "dataEntryQ_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic hash function. Use SHA-256 minimum. Validate input length, prevent length extension attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "ull_clockHandler",
    "return_type": "void",
    "params": [
      {
        "name": "a0",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ull_advDoneCb",
    "return_type": "void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_scanDoneCb",
    "return_type": "void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_monitorDoneCb",
    "return_type": "void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ull_init",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ull_advRegisterCB",
    "return_type": "void",
    "params": [
      {
        "name": "pfnAdvAboutToCB",
        "type": "pfnAdvAboutToCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pfnAdvDoneCB",
        "type": "pfnAdvDoneCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_scanRegisterCB",
    "return_type": "void",
    "params": [
      {
        "name": "pfnScanIndicationCB",
        "type": "pfnScanIndCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pfnScanWindowCompleteCB",
        "type": "pfnScanWindowCompCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_monitorRegisterCB",
    "return_type": "void",
    "params": [
      {
        "name": "pfnMonitorIndicationCB",
        "type": "pfnMonitorIndCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pfnMonitorCompleteCB",
        "type": "pfnMonitorCompCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ull_advStart",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_advStop",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_scanSchedule",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "mode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_scanStart",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "scanChanIndex",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_scanStop",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_getAdvChanPDU",
    "return_type": "void",
    "params": [
      {
        "name": "len",
        "type": "uint8 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "payload",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "ull_rxEntryDoneCback",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ull_monitorSchedule",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "mode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ull_monitorStart",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ull_getCurrentTime",
    "return_type": "uint32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "ull_convertRatTicksToUs",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "time",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urfi_initAdvCmd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "urfi_initScanCmd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "urfi_initGenericRxCmd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urfi_clientEventCb",
    "return_type": "void",
    "params": [
      {
        "name": "h",
        "type": "RF_Handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "events",
        "type": "RF_ClientEvent",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "void*",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urfi_init",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urfi_getTxPowerVal",
    "return_type": "uint16",
    "params": [
      {
        "name": "txPower",
        "type": "int8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_setupCteSamplesEntryQueue",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "numBuffers",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_setCteAntennaArray",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pAntenna",
        "type": "urtls_cteAntSwitch_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pPattern",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "lenPattern",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "slotDurations",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_connectionIqReportEvent",
    "return_type": "void",
    "params": [
      {
        "name": "sessionId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "dataChIndex",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssi",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "rssiAntenna",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDuration",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "status",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleCount",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCtrl",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cteData",
        "type": "uint32_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง5.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ]
  },
  {
    "name": "urtls_setCteSamples",
    "return_type": "void",
    "params": [
      {
        "name": "sampleCount",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleSlot",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleRate",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCtrl",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "src",
        "type": "uint32_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "iqSamples",
        "type": "int8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_register",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pCB",
        "type": "pfnAppEventHandlerCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_callAppCb",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "evtType",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "evtSize",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_rfOverrideCteValue",
    "return_type": "void",
    "params": [
      {
        "name": "val",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "address",
        "type": "uint16_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_freeConn",
    "return_type": "void",
    "params": [
      {
        "name": "sessionId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "numHandles",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_initAntArray",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "mainAntenna",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_setConnCteReceiveParams",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "sessionId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "samplingEnable",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "slotDurations",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAntenna",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_setCteSampleAccuracy",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "sessionId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate1M",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize1M",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleRate2M",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "sampleSize2M",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "sampleCtrl",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_setConnCteRequestEnableCmd",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "sessionId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "enable",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "interval",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "length",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "type",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "urtls_getCteInfo",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "pDataEntry",
        "type": "dataEntry_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "sessionId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "channel",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UTC_monthLength",
    "return_type": "static uint8_t",
    "params": [
      {
        "name": "lpyr",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "mon",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UTC_clockUpdate",
    "return_type": "static void",
    "params": [
      {
        "name": "elapsedMSec",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UTC_timeUpdateHandler",
    "return_type": "static void",
    "params": [
      {
        "name": "a0",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UTC_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UTC_setClock",
    "return_type": "void",
    "params": [
      {
        "name": "newTime",
        "type": "UTCTime",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UTC_getClock",
    "return_type": "UTCTime",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UTC_convertUTCTime",
    "return_type": "void",
    "params": [
      {
        "name": "tm",
        "type": "UTCTimeStruct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "secTime",
        "type": "UTCTime",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UTC_convertUTCSecs",
    "return_type": "UTCTime",
    "params": [
      {
        "name": "tm",
        "type": "UTCTimeStruct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_stopClock",
    "return_type": "void",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "UtilclockFunc",
    "return_type": "static void",
    "params": [
      {
        "name": "sv",
        "type": "union sigval",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Clock_destruct",
    "return_type": "void",
    "params": [
      {
        "name": "structP",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Clock_handle",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pClock",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_isActive",
    "return_type": "bool",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Clock_isActive",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_rescheduleClock",
    "return_type": "void",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "clockPeriod",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_constructQueue",
    "return_type": "void",
    "params": [
      {
        "name": "pQueue",
        "type": "mqd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_enqueueMsg",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "msgQueue",
        "type": "mqd_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "Event_Handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "mq_receive",
    "return_type": "extern ssize_t",
    "params": [
      {
        "name": "mqdes",
        "type": "mqd_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_ptr",
        "type": "char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_len",
        "type": "size_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "msg_prio",
        "type": "unsigned int *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Util_isBufSet",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pBuf",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pattern",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Event_post",
    "return_type": "void",
    "params": [
      {
        "name": "eventQueue",
        "type": "mqd_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Watchdog_clear",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Watchdog_close",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Watchdog_control",
    "return_type": "int",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmd",
        "type": "unsigned int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Watchdog_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Watchdog_open",
    "return_type": "Watchdog_Handle",
    "params": [
      {
        "name": "index",
        "type": "unsigned int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "params",
        "type": "Watchdog_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Watchdog_Params_init",
    "return_type": "void",
    "params": [
      {
        "name": "params",
        "type": "Watchdog_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "Watchdog_setReload",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "WatchdogCC26XX_clear",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "WatchdogCC26XX_close",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "WatchdogCC26XX_control",
    "return_type": "int",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmd",
        "type": "unsigned int",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "WatchdogCC26XX_init",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "WatchdogCC26XX_open",
    "return_type": "Watchdog_Handle",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "params",
        "type": "Watchdog_Params *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "WatchdogCC26XX_setReload",
    "return_type": "void",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "WatchdogCC26XX_initHw",
    "return_type": "static void",
    "params": [
      {
        "name": "handle",
        "type": "Watchdog_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "watchdogPreNotify",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "eventType",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "clientArg",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "watchdogPostNotify",
    "return_type": "static uint32_t",
    "params": [
      {
        "name": "eventType",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "clientArg",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "zaesccmAuthEncrypt",
    "return_type": "signed char",
    "params": [
      {
        "name": "encrypt",
        "type": "unsigned char",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "Mval",
        "type": "unsigned char",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "Nonce",
        "type": "unsigned char *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "LOW"
      },
      {
        "name": "M",
        "type": "unsigned char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_m",
        "type": "unsigned short",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "A",
        "type": "unsigned char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_a",
        "type": "unsigned short",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "unsigned char *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "MAC",
        "type": "unsigned char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ccmLVal",
        "type": "unsigned char",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "zaesccmDecryptAuth",
    "return_type": "signed char",
    "params": [
      {
        "name": "decrypt",
        "type": "unsigned char",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "Mval",
        "type": "unsigned char",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "Nonce",
        "type": "unsigned char *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "LOW"
      },
      {
        "name": "M",
        "type": "unsigned char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_m",
        "type": "unsigned short",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "A",
        "type": "unsigned char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len_a",
        "type": "unsigned short",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "AesKey",
        "type": "unsigned char *",
        "comment": "Cryptographic key material. MUST be โฅ128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      },
      {
        "name": "MAC",
        "type": "unsigned char *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "ccmLVal",
        "type": "unsigned char",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 ยง4.1: AES cryptographic function. MUST use FIPS 140-2 approved implementation with โฅ128-bit keys. Validate key derivation, IV/nonce uniqueness, and secure key storage. For BLE: Use AES-CCM for encryption/authentication.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  },
  {
    "name": "halRtcIntForRfCback",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halRtcIntForOsalCback",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halSleepInit",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halSleep",
    "return_type": "void",
    "params": [
      {
        "name": "osal_timeout",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halEnterSleep",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halPowerOnReq",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halPowerOffReq",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halWarmBoot",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halRestoreSleepLevel",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halAdjustOsalTimer",
    "return_type": "void",
    "params": [
      {
        "name": "timestamp1",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "timestamp2",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "halBuildRtcCompare",
    "return_type": "uint32",
    "params": [
      {
        "name": "timeout",
        "type": "uint32",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SysTickIntHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SysTickSetup",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ]
  },
  {
    "name": "SysCtrlClockGet",
    "return_type": "unsigned long",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ]
  }
]