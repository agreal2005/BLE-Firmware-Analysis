[
  {
    "name": "abort",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C380"
  },
  {
    "name": "main",
    "return_type": "int",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00014FB4"
  },
  {
    "name": "ble_dispatch_liteInit",
    "return_type": "void",
    "params": [
      {
        "name": "taskId",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C120"
  },
  {
    "name": "driverTable_fnSpinlock",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B8C4"
  },
  {
    "name": "RegisterAssertCback",
    "return_type": "void",
    "params": [
      {
        "name": "appAssertHandler",
        "type": "assertCback_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001BFD0"
  },
  {
    "name": "DefaultAssertCback",
    "return_type": "void",
    "params": [
      {
        "name": "assertCause",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "assertSubcause",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000092CE"
  },
  {
    "name": "setBleUserConfig",
    "return_type": "void",
    "params": [
      {
        "name": "userCfg",
        "type": "icall_userCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00008724"
  },
  {
    "name": "GPIO_Board_keyCallback",
    "return_type": "static void",
    "params": [
      {
        "name": "index",
        "type": "uint_least8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000186B0"
  },
  {
    "name": "Board_initHook",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00008C56"
  },
  {
    "name": "Board_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001A3AC"
  },
  {
    "name": "devInfo_ReadAttrCB",
    "return_type": "static bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pLen",
        "type": "uint16 *",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "maxLen",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "method",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0000F500"
  },
  {
    "name": "DevInfo_AddService",
    "return_type": "bStatus_t",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00019E9C"
  },
  {
    "name": "DevInfo_SetParameter",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "param",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint8",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "value",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0000E084"
  },
  {
    "name": "GAPBondMgr_Init",
    "return_type": "void",
    "params": [
      {
        "name": "task_id",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cfg_gapBond_maxBonds",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cfg_gapBond_maxCharCfg",
        "type": "uint8_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cfg_gapBond_gatt_no_client",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cfg_gapBond_gatt_no_service_changed",
        "type": "uint8_t",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00010514"
  },
  {
    "name": "GATTServApp_InitCharCfg",
    "return_type": "void",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "charCfgTbl",
        "type": "gattCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00018DB0"
  },
  {
    "name": "GATTServApp_ProcessCharCfg",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "charCfgTbl",
        "type": "gattCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "authenticated",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "attrTbl",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "numAttrs",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pfnReadAttrCB",
        "type": "pfnGATTReadAttrCB_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001025C"
  },
  {
    "name": "GATTServApp_ProcessCCCWriteReq",
    "return_type": "bStatus_t",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pAttr",
        "type": "gattAttribute_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "pValue",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "len",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "offset",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "validCfg",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00016882"
  },
  {
    "name": "GATTServApp_ReadCharCfg",
    "return_type": "uint16",
    "params": [
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "charCfgTbl",
        "type": "gattCharCfg_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C12C"
  },
  {
    "name": "Util_constructClock",
    "return_type": "extern Clock_Handle",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "clockCB",
        "type": "Clock_FuncPtr",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "clockDuration",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "clockPeriod",
        "type": "uint32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "startFlag",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00015FA0"
  },
  {
    "name": "Util_startClock",
    "return_type": "extern void",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C496"
  },
  {
    "name": "halAssertInit",
    "return_type": "void",
    "params": [
      {
        "name": "initAssertCback",
        "type": "assertCback_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "initLegacyMode",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B1A4"
  },
  {
    "name": "halAssertHandler",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C51A"
  },
  {
    "name": "HCI_Init",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000165B8"
  },
  {
    "name": "ICall_enterCSImpl",
    "return_type": "ICall_CSState",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001AEB0"
  },
  {
    "name": "ICall_leaveCSImpl",
    "return_type": "void",
    "params": [
      {
        "name": "key",
        "type": "ICall_CSState",
        "comment": "Cryptographic key material. MUST be \u2265128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B9A0"
  },
  {
    "name": "ICall_heapFree",
    "return_type": "void",
    "params": [
      {
        "name": "blk",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00018720"
  },
  {
    "name": "ICall_AbsoluteTimePlusTimerInMilli",
    "return_type": "static void",
    "params": [
      {
        "name": "timeout",
        "type": "uint_least32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "tsTimer",
        "type": "struct timespec *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00018F64"
  },
  {
    "name": "ICall_eventPost",
    "return_type": "static void",
    "params": [
      {
        "name": "taskentry",
        "type": "ICall_TaskEntry *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B7AC"
  },
  {
    "name": "ICall_searchServiceEntity",
    "return_type": "ICall_EntityID",
    "params": [
      {
        "name": "service",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00018F98"
  },
  {
    "name": "ICall_dispatch",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_FuncArgsHdr *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000186E8"
  },
  {
    "name": "ICall_taskEntry",
    "return_type": "static Void",
    "params": [
      {
        "name": "arg0",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "arg1",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001BF58"
  },
  {
    "name": "ICall_init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00019508"
  },
  {
    "name": "ICall_createRemoteTasksAtRuntime",
    "return_type": "void",
    "params": [
      {
        "name": "remoteTaskTable",
        "type": "ICall_RemoteTask_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "nbElems",
        "type": "uint8_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00012C74"
  },
  {
    "name": "ICall_createRemoteTasks",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00019EC4"
  },
  {
    "name": "ICall_heapMalloc",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "size",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0000FD8C"
  },
  {
    "name": "ICall_msgEnqueue",
    "return_type": "static void",
    "params": [
      {
        "name": "q_ptr",
        "type": "ICall_MsgQueue *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg_ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001A25A"
  },
  {
    "name": "ICall_primRepostSync",
    "return_type": "static ICall_Errno",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B248"
  },
  {
    "name": "ICall_primEntityId2ServiceId",
    "return_type": "static ICall_Errno",
    "params": [
      {
        "name": "entityId",
        "type": "ICall_EntityID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "servId",
        "type": "ICall_ServiceEnum *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00019538"
  },
  {
    "name": "ICall_clockFunc",
    "return_type": "static Void",
    "params": [
      {
        "name": "arg",
        "type": "UArg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C2DE"
  },
  {
    "name": "ICall_registerApp",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "entity",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msgSyncHdl",
        "type": "ICall_SyncHandle *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00015930"
  },
  {
    "name": "ICall_freeMsg",
    "return_type": "void",
    "params": [
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C2E4"
  },
  {
    "name": "ICall_sendServiceMsg",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "format",
        "type": "ICall_MSGFormat",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00019F14"
  },
  {
    "name": "ICall_fetchServiceMsg",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00018E8E"
  },
  {
    "name": "ICall_wait",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "milliseconds",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00010A58"
  },
  {
    "name": "ICall_signal",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "msgSyncHdl",
        "type": "ICall_SyncHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001BDC0"
  },
  {
    "name": "ICall_enrollService",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "service",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "fn",
        "type": "ICall_ServiceFunc",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "entity",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msgSyncHdl",
        "type": "ICall_SyncHandle *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0000EF08"
  },
  {
    "name": "ICall_free",
    "return_type": "void",
    "params": [
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3B2"
  },
  {
    "name": "ICall_getHeapStats",
    "return_type": "void",
    "params": [
      {
        "name": "pStats",
        "type": "ICall_heapStats_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3B6"
  },
  {
    "name": "ICall_send",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "format",
        "type": "ICall_MSGFormat",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000141DC"
  },
  {
    "name": "ICall_fetchMsg",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000158D8"
  },
  {
    "name": "ICall_abort",
    "return_type": "ICall_Errno",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B798"
  },
  {
    "name": "ICall_getTicks",
    "return_type": "uint_fast32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3BA"
  },
  {
    "name": "ICall_getMaxMSecs",
    "return_type": "uint_fast32_t",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00019A5C"
  },
  {
    "name": "ICall_setTimerMSecs",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "msecs",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cback",
        "type": "ICall_TimerCback",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "id",
        "type": "ICall_TimerID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00018790"
  },
  {
    "name": "ICall_setTimer",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "ticks",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "cback",
        "type": "ICall_TimerCback",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "id",
        "type": "ICall_TimerID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00012020"
  },
  {
    "name": "ICall_stopTimer",
    "return_type": "void",
    "params": [
      {
        "name": "id",
        "type": "ICall_TimerID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C1A4"
  },
  {
    "name": "ICall_pwrUpdActivityCounter",
    "return_type": "bool",
    "params": [
      {
        "name": "incFlag",
        "type": "bool",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B7C0"
  },
  {
    "name": "ICall_pwrRequire",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "bitmap",
        "type": "ICall_PwrBitmap_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001BF4C"
  },
  {
    "name": "ICall_pwrDispense",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "bitmap",
        "type": "ICall_PwrBitmap_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001BF40"
  },
  {
    "name": "ICall_waitMatch",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "milliseconds",
        "type": "uint_least32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "matchFn",
        "type": "ICall_MsgMatchFn",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "src",
        "type": "ICall_ServiceEnum *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void * *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00008550"
  },
  {
    "name": "ICall_getEntityId",
    "return_type": "ICall_EntityID",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000173B4"
  },
  {
    "name": "ICall_getLocalMsgEntityId",
    "return_type": "uint_fast8_t",
    "params": [
      {
        "name": "service",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "entity",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00019A30"
  },
  {
    "name": "matchLiteCS",
    "return_type": "static bool",
    "params": [
      {
        "name": "src",
        "type": "ICall_ServiceEnum",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "const void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C030"
  },
  {
    "name": "ICall_sendServiceComplete",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "src",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "dest",
        "type": "ICall_EntityID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "format",
        "type": "ICall_MSGFormat",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "msg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.7: BLE GATT operation. Enforce attribute permissions, validate handle ranges, sanitize input data. Implement proper access controls and prevent information disclosure.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00012D64"
  },
  {
    "name": "rfErrCb",
    "return_type": "void",
    "params": [
      {
        "name": "h",
        "type": "RF_Handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "ch",
        "type": "RF_CmdHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "e",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C510"
  },
  {
    "name": "PowerCC26XX_isStableXOSC_HF",
    "return_type": "extern bool",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00019FB4"
  },
  {
    "name": "ICallPlatform_pwrRequireImpl",
    "return_type": "static void",
    "params": [
      {
        "name": "bitmap",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00019A04"
  },
  {
    "name": "ICallPlatform_pwrDispenseImpl",
    "return_type": "static void",
    "params": [
      {
        "name": "bitmap",
        "type": "uint_fast32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000199D8"
  },
  {
    "name": "ICallPlatform_pwrUpdActivityCounter",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrUpdActivityCounterArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000139BC"
  },
  {
    "name": "ICallPlatform_pwrRequire",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrBitmapArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B22E"
  },
  {
    "name": "ICallPlatform_pwrDispense",
    "return_type": "ICall_Errno",
    "params": [
      {
        "name": "args",
        "type": "ICall_PwrBitmapArgs *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B214"
  },
  {
    "name": "ICall_heapGetStats",
    "return_type": "void",
    "params": [
      {
        "name": "pStats",
        "type": "ICall_heapStats_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ],
    "address": "00019EEC"
  },
  {
    "name": "stack_main",
    "return_type": "extern int",
    "params": [
      {
        "name": "arg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00015014"
  },
  {
    "name": "GPIO_read",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "SRDY_PIN",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B784"
  },
  {
    "name": "osal_enroll_senderid",
    "return_type": "void",
    "params": [
      {
        "name": "taskid",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "dispatchid",
        "type": "ICall_EntityID",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B5B8"
  },
  {
    "name": "osal_init_system",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ],
    "address": "000166F8"
  },
  {
    "name": "osal_timer_init",
    "return_type": "void",
    "params": [
      {
        "name": "tickPeriod",
        "type": "uint_least32_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "osalMaxMsecs",
        "type": "uint_least32_t",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B98C"
  },
  {
    "name": "osal_start_system",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: CRITICAL - Deprecated unsafe function. Replace with bounds-checked alternatives (strncpy, snprintf, etc.). High risk of buffer overflow, code injection, and memory corruption.",
    "security_level": "CRITICAL",
    "compliance_tags": [
      "NIST-SP-800-53",
      "CWE-119"
    ],
    "address": "00017DC8"
  },
  {
    "name": "osal_set_icall_hook",
    "return_type": "void",
    "params": [
      {
        "name": "param",
        "type": "osal_icallMsg_hook_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C138"
  },
  {
    "name": "osal_CbTimerInit",
    "return_type": "void",
    "params": [
      {
        "name": "taskId",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001ACB4"
  },
  {
    "name": "osal_snv_init",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001A1BC"
  },
  {
    "name": "rfCallback_hook",
    "return_type": "extern void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C4D4"
  },
  {
    "name": "ROM_Spinlock",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001B810"
  },
  {
    "name": "ROM_Init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000195F8"
  },
  {
    "name": "rfCallback_ADV_NCONN_and_ADV_CONN",
    "return_type": "extern void",
    "params": [
      {
        "name": "rfHandle",
        "type": "RF_Handle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "cmdHandle",
        "type": "RF_CmdHandle",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "events",
        "type": "RF_EventMask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0000ECB4"
  },
  {
    "name": "LL_ProcessEvent_LL_EVT_EXT_SCAN_TIMEOUT_hook",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C3D2"
  },
  {
    "name": "LL_ProcessEvent_LL_EVT_MASTER_CONN_CREATED_hook",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3D6"
  },
  {
    "name": "HOOK_llProcessMasterControlPacket_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3A2"
  },
  {
    "name": "llScheduler_no_INIT_CFG_no_SCAN_CFG",
    "return_type": "extern void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00004A24"
  },
  {
    "name": "llScheduler_hook",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C4C4"
  },
  {
    "name": "MAP_llGetCteInfo",
    "return_type": "uint8",
    "params": [
      {
        "name": "id",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "ptr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C41A"
  },
  {
    "name": "MAP_RTLSSrv_processHciEvent",
    "return_type": "uint8",
    "params": [
      {
        "name": "hciEvt",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "hciEvtSz",
        "type": "uint16_t",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pEvtData",
        "type": "uint8_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3DE"
  },
  {
    "name": "MAP_llUpdateCteState",
    "return_type": "void",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000199AA"
  },
  {
    "name": "MAP_llSetupCte",
    "return_type": "uint8",
    "params": [
      {
        "name": "connPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "req",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C43E"
  },
  {
    "name": "MAP_llFreeCteSamplesEntryQueue",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C416"
  },
  {
    "name": "MAP_HCI_CteRequestFailedEvent",
    "return_type": "void",
    "params": [
      {
        "name": "status",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0000C982"
  },
  {
    "name": "LL_AbortedCback_peripheral",
    "return_type": "extern uint32_t",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001AC14"
  },
  {
    "name": "MAP_llDmmSetThreshold",
    "return_type": "void",
    "params": [
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "handle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "reset",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000147F2"
  },
  {
    "name": "MAP_llDmmGetActivityIndex",
    "return_type": "uint32",
    "params": [
      {
        "name": "cmdNum",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C406"
  },
  {
    "name": "MAP_llDmmSetAdvHandle",
    "return_type": "uint8",
    "params": [
      {
        "name": "handle",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "clear",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C40A"
  },
  {
    "name": "MAP_llDmmDynamicFree",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00013CCA"
  },
  {
    "name": "MAP_llDmmDynamicAlloc",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53 SI-10: Memory management function. Validate allocation size, check return values, prevent integer overflow. Clear sensitive data before deallocation. Implement double-free protection.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C402"
  },
  {
    "name": "MAP_LL_AbortedCback",
    "return_type": "uint32_t",
    "params": [
      {
        "name": "preempted",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3DA"
  },
  {
    "name": "MAP_llSetStarvationMode",
    "return_type": "uint8",
    "params": [
      {
        "name": "connId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "setOnOffValue",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C43A"
  },
  {
    "name": "llSetStarvationMode",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connId",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "setOnOffValue",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000171C8"
  },
  {
    "name": "MAP_llMaster_TaskEnd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00014E32"
  },
  {
    "name": "MAP_llSlave_TaskEnd",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C446"
  },
  {
    "name": "MAP_llInitFeatureSet",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00016DD8"
  },
  {
    "name": "MAP_llCoexSetParams",
    "return_type": "void",
    "params": [
      {
        "name": "cmdNum",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "pCmdParams",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00011AAE"
  },
  {
    "name": "MAP_llCoexInit",
    "return_type": "void",
    "params": [
      {
        "name": "enable",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000116A2"
  },
  {
    "name": "MAP_llCoexUpdateCounters",
    "return_type": "void",
    "params": [
      {
        "name": "grant",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001222E"
  },
  {
    "name": "MAP_llCoexRfLinkRatCompareConnMaxTimeLength",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3FE"
  },
  {
    "name": "MAP_llUpdatePeriodicAdvChainPacket",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00019E72"
  },
  {
    "name": "MAP_llPeriodicAdv_PostProcess",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00015DFA"
  },
  {
    "name": "MAP_llTrigPeriodicAdv",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pPeriodicAdv",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C44A"
  },
  {
    "name": "MAP_llSetupPeriodicAdv",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C442"
  },
  {
    "name": "MAP_llSetPeriodicSyncInfo",
    "return_type": "void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      },
      {
        "name": "pBuf",
        "type": "uint8 *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-53 SI-10: Buffer operation. Validate buffer bounds, prevent overflow/underflow, sanitize input data, implement length checks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000172E6"
  },
  {
    "name": "MAP_llClearPeriodicAdvSets",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0000FCDA"
  },
  {
    "name": "MAP_gapAdv_periodicAdvCmdCompleteCBs",
    "return_type": "uint8",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C3EA"
  },
  {
    "name": "MAP_llProcessExtScanRxFIFO_hook",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C432"
  },
  {
    "name": "MAP_llProcessPeriodicScanRxFIFO",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "000162E6"
  },
  {
    "name": "MAP_llTerminatePeriodicScan",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "000179C6"
  },
  {
    "name": "MAP_gapScan_periodicAdvCmdCompleteCBs",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C3EE"
  },
  {
    "name": "MAP_gapScan_periodicAdvCmdStatusCBs",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C3F2"
  },
  {
    "name": "MAP_gapScan_processBLEPeriodicAdvCBs",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C3F6"
  },
  {
    "name": "MAP_llClearPeriodicScanSets",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001127A"
  },
  {
    "name": "LE_SetExtAdvData_hook",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C3C6"
  },
  {
    "name": "LE_SetExtAdvData",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00016144"
  },
  {
    "name": "LE_SetExtScanRspData_hook",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C3CE"
  },
  {
    "name": "LE_SetExtScanRspData",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00016198"
  },
  {
    "name": "LE_SetExtAdvEnable_hook",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C3CA"
  },
  {
    "name": "LE_SetExtAdvEnable",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0000546C"
  },
  {
    "name": "MAP_gapAdv_handleAdvHciCmdComplete",
    "return_type": "uint8",
    "params": [
      {
        "name": "pMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C3E6"
  },
  {
    "name": "llCalcConnMaxTimeLength",
    "return_type": "extern uint32",
    "params": [
      {
        "name": "startConnId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "bestSelectedConnIdAfterStart",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0000C02C"
  },
  {
    "name": "llGetNextConn_hook",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C4BC"
  },
  {
    "name": "llGetNextConn",
    "return_type": "return",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0000A5E4"
  },
  {
    "name": "MAP_llCalcConnMaxTimeLength",
    "return_type": "uint32",
    "params": [
      {
        "name": "startConnId",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "bestSelectedConnIdAfterStart",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3FA"
  },
  {
    "name": "llFindStartType_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "secTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "primTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C4B8"
  },
  {
    "name": "llFindStartType",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "secTask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "primTask",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00009A90"
  },
  {
    "name": "llUpdateExtAdvTx",
    "return_type": "extern void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0000512C"
  },
  {
    "name": "llPrepareNextExtAdv",
    "return_type": "extern void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "advSet_t *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0000A738"
  },
  {
    "name": "llSetupExtAdv_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C4C8"
  },
  {
    "name": "llSetupExtAdv",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pAdvSet",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00002B0C"
  },
  {
    "name": "llNextChanIndex_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "eventCounter",
        "type": "uint16",
        "comment": "Size/length parameter. MUST validate against buffer bounds, check for integer overflow, ensure non-negative values, implement maximum size limits to prevent DoS attacks.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C4C0"
  },
  {
    "name": "llNextChanIndex",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "eventCounter",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "000161EC"
  },
  {
    "name": "MAP_llUpdateExtAdvTx",
    "return_type": "void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C44E"
  },
  {
    "name": "MAP_llPrepareNextExtAdv",
    "return_type": "void",
    "params": [
      {
        "name": "pAdvSet",
        "type": "void *",
        "comment": "Buffer pointer. MUST validate non-NULL, check bounds against length parameter, sanitize input data, prevent buffer overflow/underflow attacks.",
        "security_risk": "HIGH"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C42E"
  },
  {
    "name": "smpResponderProcessIncoming_hook",
    "return_type": "extern uint8",
    "params": [
      {
        "name": "pLinkItem",
        "type": "linkDBItem_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "cmdID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pParsedMsg",
        "type": "smpMsgs_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C4E0"
  },
  {
    "name": "SM_dhKeyCB_hook",
    "return_type": "void",
    "params": [
      {
        "name": "pDhKey",
        "type": "void *",
        "comment": "Cryptographic key material. MUST be \u2265128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ],
    "address": "0001C46E"
  },
  {
    "name": "SM_p256KeyCB_hook",
    "return_type": "void",
    "params": [
      {
        "name": "pK",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "privateKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be \u2265128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a74.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ],
    "address": "0001C472"
  },
  {
    "name": "smpResponderProcessPairingPublicKey_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "pParsedMsg",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C4E4"
  },
  {
    "name": "smpResponderProcessPairingPublicKey",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pParsedMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "000156BC"
  },
  {
    "name": "smResponderProcessLTKReq_hook",
    "return_type": "uint8",
    "params": [
      {
        "name": "connectionHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pRandom",
        "type": "uint8 *",
        "comment": "Random/entropy parameter. MUST be cryptographically secure, unpredictable, and have sufficient entropy. Never reuse nonces.",
        "security_risk": "LOW"
      },
      {
        "name": "encDiv",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C4DC"
  },
  {
    "name": "smResponderProcessLTKReq",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "connectionHandle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pRandom",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "encDiv",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0000CE70"
  },
  {
    "name": "smpResponderProcessIncoming_sPatch",
    "return_type": "return",
    "params": [
      {
        "name": "param",
        "type": "pLinkItem",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "cmdID",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "param",
        "type": "pParsedMsg",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "00018D78"
  },
  {
    "name": "smGeneratePairingReqRsp_hook",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2 \u00a75.8: BLE Security Manager operation. Use LE Secure Connections with ECDH, avoid 'Just Works' pairing. Implement OOB authentication where possible, secure key storage required.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C4D8"
  },
  {
    "name": "gapSendSlaveSecurityReqEvent_hook",
    "return_type": "void",
    "params": [
      {
        "name": "taskID",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "connHandle",
        "type": "uint16",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "pDevAddr",
        "type": "uint8 *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "authReq",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a75.2: BLE GAP operation. Use LE Secure Connections, implement privacy features, validate address types. Enforce connection parameter limits and prevent tracking attacks.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53",
      "NIST-SP-800-121r2"
    ],
    "address": "0001C4B0"
  },
  {
    "name": "MAP_llHealthUpdate",
    "return_type": "void",
    "params": [
      {
        "name": "state",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00014DCE"
  },
  {
    "name": "MAP_checkVsEventsStatus",
    "return_type": "uint8_t",
    "params": [],
    "nist_comment": "NIST SP 800-53 IA-2: Authentication function. Implement multi-factor authentication, prevent replay attacks, validate credentials securely, implement account lockout policies.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C3E2"
  },
  {
    "name": "MAP_LL_SDAA_Init",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0000DA6A"
  },
  {
    "name": "MAP_LL_SDAA_RecordTxUsage",
    "return_type": "void",
    "params": [
      {
        "name": "numOfBytes",
        "type": "uint16",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "phyType",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "power",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      },
      {
        "name": "channel",
        "type": "uint8",
        "comment": "Integer parameter. Validate range limits, check for overflow/underflow, ensure consistent sign handling, implement bounds checking.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0000E4BA"
  },
  {
    "name": "MAP_LL_SDAA_HandleSDAALastCmdDone",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0000D7BE"
  },
  {
    "name": "MAP_LL_SDAA_SampleRXWindow",
    "return_type": "void",
    "params": [],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0000EA5A"
  },
  {
    "name": "MAP_llSDAASetupRXWindowCmd",
    "return_type": "uint8",
    "params": [],
    "nist_comment": "NIST SP 800-121r2: Initialization function. Validate all configuration parameters, disable unused features, apply principle of least privilege, implement secure defaults.",
    "security_level": "MEDIUM",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C436"
  },
  {
    "name": "MAP_llHandleSDAAControlTX",
    "return_type": "uint8",
    "params": [
      {
        "name": "nextConnPtr",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "secTask",
        "type": "void *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "MEDIUM"
      },
      {
        "name": "startTaskType",
        "type": "uint8",
        "comment": "Security identifier/handle. MUST validate as active/authorized, implement session management, prevent handle reuse attacks, enforce access control policies.",
        "security_risk": "MEDIUM"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C42A"
  },
  {
    "name": "SM_p256KeyCB",
    "return_type": "void",
    "params": [
      {
        "name": "pK",
        "type": "hciEvt_BLEReadP256PublicKeyComplete_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      },
      {
        "name": "privateKey",
        "type": "uint8 *",
        "comment": "Cryptographic key material. MUST be \u2265128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2 \u00a74.2: ECC cryptographic function. MUST use NIST P-256 curve minimum. Validate point operations, secure random number generation, and side-channel protection.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ],
    "address": "00015CA0"
  },
  {
    "name": "SM_dhKeyCB",
    "return_type": "void",
    "params": [
      {
        "name": "pDhKey",
        "type": "hciEvt_BLEGenDHKeyComplete_t *",
        "comment": "Cryptographic key material. MUST be \u2265128 bits, randomly generated, securely stored, and cleared after use. Implement key rotation policies.",
        "security_risk": "CRITICAL"
      }
    ],
    "nist_comment": "NIST SP 800-121r2: Cryptographic operation. Ensure FIPS 140-2 compliance, secure key management, and proper algorithm usage.",
    "security_level": "HIGH",
    "compliance_tags": [
      "NIST-SP-800-53",
      "FIPS-140-2",
      "NIST-SP-800-57"
    ],
    "address": "0001851C"
  },
  {
    "name": "Util_stopClock",
    "return_type": "void",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C49A"
  },
  {
    "name": "Util_isActive",
    "return_type": "bool",
    "params": [
      {
        "name": "pClock",
        "type": "Clock_Struct *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001C492"
  },
  {
    "name": "Util_constructQueue",
    "return_type": "void",
    "params": [
      {
        "name": "pQueue",
        "type": "mqd_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "0001BE30"
  },
  {
    "name": "Util_enqueueMsg",
    "return_type": "uint8_t",
    "params": [
      {
        "name": "msgQueue",
        "type": "mqd_t",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "event",
        "type": "Event_Handle",
        "comment": "Parameter requires validation. Check range/format, sanitize input, implement proper error handling per NIST security guidelines.",
        "security_risk": "LOW"
      },
      {
        "name": "pMsg",
        "type": "uint8_t *",
        "comment": "Pointer parameter. MUST validate non-NULL, check memory access bounds, prevent use-after-free and double-free vulnerabilities.",
        "security_risk": "LOW"
      }
    ],
    "nist_comment": "NIST SP 800-53: Security control implementation required. Validate inputs, implement error handling, apply least privilege principle, ensure secure coding practices per NIST guidelines.",
    "security_level": "LOW",
    "compliance_tags": [
      "NIST-SP-800-53"
    ],
    "address": "00019138"
  }
]